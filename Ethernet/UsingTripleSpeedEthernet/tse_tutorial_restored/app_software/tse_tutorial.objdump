
C:/Users/julia/Documents/MicArrayProject/Ethernet/UsingTripleSpeedEthernet/tse_tutorial_restored/app_software/tse_tutorial.elf:     file format elf32-littlenios2
C:/Users/julia/Documents/MicArrayProject/Ethernet/UsingTripleSpeedEthernet/tse_tutorial_restored/app_software/tse_tutorial.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801a8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00004cdc memsz 0x00004cdc flags r-x
    LOAD off    0x00005cfc vaddr 0x00084cfc paddr 0x00086bd0 align 2**12
         filesz 0x00001ed4 memsz 0x00001ed4 flags rw-
    LOAD off    0x00008aa4 vaddr 0x00088aa4 paddr 0x00088aa4 align 2**12
         filesz 0x00000000 memsz 0x00000560 flags rw-
    LOAD off    0x00008000 vaddr 0x00100000 paddr 0x00089004 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000188  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004a14  000801a8  000801a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000140  00084bbc  00084bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ed4  00084cfc  00086bd0  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000560  00088aa4  00088aa4  00008aa4  2**2
                  ALLOC, SMALL_DATA
  6 .ROM_block    00000000  00000000  00000000  00008080  2**0
                  CONTENTS
  7 .main_memory  00000000  00089004  00089004  00008080  2**0
                  CONTENTS
  8 .descriptor_memory 00000080  00100000  00089004  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000023  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a30  00000000  00000000  000080a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001904e  00000000  00000000  00008ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006ab4  00000000  00000000  00021b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006cd7  00000000  00000000  000285da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001474  00000000  00000000  0002f2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b9f  00000000  00000000  00030728  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005b18  00000000  00000000  000332c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00038de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000600  00000000  00000000  00038df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003bcc4  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003bcc7  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003bcd3  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003bcd4  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003bcd5  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003bcde  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003bce7  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003bcf0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b3cd  00000000  00000000  0003bcfb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801a8 l    d  .text	00000000 .text
00084bbc l    d  .rodata	00000000 .rodata
00084cfc l    d  .rwdata	00000000 .rwdata
00088aa4 l    d  .bss	00000000 .bss
00000000 l    d  .ROM_block	00000000 .ROM_block
00089004 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 BSP//obj/HAL/src/crt0.o
000801e0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tse_tutorial.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008515c l     O .rwdata	00001060 jtag_uart
0008512c l     O .rwdata	00000030 sgdma_rx
000850fc l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080a74 l     F .text	00000048 altera_avalon_jtag_uart_timeout
00080abc l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00080ff4 l     F .text	00000060 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008174c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008195c l     F .text	00000080 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00086364 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00082bb0 l     F .text	00000008 __fp_unlock
00082bc4 l     F .text	0000019c __sinit.part.1
00082d60 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
0008400c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00086bcc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00088ac8 g     O .bss	00000004 alt_instruction_exception_handler
000845a0 g     F .text	00000054 _isatty_r
000806dc g     F .text	00000050 alt_main
000801e4 g     F .text	000000d4 rx_ethernet_isr
00088f04 g     O .bss	00000100 alt_irq
000845f4 g     F .text	00000060 _lseek_r
00086bd0 g       *ABS*	00000000 __flash_rwdata_start
00089004 g       *ABS*	00000000 __alt_heap_start
000810e0 g     F .text	0000008c alt_avalon_sgdma_do_sync_transfer
00084328 g     F .text	0000005c __sseek
00082f10 g     F .text	00000010 __sinit
000824dc g     F .text	00000140 __swbuf_r
00082d68 g     F .text	00000078 __sfmoreglue
00084920 g     F .text	00000004 __malloc_unlock
00081278 g     F .text	00000128 alt_avalon_sgdma_construct_descriptor_burst
00082ef8 g     F .text	00000018 _cleanup
00081d8c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g       *ABS*	00000000 __alt_mem_ROM_block
00080000 g     F .entry	0000000c __reset
00081420 g     F .text	00000048 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
00084544 g     F .text	0000005c _fstat_r
00088acc g     O .bss	00000004 errno
00082430 g     F .text	00000014 __srget
000842a4 g     F .text	00000008 __seofread
00088ab4 g     O .bss	00000004 alt_argv
0008eb90 g       *ABS*	00000000 _gp
000861bc g     O .rwdata	00000180 alt_fd_list
00081f98 g     F .text	00000070 _getc_r
00082008 g     F .text	00000088 getc
000817c8 g     F .text	0000007c alt_find_dev
0008210c g     F .text	00000148 memcpy
00082bb8 g     F .text	0000000c _cleanup_r
000819dc g     F .text	00000094 alt_io_redirect
00081eec g     F .text	00000074 alt_exception_cause_generated_bad_addr
00081490 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00080d00 g     F .text	00000158 altera_avalon_jtag_uart_read
000847a4 g     F .text	000000a0 isatty
00088ad8 g     O .bss	00000004 __malloc_top_pad
00081194 g     F .text	0000001c alt_avalon_sgdma_stop
000841fc g     F .text	00000054 _sbrk_r
00084654 g     F .text	00000060 _read_r
00081744 g     F .text	00000004 alt_dcache_flush
00086b98 g     O .rwdata	00000004 alt_max_fd
00084440 g     F .text	000000f0 _fclose_r
00082b80 g     F .text	00000030 fflush
00088ad4 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00084844 g     F .text	000000d8 lseek
00086bbc g     O .rwdata	00000004 _global_impure_ptr
00089004 g       *ABS*	00000000 __bss_end
000818f0 g     F .text	0000006c alt_iic_isr_register
00080538 g     F .text	00000020 alt_getchar
00081054 g     F .text	0000008c alt_avalon_sgdma_do_async_transfer
00081cc0 g     F .text	000000cc alt_tick
00100000 g     O .descriptor_memory	00000020 rx_descriptor_end
00082f30 g     F .text	00000018 __fp_lock_all
000818d8 g     F .text	00000018 alt_ic_irq_enabled
00081c88 g     F .text	00000038 alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00088abc g     O .bss	00000004 alt_irq_active
00084cfc g     O .rwdata	00000400 tx_frame
000800fc g     F .exceptions	00000070 alt_irq_handler
0008633c g     O .rwdata	00000028 alt_dev_null
000811b0 g     F .text	0000002c alt_avalon_sgdma_check_descriptor_status
00081748 g     F .text	00000004 alt_dcache_flush_all
00100020 g     O .descriptor_memory	00000020 rx_descriptor
00086bd0 g       *ABS*	00000000 __ram_rwdata_end
00086b9c g     O .rwdata	00000008 alt_dev_list
00084a98 g     F .text	00000124 write
00081228 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
00082254 g     F .text	000000a0 _putc_r
00084cfc g       *ABS*	00000000 __ram_rodata_end
000846f0 g     F .text	000000b4 fstat
000814e0 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
0008116c g     F .text	00000010 alt_avalon_sgdma_register_callback
00089004 g       *ABS*	00000000 end
00080bc4 g     F .text	00000078 altera_avalon_jtag_uart_init
0008016c g     F .exceptions	0000003c alt_instruction_exception_entry
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00081258 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
00080e58 g     F .text	0000019c altera_avalon_jtag_uart_write
000813e8 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00082f20 g     F .text	00000004 __sfp_lock_acquire
00081468 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
00083084 g     F .text	00000310 _free_r
0008072c g     F .text	00000214 alt_printf
000823bc g     F .text	00000074 __srget_r
00082788 g     F .text	00000180 __call_exitprocs
00086bc4 g     O .rwdata	00000004 __malloc_sbrk_base
000801a8 g     F .text	0000003c _start
00088ac4 g     O .bss	00000004 _alt_tick_rate
00088aa4 g     O .bss	00000004 sgdma_tx_dev
000811dc g     F .text	0000004c alt_avalon_sgdma_open
00088ac0 g     O .bss	00000004 _alt_nticks
00088aa8 g     O .bss	00000004 text_length
00084924 g     F .text	00000128 read
00080980 g     F .text	00000068 alt_sys_init
00080c3c g     F .text	0000003c altera_avalon_jtag_uart_close
000846b4 g     F .text	00000028 .hidden __mulsi3
00084cfc g       *ABS*	00000000 __ram_rwdata_start
00084bbc g       *ABS*	00000000 __ram_rodata_start
00088edc g     O .bss	00000028 __malloc_current_mallinfo
000809e8 g     F .text	00000024 altera_avalon_jtag_uart_read_fd
00081e54 g     F .text	00000098 alt_get_fd
000843ec g     F .text	00000054 _close_r
00082090 g     F .text	0000007c memcmp
00080a30 g     F .text	00000024 altera_avalon_jtag_uart_close_fd
00089004 g       *ABS*	00000000 __alt_stack_base
00080a54 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00082634 g     F .text	00000154 __swsetup_r
00082de0 g     F .text	00000118 __sfp
00086788 g     O .rwdata	00000408 __malloc_av_
00082f2c g     F .text	00000004 __sinit_lock_release
00084250 g     F .text	00000054 __sread
00081d94 g     F .text	000000c0 alt_find_file
00081754 g     F .text	00000074 alt_dev_llist_insert
0008491c g     F .text	00000004 __malloc_lock
00084a4c g     F .text	0000004c sbrk
0008117c g     F .text	00000018 alt_avalon_sgdma_start
00082b24 g     F .text	0000005c _fflush_r
00088aa4 g       *ABS*	00000000 __bss_start
00083ee4 g     F .text	00000128 memset
000802b8 g     F .text	00000280 main
00088ab0 g     O .bss	00000004 alt_envp
00088ad0 g     O .bss	00000004 __malloc_max_total_mem
00080a0c g     F .text	00000024 altera_avalon_jtag_uart_write_fd
0008261c g     F .text	00000018 __swbuf
00086b90 g     O .rwdata	00000008 alt_sgdma_list
00084384 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
00084530 g     F .text	00000014 fclose
000836d8 g     F .text	0000080c _malloc_r
00086bac g     O .rwdata	00000004 alt_errno
00100060 g     O .descriptor_memory	00000020 tx_descriptor
00088adc g     O .bss	00000400 rx_frame
00083394 g     F .text	000000c4 _fwalk
000822f4 g     F .text	000000c8 putc
00082f60 g     F .text	00000124 _malloc_trim_r
00084bbc g       *ABS*	00000000 __flash_rodata_start
00080960 g     F .text	00000020 alt_irq_init
00081c2c g     F .text	0000005c alt_release_fd
0008438c g     F .text	00000060 _write_r
00086bc0 g     O .rwdata	00000004 _impure_ptr
00088ab8 g     O .bss	00000004 alt_argc
00082908 g     F .text	0000021c __sflush_r
00084028 g     F .text	000001d4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
00082f48 g     F .text	00000018 __fp_unlock_all
00086ba4 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00081848 g     F .text	00000020 alt_ic_isr_register
00086bd0 g       *ABS*	00000000 _edata
00089004 g       *ABS*	00000000 _end
000801a8 g       *ABS*	00000000 __ram_exceptions_end
00080c78 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
000818a0 g     F .text	00000038 alt_ic_irq_disable
00100040 g     O .descriptor_memory	00000020 tx_descriptor_end
00081520 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
000842ac g     F .text	0000007c __swrite
00086bc8 g     O .rwdata	00000004 __malloc_trim_threshold
00081f60 g     F .text	00000038 exit
00083458 g     F .text	000000c4 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082f24 g     F .text	00000004 __sfp_lock_release
00088aac g     O .bss	00000004 sgdma_rx_dev
000846dc g     F .text	00000014 _exit
000815ec g     F .text	00000080 alt_alarm_start
0008351c g     F .text	000001bc __smakebuf_r
00082444 g     F .text	00000098 strlen
00081a70 g     F .text	000001bc open
00080940 g     F .text	00000020 alt_putchar
00081844 g     F .text	00000004 alt_icache_flush_all
00086bb0 g     O .rwdata	00000004 alt_priority_mask
00081868 g     F .text	00000038 alt_ic_irq_enable
000813a0 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00086bb4 g     O .rwdata	00000008 alt_alarm_list
0008166c g     F .text	000000d8 close
00080558 g     F .text	00000184 alt_load
00081568 g     F .text	00000084 alt_avalon_sgdma_init
00082f28 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406a14 	ori	at,at,424
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	008016c0 	call	8016c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defffe04 	addi	sp,sp,-8
   80100:	dfc00115 	stw	ra,4(sp)
   80104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80108:	000b313a 	rdctl	r5,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8010c:	04000274 	movhi	r16,9
   80110:	8423c104 	addi	r16,r16,-28924
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80114:	2880004c 	andi	r2,r5,1
   80118:	10000926 	beq	r2,zero,80140 <alt_irq_handler+0x44>

  active = alt_irq_pending ();

  do
  {
    i = 0;
   8011c:	0007883a 	mov	r3,zero
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80120:	180690fa 	slli	r3,r3,3
   80124:	80c7883a 	add	r3,r16,r3
   80128:	18800017 	ldw	r2,0(r3)
   8012c:	19000117 	ldw	r4,4(r3)
   80130:	103ee83a 	callr	r2
   80134:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   80138:	283ff61e 	bne	r5,zero,80114 <tx_descriptor+0xfff800b4>
   8013c:	00000706 	br	8015c <alt_irq_handler+0x60>
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80140:	0007883a 	mov	r3,zero
   80144:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80148:	1085883a 	add	r2,r2,r2
      i++;
   8014c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80150:	2888703a 	and	r4,r5,r2
   80154:	203ffc26 	beq	r4,zero,80148 <tx_descriptor+0xfff800e8>
   80158:	003ff106 	br	80120 <tx_descriptor+0xfff800c0>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   8015c:	dfc00117 	ldw	ra,4(sp)
   80160:	dc000017 	ldw	r16,0(sp)
   80164:	dec00204 	addi	sp,sp,8
   80168:	f800283a 	ret

0008016c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   8016c:	d0a7ce17 	ldw	r2,-24776(gp)
   80170:	10000726 	beq	r2,zero,80190 <alt_instruction_exception_entry+0x24>
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   80174:	deffff04 	addi	sp,sp,-4
   80178:	dfc00015 	stw	ra,0(sp)
   8017c:	200b883a 	mov	r5,r4
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80180:	000d883a 	mov	r6,zero
   80184:	013fffc4 	movi	r4,-1
   80188:	103ee83a 	callr	r2
   8018c:	00000306 	br	8019c <alt_instruction_exception_entry+0x30>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80190:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80194:	0005883a 	mov	r2,zero
   80198:	f800283a 	ret
}
   8019c:	dfc00017 	ldw	ra,0(sp)
   801a0:	dec00104 	addi	sp,sp,4
   801a4:	f800283a 	ret

Disassembly of section .text:

000801a8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801a8:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   801ac:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   801b0:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801b4:	d6bae414 	ori	gp,gp,60304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801b8:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801bc:	10a2a914 	ori	r2,r2,35492

    movhi r3, %hi(__bss_end)
   801c0:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801c4:	18e40114 	ori	r3,r3,36868

    beq r2, r3, 1f
   801c8:	10c00326 	beq	r2,r3,801d8 <_start+0x30>

0:
    stw zero, (r2)
   801cc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801d0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801d4:	10fffd36 	bltu	r2,r3,801cc <tx_descriptor+0xfff8016c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801d8:	00805580 	call	80558 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801dc:	00806dc0 	call	806dc <alt_main>

000801e0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801e0:	003fff06 	br	801e0 <tx_descriptor+0xfff80180>

000801e4 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   801e4:	defffb04 	addi	sp,sp,-20
   801e8:	dfc00415 	stw	ra,16(sp)
   801ec:	dc800315 	stw	r18,12(sp)
   801f0:	dc400215 	stw	r17,8(sp)
   801f4:	dc000115 	stw	r16,4(sp)
	int i;

	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   801f8:	04000434 	movhi	r16,16
   801fc:	84000804 	addi	r16,r16,32
   80200:	8009883a 	mov	r4,r16
   80204:	00811b00 	call	811b0 <alt_avalon_sgdma_check_descriptor_status>
   80208:	103ffd1e 	bne	r2,zero,80200 <tx_descriptor+0xfff801a0>
		;
	
	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   8020c:	d0e7c617 	ldw	r3,-24808(gp)
   80210:	00bffe84 	movi	r2,-6
   80214:	18800b26 	beq	r3,r2,80244 <rx_ethernet_isr+0x60>
   80218:	0021883a 	mov	r16,zero
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace	
   8021c:	04800204 	movi	r18,8
   80220:	04400234 	movhi	r17,8
   80224:	8c52ef04 	addi	r17,r17,19388
   80228:	900b883a 	mov	r5,r18
   8022c:	8809883a 	mov	r4,r17
   80230:	008072c0 	call	8072c <alt_printf>
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
		;
	
	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   80234:	84000044 	addi	r16,r16,1
   80238:	d0a7c617 	ldw	r2,-24808(gp)
   8023c:	10800184 	addi	r2,r2,6
   80240:	80bff936 	bltu	r16,r2,80228 <tx_descriptor+0xfff801c8>
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace	
	}
	
	// Output received text		
	alt_printf( "receive> %s\n", rx_frame + 16 );
   80244:	04400274 	movhi	r17,9
   80248:	8c62bb04 	addi	r17,r17,-29972
   8024c:	880b883a 	mov	r5,r17
   80250:	01000234 	movhi	r4,8
   80254:	2112f004 	addi	r4,r4,19392
   80258:	008072c0 	call	8072c <alt_printf>
	
	// Reprint current input line after the output
	alt_printf( "send> %s", tx_frame + 16 );
   8025c:	01400234 	movhi	r5,8
   80260:	29534304 	addi	r5,r5,19724
   80264:	01000234 	movhi	r4,8
   80268:	2112f404 	addi	r4,r4,19408
   8026c:	008072c0 	call	8072c <alt_printf>
	
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80270:	04000434 	movhi	r16,16
   80274:	84000804 	addi	r16,r16,32
   80278:	d8000015 	stw	zero,0(sp)
   8027c:	000f883a 	mov	r7,zero
   80280:	89bffc04 	addi	r6,r17,-16
   80284:	01400434 	movhi	r5,16
   80288:	29400004 	addi	r5,r5,0
   8028c:	8009883a 	mov	r4,r16
   80290:	00814680 	call	81468 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80294:	800b883a 	mov	r5,r16
   80298:	d127c717 	ldw	r4,-24804(gp)
   8029c:	00810540 	call	81054 <alt_avalon_sgdma_do_async_transfer>
}
   802a0:	dfc00417 	ldw	ra,16(sp)
   802a4:	dc800317 	ldw	r18,12(sp)
   802a8:	dc400217 	ldw	r17,8(sp)
   802ac:	dc000117 	ldw	r16,4(sp)
   802b0:	dec00504 	addi	sp,sp,20
   802b4:	f800283a 	ret

000802b8 <main>:
 *  1. Records input text and transmits the text via Ethernet after Enter is 
 *     pressed
 *  2. Displays text received via Ethernet frame on the JTAG UART
********************************************************************************/
int main(void)
{	
   802b8:	defff504 	addi	sp,sp,-44
   802bc:	dfc00a15 	stw	ra,40(sp)
   802c0:	dd400915 	stw	r21,36(sp)
   802c4:	dd000815 	stw	r20,32(sp)
   802c8:	dcc00715 	stw	r19,28(sp)
   802cc:	dc800615 	stw	r18,24(sp)
   802d0:	dc400515 	stw	r17,20(sp)
   802d4:	dc000415 	stw	r16,16(sp)
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   802d8:	01000234 	movhi	r4,8
   802dc:	2112f704 	addi	r4,r4,19420
   802e0:	00811dc0 	call	811dc <alt_avalon_sgdma_open>
   802e4:	d0a7c515 	stw	r2,-24812(gp)
	if (sgdma_tx_dev == NULL) {
   802e8:	1000041e 	bne	r2,zero,802fc <main+0x44>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   802ec:	01000234 	movhi	r4,8
   802f0:	2112fb04 	addi	r4,r4,19436
   802f4:	008072c0 	call	8072c <alt_printf>
		return -1;
   802f8:	00008506 	br	80510 <main+0x258>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   802fc:	01000234 	movhi	r4,8
   80300:	21130a04 	addi	r4,r4,19496
   80304:	008072c0 	call	8072c <alt_printf>
		
	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   80308:	01000234 	movhi	r4,8
   8030c:	21131504 	addi	r4,r4,19540
   80310:	00811dc0 	call	811dc <alt_avalon_sgdma_open>
   80314:	d0a7c715 	stw	r2,-24804(gp)
	if (sgdma_rx_dev == NULL) {
   80318:	1000041e 	bne	r2,zero,8032c <main+0x74>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   8031c:	01000234 	movhi	r4,8
   80320:	21131904 	addi	r4,r4,19556
   80324:	008072c0 	call	8072c <alt_printf>
		return -1;
   80328:	00007906 	br	80510 <main+0x258>
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   8032c:	01000234 	movhi	r4,8
   80330:	21132804 	addi	r4,r4,19616
   80334:	008072c0 	call	8072c <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80338:	000f883a 	mov	r7,zero
   8033c:	01800504 	movi	r6,20
   80340:	01400234 	movhi	r5,8
   80344:	29407904 	addi	r5,r5,484
   80348:	d127c717 	ldw	r4,-24804(gp)
   8034c:	008116c0 	call	8116c <alt_avalon_sgdma_register_callback>
	
	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80350:	04000434 	movhi	r16,16
   80354:	84000804 	addi	r16,r16,32
   80358:	d8000015 	stw	zero,0(sp)
   8035c:	000f883a 	mov	r7,zero
   80360:	01800274 	movhi	r6,9
   80364:	31a2b704 	addi	r6,r6,-29988
   80368:	01400434 	movhi	r5,16
   8036c:	29400004 	addi	r5,r5,0
   80370:	8009883a 	mov	r4,r16
   80374:	00814680 	call	81468 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80378:	800b883a 	mov	r5,r16
   8037c:	d127c717 	ldw	r4,-24804(gp)
   80380:	00810540 	call	81054 <alt_avalon_sgdma_do_async_transfer>

	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) 0x00102000;	
	
	// Initialize the MAC address 
	*(tse + 3) = 0x116E6001;
   80384:	00c45bb4 	movhi	r3,4462
   80388:	18d80044 	addi	r3,r3,24577
   8038c:	00800434 	movhi	r2,16
   80390:	10880304 	addi	r2,r2,8204
   80394:	10c00015 	stw	r3,0(r2)
	*(tse + 4) = 0x00000F02; 
   80398:	00c3c084 	movi	r3,3842
   8039c:	00800434 	movhi	r2,16
   803a0:	10880404 	addi	r2,r2,8208
   803a4:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x00; //was 0x10
   803a8:	00800434 	movhi	r2,16
   803ac:	10880f04 	addi	r2,r2,8252
   803b0:	10000015 	stw	zero,0(r2)
	*(tse + 0x10) = 0x00; //was 0x11
   803b4:	00800434 	movhi	r2,16
   803b8:	10881004 	addi	r2,r2,8256
   803bc:	10000015 	stw	zero,0(r2)
	
	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	*(tse + 0x94) = 0x0000; //was 0x4000
   803c0:	00800434 	movhi	r2,16
   803c4:	10889404 	addi	r2,r2,8784
   803c8:	10000015 	stw	zero,0(r2)
	
	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
   803cc:	00c00434 	movhi	r3,16
   803d0:	18c8b004 	addi	r3,r3,8896
   803d4:	18800017 	ldw	r2,0(r3)
   803d8:	10801814 	ori	r2,r2,96
   803dc:	18800015 	stw	r2,0(r3)
	
	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
   803e0:	00c00434 	movhi	r3,16
   803e4:	18c8b404 	addi	r3,r3,8912
   803e8:	18800017 	ldw	r2,0(r3)
   803ec:	10802094 	ori	r2,r2,130
   803f0:	18800015 	stw	r2,0(r3)
	
	// Software reset the second PHY chip and wait
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
   803f4:	00c00434 	movhi	r3,16
   803f8:	18c8a004 	addi	r3,r3,8832
   803fc:	18800017 	ldw	r2,0(r3)
   80400:	10a00014 	ori	r2,r2,32768
   80404:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0xA0) & 0x8000  )
   80408:	00800434 	movhi	r2,16
   8040c:	1088a004 	addi	r2,r2,8832
   80410:	10800017 	ldw	r2,0(r2)
   80414:	10a0000c 	andi	r2,r2,32768
   80418:	103ffb1e 	bne	r2,zero,80408 <tx_descriptor+0xfff803a8>
		;	 
	 
	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse + 2) = *(tse + 2) | 0x0000004B;	
   8041c:	00c00434 	movhi	r3,16
   80420:	18c80204 	addi	r3,r3,8200
   80424:	18800017 	ldw	r2,0(r3)
   80428:	108012d4 	ori	r2,r2,75
   8042c:	18800015 	stw	r2,0(r3)
	
	alt_printf( "send> " );
   80430:	01000234 	movhi	r4,8
   80434:	21133304 	addi	r4,r4,19660
   80438:	008072c0 	call	8072c <alt_printf>
	text_length = 0;
   8043c:	d027c615 	stw	zero,-24808(gp)
	volatile int * rom_block = (int *) 0x00000000;
	
	while (1) {
		
		char new_char;
		tx_frame[16] = '\0';
   80440:	04c00234 	movhi	r19,8
   80444:	9cd33f04 	addi	r19,r19,19708
   80448:	9c800c04 	addi	r18,r19,48

		// MODIFIED
		if (alt_getchar() == '\n') {
			while (text_length < 32) {
				tx_frame[16 + text_length] = *(rom_block + text_length);
				text_length++;
   8044c:	047ffc44 	movi	r17,-15
   80450:	8ce3c83a 	sub	r17,r17,r19
			}
			tx_frame[16 + text_length] = '\0';
		}
		// END MODIFIED
		
		alt_printf( "\nsend> " );
   80454:	05400234 	movhi	r21,8
   80458:	ad533504 	addi	r21,r21,19668
		text_length = 0;
		
		// Create transmit sgdma descriptor
		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0 );
   8045c:	05000434 	movhi	r20,16
   80460:	a5001004 	addi	r20,r20,64
   80464:	04000434 	movhi	r16,16
   80468:	84001804 	addi	r16,r16,96
	volatile int * rom_block = (int *) 0x00000000;
	
	while (1) {
		
		char new_char;
		tx_frame[16] = '\0';
   8046c:	98000405 	stb	zero,16(r19)
			}
			
		}*/

		// MODIFIED
		if (alt_getchar() == '\n') {
   80470:	00805380 	call	80538 <alt_getchar>
   80474:	00c00284 	movi	r3,10
   80478:	10c0111e 	bne	r2,r3,804c0 <main+0x208>
			while (text_length < 32) {
   8047c:	d0a7c617 	ldw	r2,-24808(gp)
   80480:	00c007c4 	movi	r3,31
   80484:	18800c36 	bltu	r3,r2,804b8 <main+0x200>
   80488:	1087883a 	add	r3,r2,r2
   8048c:	18c7883a 	add	r3,r3,r3
   80490:	10800404 	addi	r2,r2,16
   80494:	14c5883a 	add	r2,r2,r19
				tx_frame[16 + text_length] = *(rom_block + text_length);
   80498:	19000017 	ldw	r4,0(r3)
   8049c:	11000005 	stb	r4,0(r2)
				text_length++;
   804a0:	8889883a 	add	r4,r17,r2
   804a4:	d127c615 	stw	r4,-24808(gp)
   804a8:	18c00104 	addi	r3,r3,4
   804ac:	10800044 	addi	r2,r2,1
			
		}*/

		// MODIFIED
		if (alt_getchar() == '\n') {
			while (text_length < 32) {
   804b0:	14bff91e 	bne	r2,r18,80498 <tx_descriptor+0xfff80438>
				tx_frame[16 + text_length] = *(rom_block + text_length);
				text_length++;
   804b4:	00800804 	movi	r2,32
			}
			tx_frame[16 + text_length] = '\0';
   804b8:	9885883a 	add	r2,r19,r2
   804bc:	10000405 	stb	zero,16(r2)
		}
		// END MODIFIED
		
		alt_printf( "\nsend> " );
   804c0:	a809883a 	mov	r4,r21
   804c4:	008072c0 	call	8072c <alt_printf>
		text_length = 0;
   804c8:	d027c615 	stw	zero,-24808(gp)
		
		// Create transmit sgdma descriptor
		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0 );
   804cc:	d8000315 	stw	zero,12(sp)
   804d0:	00800044 	movi	r2,1
   804d4:	d8800215 	stw	r2,8(sp)
   804d8:	d8800115 	stw	r2,4(sp)
   804dc:	d8000015 	stw	zero,0(sp)
   804e0:	01c00f84 	movi	r7,62
   804e4:	980d883a 	mov	r6,r19
   804e8:	a00b883a 	mov	r5,r20
   804ec:	8009883a 	mov	r4,r16
   804f0:	00814e00 	call	814e0 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
		// Set up non-blocking transfer of sgdma transmit descriptor
		alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   804f4:	800b883a 	mov	r5,r16
   804f8:	d127c517 	ldw	r4,-24812(gp)
   804fc:	00810540 	call	81054 <alt_avalon_sgdma_do_async_transfer>
		
		// Wait until transmit descriptor transfer is complete
		while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   80500:	8009883a 	mov	r4,r16
   80504:	00811b00 	call	811b0 <alt_avalon_sgdma_check_descriptor_status>
   80508:	103ffd1e 	bne	r2,zero,80500 <tx_descriptor+0xfff804a0>
   8050c:	003fd706 	br	8046c <tx_descriptor+0xfff8040c>
			;
	}    
	
	return 0;
}
   80510:	00bfffc4 	movi	r2,-1
   80514:	dfc00a17 	ldw	ra,40(sp)
   80518:	dd400917 	ldw	r21,36(sp)
   8051c:	dd000817 	ldw	r20,32(sp)
   80520:	dcc00717 	ldw	r19,28(sp)
   80524:	dc800617 	ldw	r18,24(sp)
   80528:	dc400517 	ldw	r17,20(sp)
   8052c:	dc000417 	ldw	r16,16(sp)
   80530:	dec00b04 	addi	sp,sp,44
   80534:	f800283a 	ret

00080538 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   80538:	deffff04 	addi	sp,sp,-4
   8053c:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
   80540:	d0a00c17 	ldw	r2,-32720(gp)
   80544:	11000117 	ldw	r4,4(r2)
   80548:	00820080 	call	82008 <getc>
#endif
#endif
}
   8054c:	dfc00017 	ldw	ra,0(sp)
   80550:	dec00104 	addi	sp,sp,4
   80554:	f800283a 	ret

00080558 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80558:	deffff04 	addi	sp,sp,-4
   8055c:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80560:	00800234 	movhi	r2,8
   80564:	109af404 	addi	r2,r2,27600
   80568:	00c00234 	movhi	r3,8
   8056c:	18d33f04 	addi	r3,r3,19708
   80570:	18801926 	beq	r3,r2,805d8 <alt_load+0x80>
  {
    while( to != end )
   80574:	00800234 	movhi	r2,8
   80578:	109af404 	addi	r2,r2,27600
   8057c:	00c00234 	movhi	r3,8
   80580:	18d33f04 	addi	r3,r3,19708
   80584:	18801426 	beq	r3,r2,805d8 <alt_load+0x80>
   80588:	00c00234 	movhi	r3,8
   8058c:	18d34004 	addi	r3,r3,19712
   80590:	00800234 	movhi	r2,8
   80594:	109af404 	addi	r2,r2,27600
   80598:	10c7c83a 	sub	r3,r2,r3
   8059c:	1806d0ba 	srli	r3,r3,2
   805a0:	18c00044 	addi	r3,r3,1
   805a4:	18c7883a 	add	r3,r3,r3
   805a8:	18c7883a 	add	r3,r3,r3
   805ac:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   805b0:	01c00234 	movhi	r7,8
   805b4:	39d33f04 	addi	r7,r7,19708
   805b8:	01800234 	movhi	r6,8
   805bc:	319af404 	addi	r6,r6,27600
   805c0:	11c9883a 	add	r4,r2,r7
   805c4:	118b883a 	add	r5,r2,r6
   805c8:	29400017 	ldw	r5,0(r5)
   805cc:	21400015 	stw	r5,0(r4)
   805d0:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   805d4:	10fffa1e 	bne	r2,r3,805c0 <tx_descriptor+0xfff80560>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   805d8:	00800234 	movhi	r2,8
   805dc:	10800804 	addi	r2,r2,32
   805e0:	00c00234 	movhi	r3,8
   805e4:	18c00804 	addi	r3,r3,32
   805e8:	18801926 	beq	r3,r2,80650 <alt_load+0xf8>
  {
    while( to != end )
   805ec:	00800234 	movhi	r2,8
   805f0:	10806a04 	addi	r2,r2,424
   805f4:	00c00234 	movhi	r3,8
   805f8:	18c00804 	addi	r3,r3,32
   805fc:	18801426 	beq	r3,r2,80650 <alt_load+0xf8>
   80600:	00c00234 	movhi	r3,8
   80604:	18c00904 	addi	r3,r3,36
   80608:	00800234 	movhi	r2,8
   8060c:	10806a04 	addi	r2,r2,424
   80610:	10c7c83a 	sub	r3,r2,r3
   80614:	1806d0ba 	srli	r3,r3,2
   80618:	18c00044 	addi	r3,r3,1
   8061c:	18c7883a 	add	r3,r3,r3
   80620:	18c7883a 	add	r3,r3,r3
   80624:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   80628:	01c00234 	movhi	r7,8
   8062c:	39c00804 	addi	r7,r7,32
   80630:	01800234 	movhi	r6,8
   80634:	31800804 	addi	r6,r6,32
   80638:	11c9883a 	add	r4,r2,r7
   8063c:	118b883a 	add	r5,r2,r6
   80640:	29400017 	ldw	r5,0(r5)
   80644:	21400015 	stw	r5,0(r4)
   80648:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8064c:	18bffa1e 	bne	r3,r2,80638 <tx_descriptor+0xfff805d8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80650:	00800234 	movhi	r2,8
   80654:	1092ef04 	addi	r2,r2,19388
   80658:	00c00234 	movhi	r3,8
   8065c:	18d2ef04 	addi	r3,r3,19388
   80660:	18801926 	beq	r3,r2,806c8 <alt_load+0x170>
  {
    while( to != end )
   80664:	00800234 	movhi	r2,8
   80668:	10933f04 	addi	r2,r2,19708
   8066c:	00c00234 	movhi	r3,8
   80670:	18d2ef04 	addi	r3,r3,19388
   80674:	18801426 	beq	r3,r2,806c8 <alt_load+0x170>
   80678:	00c00234 	movhi	r3,8
   8067c:	18d2f004 	addi	r3,r3,19392
   80680:	00800234 	movhi	r2,8
   80684:	10933f04 	addi	r2,r2,19708
   80688:	10c7c83a 	sub	r3,r2,r3
   8068c:	1806d0ba 	srli	r3,r3,2
   80690:	18c00044 	addi	r3,r3,1
   80694:	18c7883a 	add	r3,r3,r3
   80698:	18c7883a 	add	r3,r3,r3
   8069c:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   806a0:	01c00234 	movhi	r7,8
   806a4:	39d2ef04 	addi	r7,r7,19388
   806a8:	01800234 	movhi	r6,8
   806ac:	3192ef04 	addi	r6,r6,19388
   806b0:	11c9883a 	add	r4,r2,r7
   806b4:	118b883a 	add	r5,r2,r6
   806b8:	29400017 	ldw	r5,0(r5)
   806bc:	21400015 	stw	r5,0(r4)
   806c0:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   806c4:	18bffa1e 	bne	r3,r2,806b0 <tx_descriptor+0xfff80650>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   806c8:	00817480 	call	81748 <alt_dcache_flush_all>
  alt_icache_flush_all();
   806cc:	00818440 	call	81844 <alt_icache_flush_all>
}
   806d0:	dfc00017 	ldw	ra,0(sp)
   806d4:	dec00104 	addi	sp,sp,4
   806d8:	f800283a 	ret

000806dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   806dc:	defffe04 	addi	sp,sp,-8
   806e0:	dfc00115 	stw	ra,4(sp)
   806e4:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   806e8:	0009883a 	mov	r4,zero
   806ec:	00809600 	call	80960 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   806f0:	00809800 	call	80980 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   806f4:	01000234 	movhi	r4,8
   806f8:	21133704 	addi	r4,r4,19676
   806fc:	200d883a 	mov	r6,r4
   80700:	200b883a 	mov	r5,r4
   80704:	00819dc0 	call	819dc <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80708:	d1a7c817 	ldw	r6,-24800(gp)
   8070c:	d167c917 	ldw	r5,-24796(gp)
   80710:	d127ca17 	ldw	r4,-24792(gp)
   80714:	00802b80 	call	802b8 <main>
   80718:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   8071c:	01000044 	movi	r4,1
   80720:	008166c0 	call	8166c <close>
  exit (result);
   80724:	8009883a 	mov	r4,r16
   80728:	0081f600 	call	81f60 <exit>

0008072c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8072c:	defff304 	addi	sp,sp,-52
   80730:	dfc00915 	stw	ra,36(sp)
   80734:	df000815 	stw	fp,32(sp)
   80738:	ddc00715 	stw	r23,28(sp)
   8073c:	dd800615 	stw	r22,24(sp)
   80740:	dd400515 	stw	r21,20(sp)
   80744:	dd000415 	stw	r20,16(sp)
   80748:	dcc00315 	stw	r19,12(sp)
   8074c:	dc800215 	stw	r18,8(sp)
   80750:	dc400115 	stw	r17,4(sp)
   80754:	dc000015 	stw	r16,0(sp)
   80758:	2021883a 	mov	r16,r4
   8075c:	d9400a15 	stw	r5,40(sp)
   80760:	d9800b15 	stw	r6,44(sp)
   80764:	d9c00c15 	stw	r7,48(sp)
	va_list args;
	va_start(args, fmt);
   80768:	dd800a04 	addi	r22,sp,40
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8076c:	04800944 	movi	r18,37
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   80770:	05c018c4 	movi	r23,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   80774:	07001e04 	movi	fp,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80778:	04c003c4 	movi	r19,15
                        if (digit <= 9)
   8077c:	05400244 	movi	r21,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80780:	00005e06 	br	808fc <alt_printf+0x1d0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80784:	20803fcc 	andi	r2,r4,255
   80788:	1080201c 	xori	r2,r2,128
   8078c:	10bfe004 	addi	r2,r2,-128
   80790:	14800426 	beq	r2,r18,807a4 <alt_printf+0x78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80794:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
   80798:	1009883a 	mov	r4,r2
   8079c:	00809400 	call	80940 <alt_putchar>
   807a0:	00005606 	br	808fc <alt_printf+0x1d0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   807a4:	85000084 	addi	r20,r16,2
   807a8:	80800043 	ldbu	r2,1(r16)
   807ac:	10c03fcc 	andi	r3,r2,255
   807b0:	18c0201c 	xori	r3,r3,128
   807b4:	18ffe004 	addi	r3,r3,-128
   807b8:	18005526 	beq	r3,zero,80910 <alt_printf+0x1e4>
            {
                if (c == '%')
   807bc:	1c80041e 	bne	r3,r18,807d0 <alt_printf+0xa4>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   807c0:	9009883a 	mov	r4,r18
   807c4:	00809400 	call	80940 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   807c8:	a021883a 	mov	r16,r20
   807cc:	00004b06 	br	808fc <alt_printf+0x1d0>
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   807d0:	10c03fcc 	andi	r3,r2,255
   807d4:	18c0201c 	xori	r3,r3,128
   807d8:	18ffe004 	addi	r3,r3,-128
   807dc:	1dc0061e 	bne	r3,r23,807f8 <alt_printf+0xcc>
                {
                    int v = va_arg(args, int);
   807e0:	b4000104 	addi	r16,r22,4
                    alt_putchar(v);
   807e4:	b1000017 	ldw	r4,0(r22)
   807e8:	00809400 	call	80940 <alt_putchar>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   807ec:	802d883a 	mov	r22,r16
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   807f0:	a021883a 	mov	r16,r20
   807f4:	00004106 	br	808fc <alt_printf+0x1d0>
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   807f8:	10c03fcc 	andi	r3,r2,255
   807fc:	18c0201c 	xori	r3,r3,128
   80800:	18ffe004 	addi	r3,r3,-128
   80804:	1f00201e 	bne	r3,fp,80888 <alt_printf+0x15c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   80808:	b4400017 	ldw	r17,0(r22)
   8080c:	b5800104 	addi	r22,r22,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   80810:	88000426 	beq	r17,zero,80824 <alt_printf+0xf8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80814:	88bc002c 	andhi	r2,r17,61440
   80818:	10000626 	beq	r2,zero,80834 <alt_printf+0x108>
   8081c:	04000704 	movi	r16,28
   80820:	00000a06 	br	8084c <alt_printf+0x120>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   80824:	01000c04 	movi	r4,48
   80828:	00809400 	call	80940 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8082c:	a021883a 	mov	r16,r20

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
                        continue;
   80830:	00003206 	br	808fc <alt_printf+0x1d0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80834:	04000704 	movi	r16,28
                        digit_shift -= 4;
   80838:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8083c:	9c04983a 	sll	r2,r19,r16
   80840:	1444703a 	and	r2,r2,r17
   80844:	103ffc26 	beq	r2,zero,80838 <tx_descriptor+0xfff807d8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80848:	80002716 	blt	r16,zero,808e8 <alt_printf+0x1bc>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8084c:	9c08983a 	sll	r4,r19,r16
   80850:	2448703a 	and	r4,r4,r17
   80854:	2408d83a 	srl	r4,r4,r16
                        if (digit <= 9)
   80858:	a9000236 	bltu	r21,r4,80864 <alt_printf+0x138>
                            c = '0' + digit;
   8085c:	21000c04 	addi	r4,r4,48
   80860:	00000106 	br	80868 <alt_printf+0x13c>
                        else
                            c = 'a' + digit - 10;
   80864:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   80868:	21003fcc 	andi	r4,r4,255
   8086c:	2100201c 	xori	r4,r4,128
   80870:	213fe004 	addi	r4,r4,-128
   80874:	00809400 	call	80940 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80878:	843fff04 	addi	r16,r16,-4
   8087c:	803ff30e 	bge	r16,zero,8084c <tx_descriptor+0xfff807ec>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80880:	a021883a 	mov	r16,r20
   80884:	00001d06 	br	808fc <alt_printf+0x1d0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80888:	10803fcc 	andi	r2,r2,255
   8088c:	1080201c 	xori	r2,r2,128
   80890:	10bfe004 	addi	r2,r2,-128
   80894:	00c01cc4 	movi	r3,115
   80898:	10c0151e 	bne	r2,r3,808f0 <alt_printf+0x1c4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8089c:	b4000017 	ldw	r16,0(r22)
   808a0:	b5800104 	addi	r22,r22,4

                    while(*s)
   808a4:	81000003 	ldbu	r4,0(r16)
   808a8:	20803fcc 	andi	r2,r4,255
   808ac:	1080201c 	xori	r2,r2,128
   808b0:	10bfe004 	addi	r2,r2,-128
   808b4:	10001026 	beq	r2,zero,808f8 <alt_printf+0x1cc>
                      alt_putchar(*s++);
   808b8:	84000044 	addi	r16,r16,1
   808bc:	21003fcc 	andi	r4,r4,255
   808c0:	2100201c 	xori	r4,r4,128
   808c4:	213fe004 	addi	r4,r4,-128
   808c8:	00809400 	call	80940 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   808cc:	81000003 	ldbu	r4,0(r16)
   808d0:	20803fcc 	andi	r2,r4,255
   808d4:	1080201c 	xori	r2,r2,128
   808d8:	10bfe004 	addi	r2,r2,-128
   808dc:	103ff61e 	bne	r2,zero,808b8 <tx_descriptor+0xfff80858>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   808e0:	a021883a 	mov	r16,r20
   808e4:	00000506 	br	808fc <alt_printf+0x1d0>
   808e8:	a021883a 	mov	r16,r20
   808ec:	00000306 	br	808fc <alt_printf+0x1d0>
   808f0:	a021883a 	mov	r16,r20
   808f4:	00000106 	br	808fc <alt_printf+0x1d0>
   808f8:	a021883a 	mov	r16,r20
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   808fc:	81000003 	ldbu	r4,0(r16)
   80900:	20803fcc 	andi	r2,r4,255
   80904:	1080201c 	xori	r2,r2,128
   80908:	10bfe004 	addi	r2,r2,-128
   8090c:	103f9d1e 	bne	r2,zero,80784 <tx_descriptor+0xfff80724>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   80910:	dfc00917 	ldw	ra,36(sp)
   80914:	df000817 	ldw	fp,32(sp)
   80918:	ddc00717 	ldw	r23,28(sp)
   8091c:	dd800617 	ldw	r22,24(sp)
   80920:	dd400517 	ldw	r21,20(sp)
   80924:	dd000417 	ldw	r20,16(sp)
   80928:	dcc00317 	ldw	r19,12(sp)
   8092c:	dc800217 	ldw	r18,8(sp)
   80930:	dc400117 	ldw	r17,4(sp)
   80934:	dc000017 	ldw	r16,0(sp)
   80938:	dec00d04 	addi	sp,sp,52
   8093c:	f800283a 	ret

00080940 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   80940:	deffff04 	addi	sp,sp,-4
   80944:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   80948:	d0a00c17 	ldw	r2,-32720(gp)
   8094c:	11400217 	ldw	r5,8(r2)
   80950:	00822f40 	call	822f4 <putc>
#endif
#endif
}
   80954:	dfc00017 	ldw	ra,0(sp)
   80958:	dec00104 	addi	sp,sp,4
   8095c:	f800283a 	ret

00080960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80960:	deffff04 	addi	sp,sp,-4
   80964:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   80968:	0081d8c0 	call	81d8c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8096c:	00800044 	movi	r2,1
   80970:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80974:	dfc00017 	ldw	ra,0(sp)
   80978:	dec00104 	addi	sp,sp,4
   8097c:	f800283a 	ret

00080980 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80980:	defffe04 	addi	sp,sp,-8
   80984:	dfc00115 	stw	ra,4(sp)
   80988:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8098c:	04000234 	movhi	r16,8
   80990:	84146104 	addi	r16,r16,20868
   80994:	000d883a 	mov	r6,zero
   80998:	000b883a 	mov	r5,zero
   8099c:	8009883a 	mov	r4,r16
   809a0:	0080bc40 	call	80bc4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   809a4:	d1600304 	addi	r5,gp,-32756
   809a8:	813ff604 	addi	r4,r16,-40
   809ac:	00817540 	call	81754 <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   809b0:	01800044 	movi	r6,1
   809b4:	000b883a 	mov	r5,zero
   809b8:	01000234 	movhi	r4,8
   809bc:	21144b04 	addi	r4,r4,20780
   809c0:	00815680 	call	81568 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   809c4:	01800084 	movi	r6,2
   809c8:	000b883a 	mov	r5,zero
   809cc:	01000234 	movhi	r4,8
   809d0:	21143f04 	addi	r4,r4,20732
   809d4:	00815680 	call	81568 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
}
   809d8:	dfc00117 	ldw	ra,4(sp)
   809dc:	dc000017 	ldw	r16,0(sp)
   809e0:	dec00204 	addi	sp,sp,8
   809e4:	f800283a 	ret

000809e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   809e8:	deffff04 	addi	sp,sp,-4
   809ec:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   809f0:	20800017 	ldw	r2,0(r4)
   809f4:	21c00217 	ldw	r7,8(r4)
   809f8:	11000a04 	addi	r4,r2,40
   809fc:	0080d000 	call	80d00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80a00:	dfc00017 	ldw	ra,0(sp)
   80a04:	dec00104 	addi	sp,sp,4
   80a08:	f800283a 	ret

00080a0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80a0c:	deffff04 	addi	sp,sp,-4
   80a10:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80a14:	20800017 	ldw	r2,0(r4)
   80a18:	21c00217 	ldw	r7,8(r4)
   80a1c:	11000a04 	addi	r4,r2,40
   80a20:	0080e580 	call	80e58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80a24:	dfc00017 	ldw	ra,0(sp)
   80a28:	dec00104 	addi	sp,sp,4
   80a2c:	f800283a 	ret

00080a30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80a30:	deffff04 	addi	sp,sp,-4
   80a34:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80a38:	20800017 	ldw	r2,0(r4)
   80a3c:	21400217 	ldw	r5,8(r4)
   80a40:	11000a04 	addi	r4,r2,40
   80a44:	0080c3c0 	call	80c3c <altera_avalon_jtag_uart_close>
}
   80a48:	dfc00017 	ldw	ra,0(sp)
   80a4c:	dec00104 	addi	sp,sp,4
   80a50:	f800283a 	ret

00080a54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80a54:	deffff04 	addi	sp,sp,-4
   80a58:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80a5c:	21000017 	ldw	r4,0(r4)
   80a60:	21000a04 	addi	r4,r4,40
   80a64:	0080c780 	call	80c78 <altera_avalon_jtag_uart_ioctl>
}
   80a68:	dfc00017 	ldw	ra,0(sp)
   80a6c:	dec00104 	addi	sp,sp,4
   80a70:	f800283a 	ret

00080a74 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80a74:	20800017 	ldw	r2,0(r4)
   80a78:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   80a7c:	1081000c 	andi	r2,r2,1024
   80a80:	10000626 	beq	r2,zero,80a9c <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80a84:	20c00017 	ldw	r3,0(r4)
   80a88:	20800817 	ldw	r2,32(r4)
   80a8c:	10810014 	ori	r2,r2,1024
   80a90:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
   80a94:	20000915 	stw	zero,36(r4)
   80a98:	00000606 	br	80ab4 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   80a9c:	20800917 	ldw	r2,36(r4)
   80aa0:	00e00034 	movhi	r3,32768
   80aa4:	18ffff04 	addi	r3,r3,-4
   80aa8:	18800236 	bltu	r3,r2,80ab4 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   80aac:	10800044 	addi	r2,r2,1
   80ab0:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80ab4:	d0a7cd17 	ldw	r2,-24780(gp)
   80ab8:	f800283a 	ret

00080abc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   80abc:	21800017 	ldw	r6,0(r4)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80ac0:	32000104 	addi	r8,r6,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80ac4:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80ac8:	02ffff44 	movi	r11,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80acc:	4013883a 	mov	r9,r8
   80ad0:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80ad4:	3880c00c 	andi	r2,r7,768
   80ad8:	10003926 	beq	r2,zero,80bc0 <altera_avalon_jtag_uart_irq+0x104>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80adc:	3880400c 	andi	r2,r7,256
   80ae0:	10001c26 	beq	r2,zero,80b54 <altera_avalon_jtag_uart_irq+0x98>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80ae4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   80ae8:	10800044 	addi	r2,r2,1
   80aec:	1081ffcc 	andi	r2,r2,2047
   80af0:	20c00b17 	ldw	r3,44(r4)
   80af4:	10c01226 	beq	r2,r3,80b40 <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80af8:	30800037 	ldwio	r2,0(r6)
   80afc:	100b883a 	mov	r5,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80b00:	10e0000c 	andi	r3,r2,32768
   80b04:	18000c26 	beq	r3,zero,80b38 <altera_avalon_jtag_uart_irq+0x7c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80b08:	20c00a17 	ldw	r3,40(r4)
   80b0c:	20c7883a 	add	r3,r4,r3
   80b10:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b14:	20800a17 	ldw	r2,40(r4)
   80b18:	10800044 	addi	r2,r2,1
   80b1c:	1081ffcc 	andi	r2,r2,2047
   80b20:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b24:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   80b28:	10800044 	addi	r2,r2,1
   80b2c:	1081ffcc 	andi	r2,r2,2047
   80b30:	20c00b17 	ldw	r3,44(r4)
   80b34:	10fff01e 	bne	r2,r3,80af8 <tx_descriptor+0xfff80a98>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80b38:	297fffec 	andhi	r5,r5,65535
   80b3c:	28000526 	beq	r5,zero,80b54 <altera_avalon_jtag_uart_irq+0x98>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80b40:	20800817 	ldw	r2,32(r4)
   80b44:	1284703a 	and	r2,r2,r10
   80b48:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80b4c:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80b50:	40800037 	ldwio	r2,0(r8)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80b54:	3880800c 	andi	r2,r7,512
   80b58:	103fdc26 	beq	r2,zero,80acc <tx_descriptor+0xfff80a6c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80b5c:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   80b60:	383fda26 	beq	r7,zero,80acc <tx_descriptor+0xfff80a6c>
   80b64:	20c00d17 	ldw	r3,52(r4)
   80b68:	20800c17 	ldw	r2,48(r4)
   80b6c:	18800d26 	beq	r3,r2,80ba4 <altera_avalon_jtag_uart_irq+0xe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80b70:	20800d17 	ldw	r2,52(r4)
   80b74:	2085883a 	add	r2,r4,r2
   80b78:	10820e07 	ldb	r2,2104(r2)
   80b7c:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b80:	20800d17 	ldw	r2,52(r4)
   80b84:	10800044 	addi	r2,r2,1
   80b88:	1081ffcc 	andi	r2,r2,2047
   80b8c:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80b90:	39ffffc4 	addi	r7,r7,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80b94:	383fcd26 	beq	r7,zero,80acc <tx_descriptor+0xfff80a6c>
   80b98:	20c00d17 	ldw	r3,52(r4)
   80b9c:	20800c17 	ldw	r2,48(r4)
   80ba0:	18bff31e 	bne	r3,r2,80b70 <tx_descriptor+0xfff80b10>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80ba4:	20800817 	ldw	r2,32(r4)
   80ba8:	12c4703a 	and	r2,r2,r11
   80bac:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80bb0:	20c00017 	ldw	r3,0(r4)
   80bb4:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80bb8:	48800037 	ldwio	r2,0(r9)
   80bbc:	003fc306 	br	80acc <tx_descriptor+0xfff80a6c>
   80bc0:	f800283a 	ret

00080bc4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80bc4:	defffd04 	addi	sp,sp,-12
   80bc8:	dfc00215 	stw	ra,8(sp)
   80bcc:	dc000115 	stw	r16,4(sp)
   80bd0:	2021883a 	mov	r16,r4
   80bd4:	2809883a 	mov	r4,r5
   80bd8:	300b883a 	mov	r5,r6
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80bdc:	00800044 	movi	r2,1
   80be0:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80be4:	80c00017 	ldw	r3,0(r16)
   80be8:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80bec:	d8000015 	stw	zero,0(sp)
   80bf0:	800f883a 	mov	r7,r16
   80bf4:	01800234 	movhi	r6,8
   80bf8:	3182af04 	addi	r6,r6,2748
   80bfc:	00818480 	call	81848 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80c00:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80c04:	800f883a 	mov	r7,r16
   80c08:	01800234 	movhi	r6,8
   80c0c:	31829d04 	addi	r6,r6,2676
   80c10:	d167cd17 	ldw	r5,-24780(gp)
   80c14:	81000204 	addi	r4,r16,8
   80c18:	00815ec0 	call	815ec <alt_alarm_start>
   80c1c:	1000030e 	bge	r2,zero,80c2c <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80c20:	00a00034 	movhi	r2,32768
   80c24:	10bfffc4 	addi	r2,r2,-1
   80c28:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80c2c:	dfc00217 	ldw	ra,8(sp)
   80c30:	dc000117 	ldw	r16,4(sp)
   80c34:	dec00304 	addi	sp,sp,12
   80c38:	f800283a 	ret

00080c3c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80c3c:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   80c40:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80c44:	00000106 	br	80c4c <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
   80c48:	2800071e 	bne	r5,zero,80c68 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80c4c:	20800d17 	ldw	r2,52(r4)
   80c50:	11800726 	beq	r2,r6,80c70 <altera_avalon_jtag_uart_close+0x34>
   80c54:	20c00917 	ldw	r3,36(r4)
   80c58:	20800117 	ldw	r2,4(r4)
   80c5c:	18bffa36 	bltu	r3,r2,80c48 <tx_descriptor+0xfff80be8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   80c60:	0005883a 	mov	r2,zero
   80c64:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   80c68:	00bffd44 	movi	r2,-11
   80c6c:	f800283a 	ret
    }
  }

  return 0;
   80c70:	0005883a 	mov	r2,zero
}
   80c74:	f800283a 	ret

00080c78 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   80c78:	009a8044 	movi	r2,27137
   80c7c:	28800326 	beq	r5,r2,80c8c <altera_avalon_jtag_uart_ioctl+0x14>
   80c80:	009a8084 	movi	r2,27138
   80c84:	28800f26 	beq	r5,r2,80cc4 <altera_avalon_jtag_uart_ioctl+0x4c>
   80c88:	00001706 	br	80ce8 <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   80c8c:	20c00117 	ldw	r3,4(r4)
   80c90:	00a00034 	movhi	r2,32768
   80c94:	10bfffc4 	addi	r2,r2,-1
   80c98:	18801526 	beq	r3,r2,80cf0 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   80c9c:	30800017 	ldw	r2,0(r6)
   80ca0:	10ffff84 	addi	r3,r2,-2
   80ca4:	01600034 	movhi	r5,32768
   80ca8:	297fff04 	addi	r5,r5,-4
   80cac:	28c0022e 	bgeu	r5,r3,80cb8 <altera_avalon_jtag_uart_ioctl+0x40>
   80cb0:	00a00034 	movhi	r2,32768
   80cb4:	10bfff84 	addi	r2,r2,-2
   80cb8:	20800115 	stw	r2,4(r4)
      rc = 0;
   80cbc:	0005883a 	mov	r2,zero
   80cc0:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80cc4:	20c00117 	ldw	r3,4(r4)
   80cc8:	00a00034 	movhi	r2,32768
   80ccc:	10bfffc4 	addi	r2,r2,-1
   80cd0:	18800926 	beq	r3,r2,80cf8 <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80cd4:	20800917 	ldw	r2,36(r4)
   80cd8:	10c5803a 	cmpltu	r2,r2,r3
   80cdc:	30800015 	stw	r2,0(r6)
      rc = 0;
   80ce0:	0005883a 	mov	r2,zero
   80ce4:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   80ce8:	00bff9c4 	movi	r2,-25
   80cec:	f800283a 	ret
   80cf0:	00bff9c4 	movi	r2,-25
   80cf4:	f800283a 	ret
   80cf8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   80cfc:	f800283a 	ret

00080d00 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80d00:	0180450e 	bge	zero,r6,80e18 <altera_avalon_jtag_uart_read+0x118>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80d04:	defff504 	addi	sp,sp,-44
   80d08:	dfc00a15 	stw	ra,40(sp)
   80d0c:	df000915 	stw	fp,36(sp)
   80d10:	ddc00815 	stw	r23,32(sp)
   80d14:	dd800715 	stw	r22,28(sp)
   80d18:	dd400615 	stw	r21,24(sp)
   80d1c:	dd000515 	stw	r20,20(sp)
   80d20:	dcc00415 	stw	r19,16(sp)
   80d24:	dc800315 	stw	r18,12(sp)
   80d28:	dc400215 	stw	r17,8(sp)
   80d2c:	dc000115 	stw	r16,4(sp)
   80d30:	2023883a 	mov	r17,r4
   80d34:	2839883a 	mov	fp,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80d38:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80d3c:	25800e04 	addi	r22,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80d40:	39d0000c 	andi	r7,r7,16384
   80d44:	d9c00015 	stw	r7,0(sp)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80d48:	e029883a 	mov	r20,fp
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   80d4c:	8cc00a17 	ldw	r19,40(r17)
      out = sp->rx_out;
   80d50:	8c800b17 	ldw	r18,44(r17)

      if (in >= out)
   80d54:	9c800236 	bltu	r19,r18,80d60 <altera_avalon_jtag_uart_read+0x60>
        n = in - out;
   80d58:	9ca1c83a 	sub	r16,r19,r18
   80d5c:	00000106 	br	80d64 <altera_avalon_jtag_uart_read+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80d60:	bca1c83a 	sub	r16,r23,r18

      if (n == 0)
   80d64:	80000d26 	beq	r16,zero,80d9c <altera_avalon_jtag_uart_read+0x9c>
        break; /* No more data available */

      if (n > space)
   80d68:	302b883a 	mov	r21,r6
   80d6c:	3400012e 	bgeu	r6,r16,80d74 <altera_avalon_jtag_uart_read+0x74>
   80d70:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80d74:	800d883a 	mov	r6,r16
   80d78:	b48b883a 	add	r5,r22,r18
   80d7c:	a009883a 	mov	r4,r20
   80d80:	008210c0 	call	8210c <memcpy>
      ptr   += n;
   80d84:	a429883a 	add	r20,r20,r16
      space -= n;
   80d88:	ac0dc83a 	sub	r6,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d8c:	9421883a 	add	r16,r18,r16
   80d90:	8401ffcc 	andi	r16,r16,2047
   80d94:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   80d98:	01bfec16 	blt	zero,r6,80d4c <tx_descriptor+0xfff80cec>

    /* If we read any data then return it */
    if (ptr != buffer)
   80d9c:	a700121e 	bne	r20,fp,80de8 <altera_avalon_jtag_uart_read+0xe8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80da0:	d8800017 	ldw	r2,0(sp)
   80da4:	10000a1e 	bne	r2,zero,80dd0 <altera_avalon_jtag_uart_read+0xd0>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   80da8:	88800a17 	ldw	r2,40(r17)
   80dac:	9880031e 	bne	r19,r2,80dbc <altera_avalon_jtag_uart_read+0xbc>
   80db0:	88c00917 	ldw	r3,36(r17)
   80db4:	88800117 	ldw	r2,4(r17)
   80db8:	18bffb36 	bltu	r3,r2,80da8 <tx_descriptor+0xfff80d48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   80dbc:	88800a17 	ldw	r2,40(r17)
   80dc0:	98800526 	beq	r19,r2,80dd8 <altera_avalon_jtag_uart_read+0xd8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80dc4:	01bfe016 	blt	zero,r6,80d48 <tx_descriptor+0xfff80ce8>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   80dc8:	00bffec4 	movi	r2,-5
   80dcc:	00001606 	br	80e28 <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80dd0:	00bffd44 	movi	r2,-11
   80dd4:	00001406 	br	80e28 <altera_avalon_jtag_uart_read+0x128>
  else
    return -EIO;
   80dd8:	00bffec4 	movi	r2,-5
   80ddc:	00001206 	br	80e28 <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80de0:	00bffd44 	movi	r2,-11
   80de4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80de8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80dec:	00bfff84 	movi	r2,-2
   80df0:	1884703a 	and	r2,r3,r2
   80df4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80df8:	88800817 	ldw	r2,32(r17)
   80dfc:	10800054 	ori	r2,r2,1
   80e00:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80e04:	89000017 	ldw	r4,0(r17)
   80e08:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80e0c:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   80e10:	a705c83a 	sub	r2,r20,fp
   80e14:	00000406 	br	80e28 <altera_avalon_jtag_uart_read+0x128>
  else if (flags & O_NONBLOCK)
   80e18:	39d0000c 	andi	r7,r7,16384
   80e1c:	383ff01e 	bne	r7,zero,80de0 <tx_descriptor+0xfff80d80>
    return -EWOULDBLOCK;
  else
    return -EIO;
   80e20:	00bffec4 	movi	r2,-5
   80e24:	f800283a 	ret
}
   80e28:	dfc00a17 	ldw	ra,40(sp)
   80e2c:	df000917 	ldw	fp,36(sp)
   80e30:	ddc00817 	ldw	r23,32(sp)
   80e34:	dd800717 	ldw	r22,28(sp)
   80e38:	dd400617 	ldw	r21,24(sp)
   80e3c:	dd000517 	ldw	r20,20(sp)
   80e40:	dcc00417 	ldw	r19,16(sp)
   80e44:	dc800317 	ldw	r18,12(sp)
   80e48:	dc400217 	ldw	r17,8(sp)
   80e4c:	dc000117 	ldw	r16,4(sp)
   80e50:	dec00b04 	addi	sp,sp,44
   80e54:	f800283a 	ret

00080e58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80e58:	defff504 	addi	sp,sp,-44
   80e5c:	dfc00a15 	stw	ra,40(sp)
   80e60:	df000915 	stw	fp,36(sp)
   80e64:	ddc00815 	stw	r23,32(sp)
   80e68:	dd800715 	stw	r22,28(sp)
   80e6c:	dd400615 	stw	r21,24(sp)
   80e70:	dd000515 	stw	r20,20(sp)
   80e74:	dcc00415 	stw	r19,16(sp)
   80e78:	dc800315 	stw	r18,12(sp)
   80e7c:	dc400215 	stw	r17,8(sp)
   80e80:	dc000115 	stw	r16,4(sp)
   80e84:	2021883a 	mov	r16,r4
   80e88:	282f883a 	mov	r23,r5
   80e8c:	d9c00015 	stw	r7,0(sp)
   80e90:	2827883a 	mov	r19,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80e94:	05bfff84 	movi	r22,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   80e98:	3d50000c 	andi	r21,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   80e9c:	27020e04 	addi	fp,r4,2104
   80ea0:	00001906 	br	80f08 <altera_avalon_jtag_uart_write+0xb0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   80ea4:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   80ea8:	81000d17 	ldw	r4,52(r16)

      if (in < out)
   80eac:	9100032e 	bgeu	r18,r4,80ebc <altera_avalon_jtag_uart_write+0x64>
        n = out - 1 - in;
   80eb0:	247fffc4 	addi	r17,r4,-1
   80eb4:	8ca3c83a 	sub	r17,r17,r18
   80eb8:	00000606 	br	80ed4 <altera_avalon_jtag_uart_write+0x7c>
      else if (out > 0)
   80ebc:	20000326 	beq	r4,zero,80ecc <altera_avalon_jtag_uart_write+0x74>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   80ec0:	00820004 	movi	r2,2048
   80ec4:	14a3c83a 	sub	r17,r2,r18
   80ec8:	00000206 	br	80ed4 <altera_avalon_jtag_uart_write+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   80ecc:	00c1ffc4 	movi	r3,2047
   80ed0:	1ca3c83a 	sub	r17,r3,r18

      if (n == 0)
   80ed4:	88002b26 	beq	r17,zero,80f84 <altera_avalon_jtag_uart_write+0x12c>
        break;

      if (n > count)
   80ed8:	3029883a 	mov	r20,r6
   80edc:	3440012e 	bgeu	r6,r17,80ee4 <altera_avalon_jtag_uart_write+0x8c>
   80ee0:	3023883a 	mov	r17,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   80ee4:	880d883a 	mov	r6,r17
   80ee8:	980b883a 	mov	r5,r19
   80eec:	e489883a 	add	r4,fp,r18
   80ef0:	008210c0 	call	8210c <memcpy>
      ptr   += n;
   80ef4:	9c67883a 	add	r19,r19,r17
      count -= n;
   80ef8:	a44dc83a 	sub	r6,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80efc:	9463883a 	add	r17,r18,r17
   80f00:	8c41ffcc 	andi	r17,r17,2047
   80f04:	84400c15 	stw	r17,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80f08:	01bfe616 	blt	zero,r6,80ea4 <tx_descriptor+0xfff80e44>
   80f0c:	00001106 	br	80f54 <altera_avalon_jtag_uart_write+0xfc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   80f10:	80800d17 	ldw	r2,52(r16)
   80f14:	2080031e 	bne	r4,r2,80f24 <altera_avalon_jtag_uart_write+0xcc>
   80f18:	80c00917 	ldw	r3,36(r16)
   80f1c:	80800117 	ldw	r2,4(r16)
   80f20:	18bffb36 	bltu	r3,r2,80f10 <tx_descriptor+0xfff80eb0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   80f24:	80800917 	ldw	r2,36(r16)
   80f28:	103ff726 	beq	r2,zero,80f08 <tx_descriptor+0xfff80ea8>
   80f2c:	00002006 	br	80fb0 <altera_avalon_jtag_uart_write+0x158>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   80f30:	9dc5c83a 	sub	r2,r19,r23
   80f34:	00002306 	br	80fc4 <altera_avalon_jtag_uart_write+0x16c>
  else if (flags & O_NONBLOCK)
   80f38:	d8c00017 	ldw	r3,0(sp)
   80f3c:	1890000c 	andi	r2,r3,16384
   80f40:	1000021e 	bne	r2,zero,80f4c <altera_avalon_jtag_uart_write+0xf4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   80f44:	00bffec4 	movi	r2,-5
   80f48:	00001e06 	br	80fc4 <altera_avalon_jtag_uart_write+0x16c>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80f4c:	00bffd44 	movi	r2,-11
   80f50:	00001c06 	br	80fc4 <altera_avalon_jtag_uart_write+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f54:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f58:	00bfff84 	movi	r2,-2
   80f5c:	1884703a 	and	r2,r3,r2
   80f60:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80f64:	80800817 	ldw	r2,32(r16)
   80f68:	10800094 	ori	r2,r2,2
   80f6c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80f70:	81000017 	ldw	r4,0(r16)
   80f74:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80f78:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80f7c:	9dffec1e 	bne	r19,r23,80f30 <tx_descriptor+0xfff80ed0>
   80f80:	003fed06 	br	80f38 <tx_descriptor+0xfff80ed8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f84:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f88:	1d84703a 	and	r2,r3,r22
   80f8c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80f90:	80800817 	ldw	r2,32(r16)
   80f94:	10800094 	ori	r2,r2,2
   80f98:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80f9c:	81400017 	ldw	r5,0(r16)
   80fa0:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80fa4:	1801703a 	wrctl	status,r3
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   80fa8:	a83fd926 	beq	r21,zero,80f10 <tx_descriptor+0xfff80eb0>
   80fac:	00000306 	br	80fbc <altera_avalon_jtag_uart_write+0x164>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80fb0:	9dffdf1e 	bne	r19,r23,80f30 <tx_descriptor+0xfff80ed0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   80fb4:	00bffec4 	movi	r2,-5
   80fb8:	00000206 	br	80fc4 <altera_avalon_jtag_uart_write+0x16c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80fbc:	9dffdc1e 	bne	r19,r23,80f30 <tx_descriptor+0xfff80ed0>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80fc0:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   80fc4:	dfc00a17 	ldw	ra,40(sp)
   80fc8:	df000917 	ldw	fp,36(sp)
   80fcc:	ddc00817 	ldw	r23,32(sp)
   80fd0:	dd800717 	ldw	r22,28(sp)
   80fd4:	dd400617 	ldw	r21,24(sp)
   80fd8:	dd000517 	ldw	r20,20(sp)
   80fdc:	dcc00417 	ldw	r19,16(sp)
   80fe0:	dc800317 	ldw	r18,12(sp)
   80fe4:	dc400217 	ldw	r17,8(sp)
   80fe8:	dc000117 	ldw	r16,4(sp)
   80fec:	dec00b04 	addi	sp,sp,44
   80ff0:	f800283a 	ret

00080ff4 <alt_avalon_sgdma_irq>:
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   80ff4:	20800317 	ldw	r2,12(r4)
   80ff8:	10800404 	addi	r2,r2,16
   80ffc:	10c00037 	ldwio	r3,0(r2)
   81000:	18e00034 	orhi	r3,r3,32768
   81004:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81008:	20800317 	ldw	r2,12(r4)
   8100c:	10800437 	ldwio	r2,16(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   81010:	20800917 	ldw	r2,36(r4)
   81014:	10000e26 	beq	r2,zero,81050 <alt_avalon_sgdma_irq+0x5c>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   81018:	defffe04 	addi	sp,sp,-8
   8101c:	dfc00115 	stw	ra,4(sp)
   81020:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81024:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81028:	00bfff84 	movi	r2,-2
   8102c:	8084703a 	and	r2,r16,r2
   81030:	1001703a 	wrctl	status,r2
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
   81034:	20800917 	ldw	r2,36(r4)
   81038:	21000a17 	ldw	r4,40(r4)
   8103c:	103ee83a 	callr	r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81040:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
   81044:	dfc00117 	ldw	ra,4(sp)
   81048:	dc000017 	ldw	r16,0(sp)
   8104c:	dec00204 	addi	sp,sp,8
   81050:	f800283a 	ret

00081054 <alt_avalon_sgdma_do_async_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81054:	20800317 	ldw	r2,12(r4)
   81058:	10800037 	ldwio	r2,0(r2)
   8105c:	1080040c 	andi	r2,r2,16
   81060:	10001d1e 	bne	r2,zero,810d8 <alt_avalon_sgdma_do_async_transfer+0x84>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81064:	20c00317 	ldw	r3,12(r4)
   81068:	18c00404 	addi	r3,r3,16
   8106c:	19c00037 	ldwio	r7,0(r3)
   81070:	01bff7c4 	movi	r6,-33
   81074:	398c703a 	and	r6,r7,r6
   81078:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8107c:	20c00317 	ldw	r3,12(r4)
   81080:	01803fc4 	movi	r6,255
   81084:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81088:	20c00317 	ldw	r3,12(r4)
   8108c:	19400835 	stwio	r5,32(r3)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   81090:	20c00917 	ldw	r3,36(r4)
   81094:	18000826 	beq	r3,zero,810b8 <alt_avalon_sgdma_do_async_transfer+0x64>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81098:	20c00317 	ldw	r3,12(r4)
   8109c:	18c00404 	addi	r3,r3,16
   810a0:	19400037 	ldwio	r5,0(r3)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   810a4:	21000b17 	ldw	r4,44(r4)
   810a8:	21001814 	ori	r4,r4,96
   810ac:	2148b03a 	or	r4,r4,r5
   810b0:	19000035 	stwio	r4,0(r3)
   810b4:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   810b8:	21000317 	ldw	r4,12(r4)
   810bc:	21000404 	addi	r4,r4,16
   810c0:	21400037 	ldwio	r5,0(r4)
   810c4:	00fffbc4 	movi	r3,-17
   810c8:	28c6703a 	and	r3,r5,r3

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   810cc:	18c01814 	ori	r3,r3,96
   810d0:	20c00035 	stwio	r3,0(r4)
   810d4:	f800283a 	ret
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   810d8:	00bffc04 	movi	r2,-16
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
   810dc:	f800283a 	ret

000810e0 <alt_avalon_sgdma_do_sync_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   810e0:	20800317 	ldw	r2,12(r4)
   810e4:	10800037 	ldwio	r2,0(r2)
   810e8:	1080040c 	andi	r2,r2,16
   810ec:	103ffc1e 	bne	r2,zero,810e0 <tx_descriptor+0xfff81080>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   810f0:	20800317 	ldw	r2,12(r4)
   810f4:	10800404 	addi	r2,r2,16
   810f8:	11800037 	ldwio	r6,0(r2)
   810fc:	00fff7c4 	movi	r3,-33
   81100:	30c6703a 	and	r3,r6,r3
   81104:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81108:	20800317 	ldw	r2,12(r4)
   8110c:	00c03fc4 	movi	r3,255
   81110:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81114:	20800317 	ldw	r2,12(r4)
   81118:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8111c:	20800317 	ldw	r2,12(r4)
   81120:	10800404 	addi	r2,r2,16
   81124:	10c00037 	ldwio	r3,0(r2)
   81128:	18c01814 	ori	r3,r3,96
   8112c:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81130:	20800317 	ldw	r2,12(r4)
   81134:	10800037 	ldwio	r2,0(r2)
   81138:	1080040c 	andi	r2,r2,16
   8113c:	103ffc1e 	bne	r2,zero,81130 <tx_descriptor+0xfff810d0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81140:	20800317 	ldw	r2,12(r4)
   81144:	10800404 	addi	r2,r2,16
   81148:	11400037 	ldwio	r5,0(r2)
   8114c:	00fff7c4 	movi	r3,-33
   81150:	28c6703a 	and	r3,r5,r3
   81154:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   81158:	20c00317 	ldw	r3,12(r4)
   8115c:	18800037 	ldwio	r2,0(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81160:	01003fc4 	movi	r4,255
   81164:	19000035 	stwio	r4,0(r3)

  return status;
}
   81168:	f800283a 	ret

0008116c <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
   8116c:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
   81170:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
   81174:	21800b15 	stw	r6,44(r4)
   81178:	f800283a 	ret

0008117c <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8117c:	20800317 	ldw	r2,12(r4)
   81180:	10800404 	addi	r2,r2,16
   81184:	10c00037 	ldwio	r3,0(r2)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81188:	18c00814 	ori	r3,r3,32
   8118c:	10c00035 	stwio	r3,0(r2)
   81190:	f800283a 	ret

00081194 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81194:	20800317 	ldw	r2,12(r4)
   81198:	10800404 	addi	r2,r2,16
   8119c:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   811a0:	00fff7c4 	movi	r3,-33
   811a4:	20c6703a 	and	r3,r4,r3
   811a8:	10c00035 	stwio	r3,0(r2)
   811ac:	f800283a 	ret

000811b0 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   811b0:	208007a3 	ldbuio	r2,30(r4)
   811b4:	10801fcc 	andi	r2,r2,127
   811b8:	1000041e 	bne	r2,zero,811cc <alt_avalon_sgdma_check_descriptor_status+0x1c>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   811bc:	208007e3 	ldbuio	r2,31(r4)
   811c0:	1080200c 	andi	r2,r2,128
   811c4:	1000031e 	bne	r2,zero,811d4 <alt_avalon_sgdma_check_descriptor_status+0x24>
   811c8:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   811cc:	00bffec4 	movi	r2,-5
   811d0:	f800283a 	ret
  }

  if( IORD_8DIRECT(&desc->control, 0) &
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   811d4:	00bfe244 	movi	r2,-119
  }

    return 0;
}
   811d8:	f800283a 	ret

000811dc <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   811dc:	defffe04 	addi	sp,sp,-8
   811e0:	dfc00115 	stw	ra,4(sp)
   811e4:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   811e8:	d1600004 	addi	r5,gp,-32768
   811ec:	00817c80 	call	817c8 <alt_find_dev>
   811f0:	1021883a 	mov	r16,r2

  if (NULL == dev) {
   811f4:	1000071e 	bne	r2,zero,81214 <alt_avalon_sgdma_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   811f8:	d0a00717 	ldw	r2,-32740(gp)
   811fc:	10000226 	beq	r2,zero,81208 <alt_avalon_sgdma_open+0x2c>
   81200:	103ee83a 	callr	r2
   81204:	00000106 	br	8120c <alt_avalon_sgdma_open+0x30>
   81208:	d0a7cf04 	addi	r2,gp,-24772
    ALT_ERRNO = ENODEV;
   8120c:	00c004c4 	movi	r3,19
   81210:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
   81214:	8005883a 	mov	r2,r16
   81218:	dfc00117 	ldw	ra,4(sp)
   8121c:	dc000017 	ldw	r16,0(sp)
   81220:	dec00204 	addi	sp,sp,8
   81224:	f800283a 	ret

00081228 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81228:	20c00317 	ldw	r3,12(r4)
   8122c:	18c00404 	addi	r3,r3,16
   81230:	19000037 	ldwio	r4,0(r3)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   81234:	00a00434 	movhi	r2,32784
   81238:	10bfffc4 	addi	r2,r2,-1
   8123c:	2084703a 	and	r2,r4,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81240:	280a953a 	slli	r5,r5,20
   81244:	295ffc2c 	andhi	r5,r5,32752
   81248:	29400134 	orhi	r5,r5,4
   8124c:	288ab03a 	or	r5,r5,r2
   81250:	19400035 	stwio	r5,0(r3)
   81254:	f800283a 	ret

00081258 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81258:	20800317 	ldw	r2,12(r4)
   8125c:	10800404 	addi	r2,r2,16
   81260:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81264:	00ffff34 	movhi	r3,65532
   81268:	18ffffc4 	addi	r3,r3,-1
   8126c:	20c6703a 	and	r3,r4,r3
   81270:	10c00035 	stwio	r3,0(r2)
   81274:	f800283a 	ret

00081278 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81278:	deffff04 	addi	sp,sp,-4
   8127c:	dfc00015 	stw	ra,0(sp)
   81280:	da000717 	ldw	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   81284:	288007c3 	ldbu	r2,31(r5)
   81288:	10801fcc 	andi	r2,r2,127
   8128c:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81290:	21800005 	stb	r6,0(r4)
   81294:	3004d23a 	srli	r2,r6,8
   81298:	20800045 	stb	r2,1(r4)
   8129c:	3004d43a 	srli	r2,r6,16
   812a0:	20800085 	stb	r2,2(r4)
   812a4:	300cd63a 	srli	r6,r6,24
   812a8:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
   812ac:	21c00205 	stb	r7,8(r4)
   812b0:	3804d23a 	srli	r2,r7,8
   812b4:	20800245 	stb	r2,9(r4)
   812b8:	3804d43a 	srli	r2,r7,16
   812bc:	20800285 	stb	r2,10(r4)
   812c0:	380ed63a 	srli	r7,r7,24
   812c4:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
   812c8:	21400405 	stb	r5,16(r4)
   812cc:	2804d23a 	srli	r2,r5,8
   812d0:	20800445 	stb	r2,17(r4)
   812d4:	2804d43a 	srli	r2,r5,16
   812d8:	20800485 	stb	r2,18(r4)
   812dc:	280ad63a 	srli	r5,r5,24
   812e0:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
   812e4:	20000105 	stb	zero,4(r4)
   812e8:	20000145 	stb	zero,5(r4)
   812ec:	20000185 	stb	zero,6(r4)
   812f0:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
   812f4:	20000305 	stb	zero,12(r4)
   812f8:	20000345 	stb	zero,13(r4)
   812fc:	20000385 	stb	zero,14(r4)
   81300:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
   81304:	20000505 	stb	zero,20(r4)
   81308:	20000545 	stb	zero,21(r4)
   8130c:	20000585 	stb	zero,22(r4)
   81310:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
   81314:	d880010b 	ldhu	r2,4(sp)
   81318:	20800605 	stb	r2,24(r4)
   8131c:	1004d23a 	srli	r2,r2,8
   81320:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
   81324:	20000705 	stb	zero,28(r4)
   81328:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
   8132c:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   81330:	d8800517 	ldw	r2,20(sp)
   81334:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
   81338:	d8800617 	ldw	r2,24(sp)
   8133c:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   81340:	d8800217 	ldw	r2,8(sp)
   81344:	1004c03a 	cmpne	r2,r2,zero
   81348:	10bfe004 	addi	r2,r2,-128
   8134c:	d8c00317 	ldw	r3,12(sp)
   81350:	1806c03a 	cmpne	r3,r3,zero
   81354:	1806907a 	slli	r3,r3,1
   81358:	10c4b03a 	or	r2,r2,r3
   8135c:	d8c00417 	ldw	r3,16(sp)
   81360:	1806c03a 	cmpne	r3,r3,zero
   81364:	180690ba 	slli	r3,r3,2
   81368:	10c4b03a 	or	r2,r2,r3
   8136c:	40c03fcc 	andi	r3,r8,255
   81370:	18000326 	beq	r3,zero,81380 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
   81374:	420003cc 	andi	r8,r8,15
   81378:	401090fa 	slli	r8,r8,3
   8137c:	00000106 	br	81384 <alt_avalon_sgdma_construct_descriptor_burst+0x10c>
   81380:	0011883a 	mov	r8,zero
   81384:	1204b03a 	or	r2,r2,r8
   81388:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   8138c:	01400804 	movi	r5,32
   81390:	00817440 	call	81744 <alt_dcache_flush>
}
   81394:	dfc00017 	ldw	ra,0(sp)
   81398:	dec00104 	addi	sp,sp,4
   8139c:	f800283a 	ret

000813a0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   813a0:	defff804 	addi	sp,sp,-32
   813a4:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   813a8:	d8000615 	stw	zero,24(sp)
   813ac:	d8800c17 	ldw	r2,48(sp)
   813b0:	d8800515 	stw	r2,20(sp)
   813b4:	d8800b17 	ldw	r2,44(sp)
   813b8:	d8800415 	stw	r2,16(sp)
   813bc:	d8800a17 	ldw	r2,40(sp)
   813c0:	d8800315 	stw	r2,12(sp)
   813c4:	d8800917 	ldw	r2,36(sp)
   813c8:	d8800215 	stw	r2,8(sp)
   813cc:	d8000115 	stw	zero,4(sp)
   813d0:	d880080b 	ldhu	r2,32(sp)
   813d4:	d8800015 	stw	r2,0(sp)
   813d8:	00812780 	call	81278 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   813dc:	dfc00717 	ldw	ra,28(sp)
   813e0:	dec00804 	addi	sp,sp,32
   813e4:	f800283a 	ret

000813e8 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   813e8:	defffa04 	addi	sp,sp,-24
   813ec:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   813f0:	d8000415 	stw	zero,16(sp)
   813f4:	d8000315 	stw	zero,12(sp)
   813f8:	d8800817 	ldw	r2,32(sp)
   813fc:	d8800215 	stw	r2,8(sp)
   81400:	d8800717 	ldw	r2,28(sp)
   81404:	d8800115 	stw	r2,4(sp)
   81408:	d880060b 	ldhu	r2,24(sp)
   8140c:	d8800015 	stw	r2,0(sp)
   81410:	00813a00 	call	813a0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   81414:	dfc00517 	ldw	ra,20(sp)
   81418:	dec00604 	addi	sp,sp,24
   8141c:	f800283a 	ret

00081420 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   81420:	defff804 	addi	sp,sp,-32
   81424:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81428:	d8000615 	stw	zero,24(sp)
   8142c:	d8800917 	ldw	r2,36(sp)
   81430:	d8800515 	stw	r2,20(sp)
   81434:	d8000415 	stw	zero,16(sp)
   81438:	d8800817 	ldw	r2,32(sp)
   8143c:	d8800315 	stw	r2,12(sp)
   81440:	d8000215 	stw	zero,8(sp)
   81444:	d8000115 	stw	zero,4(sp)
   81448:	39ffffcc 	andi	r7,r7,65535
   8144c:	d9c00015 	stw	r7,0(sp)
   81450:	300f883a 	mov	r7,r6
   81454:	000d883a 	mov	r6,zero
   81458:	00812780 	call	81278 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   8145c:	dfc00717 	ldw	ra,28(sp)
   81460:	dec00804 	addi	sp,sp,32
   81464:	f800283a 	ret

00081468 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   81468:	defffd04 	addi	sp,sp,-12
   8146c:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   81470:	d8000115 	stw	zero,4(sp)
   81474:	d8800317 	ldw	r2,12(sp)
   81478:	d8800015 	stw	r2,0(sp)
   8147c:	39ffffcc 	andi	r7,r7,65535
   81480:	00814200 	call	81420 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   81484:	dfc00217 	ldw	ra,8(sp)
   81488:	dec00304 	addi	sp,sp,12
   8148c:	f800283a 	ret

00081490 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81490:	defff804 	addi	sp,sp,-32
   81494:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81498:	d8800c03 	ldbu	r2,48(sp)
   8149c:	d8800615 	stw	r2,24(sp)
   814a0:	d8000515 	stw	zero,20(sp)
   814a4:	d8800b17 	ldw	r2,44(sp)
   814a8:	d8800415 	stw	r2,16(sp)
   814ac:	d8800917 	ldw	r2,36(sp)
   814b0:	d8800315 	stw	r2,12(sp)
   814b4:	d8800817 	ldw	r2,32(sp)
   814b8:	d8800215 	stw	r2,8(sp)
   814bc:	d8800a17 	ldw	r2,40(sp)
   814c0:	d8800115 	stw	r2,4(sp)
   814c4:	39ffffcc 	andi	r7,r7,65535
   814c8:	d9c00015 	stw	r7,0(sp)
   814cc:	000f883a 	mov	r7,zero
   814d0:	00812780 	call	81278 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   814d4:	dfc00717 	ldw	ra,28(sp)
   814d8:	dec00804 	addi	sp,sp,32
   814dc:	f800283a 	ret

000814e0 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   814e0:	defffa04 	addi	sp,sp,-24
   814e4:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   814e8:	d8800903 	ldbu	r2,36(sp)
   814ec:	d8800415 	stw	r2,16(sp)
   814f0:	d8000315 	stw	zero,12(sp)
   814f4:	d8800817 	ldw	r2,32(sp)
   814f8:	d8800215 	stw	r2,8(sp)
   814fc:	d8800717 	ldw	r2,28(sp)
   81500:	d8800115 	stw	r2,4(sp)
   81504:	d8800617 	ldw	r2,24(sp)
   81508:	d8800015 	stw	r2,0(sp)
   8150c:	39ffffcc 	andi	r7,r7,65535
   81510:	00814900 	call	81490 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   81514:	dfc00517 	ldw	ra,20(sp)
   81518:	dec00604 	addi	sp,sp,24
   8151c:	f800283a 	ret

00081520 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81520:	defff804 	addi	sp,sp,-32
   81524:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81528:	d8800c03 	ldbu	r2,48(sp)
   8152c:	d8800615 	stw	r2,24(sp)
   81530:	d8000515 	stw	zero,20(sp)
   81534:	d8000415 	stw	zero,16(sp)
   81538:	d8800b17 	ldw	r2,44(sp)
   8153c:	d8800315 	stw	r2,12(sp)
   81540:	d8800a17 	ldw	r2,40(sp)
   81544:	d8800215 	stw	r2,8(sp)
   81548:	d8800917 	ldw	r2,36(sp)
   8154c:	d8800115 	stw	r2,4(sp)
   81550:	d880080b 	ldhu	r2,32(sp)
   81554:	d8800015 	stw	r2,0(sp)
   81558:	00812780 	call	81278 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   8155c:	dfc00717 	ldw	ra,28(sp)
   81560:	dec00804 	addi	sp,sp,32
   81564:	f800283a 	ret

00081568 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   81568:	defffb04 	addi	sp,sp,-20
   8156c:	dfc00415 	stw	ra,16(sp)
   81570:	dc800315 	stw	r18,12(sp)
   81574:	dc400215 	stw	r17,8(sp)
   81578:	dc000115 	stw	r16,4(sp)
   8157c:	2021883a 	mov	r16,r4
   81580:	2823883a 	mov	r17,r5
   81584:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81588:	20c00317 	ldw	r3,12(r4)
   8158c:	00800074 	movhi	r2,1
   81590:	18800435 	stwio	r2,16(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81594:	20c00317 	ldw	r3,12(r4)
   81598:	18800435 	stwio	r2,16(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   8159c:	20800317 	ldw	r2,12(r4)
   815a0:	10000435 	stwio	zero,16(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   815a4:	20800317 	ldw	r2,12(r4)
   815a8:	00c03fc4 	movi	r3,255
   815ac:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   815b0:	d1600004 	addi	r5,gp,-32768
   815b4:	00817540 	call	81754 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   815b8:	d8000015 	stw	zero,0(sp)
   815bc:	800f883a 	mov	r7,r16
   815c0:	01800234 	movhi	r6,8
   815c4:	3183fd04 	addi	r6,r6,4084
   815c8:	900b883a 	mov	r5,r18
   815cc:	8809883a 	mov	r4,r17
   815d0:	00818480 	call	81848 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   815d4:	dfc00417 	ldw	ra,16(sp)
   815d8:	dc800317 	ldw	r18,12(sp)
   815dc:	dc400217 	ldw	r17,8(sp)
   815e0:	dc000117 	ldw	r16,4(sp)
   815e4:	dec00504 	addi	sp,sp,20
   815e8:	f800283a 	ret

000815ec <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   815ec:	d0a7cd17 	ldw	r2,-24780(gp)
   815f0:	10001a26 	beq	r2,zero,8165c <alt_alarm_start+0x70>
  {
    if (alarm)
   815f4:	20001b26 	beq	r4,zero,81664 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
   815f8:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   815fc:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81600:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81604:	00bfff84 	movi	r2,-2
   81608:	1884703a 	and	r2,r3,r2
   8160c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81610:	d0a7cc17 	ldw	r2,-24784(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   81614:	11800044 	addi	r6,r2,1
   81618:	314b883a 	add	r5,r6,r5
   8161c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   81620:	2880032e 	bgeu	r5,r2,81630 <alt_alarm_start+0x44>
      {
        alarm->rollover = 1;
   81624:	00800044 	movi	r2,1
   81628:	20800405 	stb	r2,16(r4)
   8162c:	00000106 	br	81634 <alt_alarm_start+0x48>
      }
      else
      {
        alarm->rollover = 0;
   81630:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81634:	d0a00904 	addi	r2,gp,-32732
   81638:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   8163c:	11400017 	ldw	r5,0(r2)
   81640:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   81644:	11400017 	ldw	r5,0(r2)
   81648:	29000115 	stw	r4,4(r5)
  list->next           = entry;
   8164c:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81650:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   81654:	0005883a 	mov	r2,zero
   81658:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   8165c:	00bfde84 	movi	r2,-134
   81660:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   81664:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   81668:	f800283a 	ret

0008166c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8166c:	defffd04 	addi	sp,sp,-12
   81670:	dfc00215 	stw	ra,8(sp)
   81674:	dc400115 	stw	r17,4(sp)
   81678:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8167c:	20002016 	blt	r4,zero,81700 <close+0x94>
   81680:	2021883a 	mov	r16,r4
   81684:	01400304 	movi	r5,12
   81688:	00846b40 	call	846b4 <__mulsi3>
   8168c:	04400234 	movhi	r17,8
   81690:	8c586f04 	addi	r17,r17,25020
   81694:	1463883a 	add	r17,r2,r17

  if (fd)
   81698:	88001926 	beq	r17,zero,81700 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8169c:	01400304 	movi	r5,12
   816a0:	8009883a 	mov	r4,r16
   816a4:	00846b40 	call	846b4 <__mulsi3>
   816a8:	00c00234 	movhi	r3,8
   816ac:	18d86f04 	addi	r3,r3,25020
   816b0:	1885883a 	add	r2,r3,r2
   816b4:	10800017 	ldw	r2,0(r2)
   816b8:	10800417 	ldw	r2,16(r2)
   816bc:	10001926 	beq	r2,zero,81724 <close+0xb8>
   816c0:	8809883a 	mov	r4,r17
   816c4:	103ee83a 	callr	r2
   816c8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   816cc:	8009883a 	mov	r4,r16
   816d0:	0081c2c0 	call	81c2c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   816d4:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   816d8:	8800150e 	bge	r17,zero,81730 <close+0xc4>
   816dc:	d0a00717 	ldw	r2,-32740(gp)
   816e0:	10000226 	beq	r2,zero,816ec <close+0x80>
   816e4:	103ee83a 	callr	r2
   816e8:	00000106 	br	816f0 <close+0x84>
   816ec:	d0a7cf04 	addi	r2,gp,-24772
    {
      ALT_ERRNO = -rval;
   816f0:	0463c83a 	sub	r17,zero,r17
   816f4:	14400015 	stw	r17,0(r2)
      return -1;
   816f8:	00bfffc4 	movi	r2,-1
   816fc:	00000c06 	br	81730 <close+0xc4>
   81700:	d0a00717 	ldw	r2,-32740(gp)
   81704:	10000226 	beq	r2,zero,81710 <close+0xa4>
   81708:	103ee83a 	callr	r2
   8170c:	00000106 	br	81714 <close+0xa8>
   81710:	d0a7cf04 	addi	r2,gp,-24772
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81714:	00c01444 	movi	r3,81
   81718:	10c00015 	stw	r3,0(r2)
    return -1;
   8171c:	00bfffc4 	movi	r2,-1
   81720:	00000306 	br	81730 <close+0xc4>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81724:	8009883a 	mov	r4,r16
   81728:	0081c2c0 	call	81c2c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   8172c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   81730:	dfc00217 	ldw	ra,8(sp)
   81734:	dc400117 	ldw	r17,4(sp)
   81738:	dc000017 	ldw	r16,0(sp)
   8173c:	dec00304 	addi	sp,sp,12
   81740:	f800283a 	ret

00081744 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   81744:	f800283a 	ret

00081748 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81748:	f800283a 	ret

0008174c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   8174c:	3005883a 	mov	r2,r6
   81750:	f800283a 	ret

00081754 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81754:	20000226 	beq	r4,zero,81760 <alt_dev_llist_insert+0xc>
   81758:	20800217 	ldw	r2,8(r4)
   8175c:	10000f1e 	bne	r2,zero,8179c <alt_dev_llist_insert+0x48>
   81760:	d0a00717 	ldw	r2,-32740(gp)
   81764:	10000426 	beq	r2,zero,81778 <alt_dev_llist_insert+0x24>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81768:	deffff04 	addi	sp,sp,-4
   8176c:	dfc00015 	stw	ra,0(sp)
   81770:	103ee83a 	callr	r2
   81774:	00000506 	br	8178c <alt_dev_llist_insert+0x38>
   81778:	d0a7cf04 	addi	r2,gp,-24772
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   8177c:	00c00584 	movi	r3,22
   81780:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   81784:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   81788:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   8178c:	00c00584 	movi	r3,22
   81790:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   81794:	00bffa84 	movi	r2,-22
   81798:	00000806 	br	817bc <alt_dev_llist_insert+0x68>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8179c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   817a0:	28800017 	ldw	r2,0(r5)
   817a4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   817a8:	28800017 	ldw	r2,0(r5)
   817ac:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   817b0:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   817b4:	0005883a 	mov	r2,zero
   817b8:	f800283a 	ret
}
   817bc:	dfc00017 	ldw	ra,0(sp)
   817c0:	dec00104 	addi	sp,sp,4
   817c4:	f800283a 	ret

000817c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   817c8:	defffb04 	addi	sp,sp,-20
   817cc:	dfc00415 	stw	ra,16(sp)
   817d0:	dcc00315 	stw	r19,12(sp)
   817d4:	dc800215 	stw	r18,8(sp)
   817d8:	dc400115 	stw	r17,4(sp)
   817dc:	dc000015 	stw	r16,0(sp)
   817e0:	2027883a 	mov	r19,r4
   817e4:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   817e8:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   817ec:	00824440 	call	82444 <strlen>
   817f0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   817f4:	8c000926 	beq	r17,r16,8181c <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   817f8:	900d883a 	mov	r6,r18
   817fc:	980b883a 	mov	r5,r19
   81800:	81000217 	ldw	r4,8(r16)
   81804:	00820900 	call	82090 <memcmp>
   81808:	10000626 	beq	r2,zero,81824 <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   8180c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81810:	8c3ff91e 	bne	r17,r16,817f8 <tx_descriptor+0xfff81798>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   81814:	0005883a 	mov	r2,zero
   81818:	00000306 	br	81828 <alt_find_dev+0x60>
   8181c:	0005883a 	mov	r2,zero
   81820:	00000106 	br	81828 <alt_find_dev+0x60>
   81824:	8005883a 	mov	r2,r16
}
   81828:	dfc00417 	ldw	ra,16(sp)
   8182c:	dcc00317 	ldw	r19,12(sp)
   81830:	dc800217 	ldw	r18,8(sp)
   81834:	dc400117 	ldw	r17,4(sp)
   81838:	dc000017 	ldw	r16,0(sp)
   8183c:	dec00504 	addi	sp,sp,20
   81840:	f800283a 	ret

00081844 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81844:	f800283a 	ret

00081848 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81848:	defffe04 	addi	sp,sp,-8
   8184c:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81850:	d8800217 	ldw	r2,8(sp)
   81854:	d8800015 	stw	r2,0(sp)
   81858:	00818f00 	call	818f0 <alt_iic_isr_register>
}  
   8185c:	dfc00117 	ldw	ra,4(sp)
   81860:	dec00204 	addi	sp,sp,8
   81864:	f800283a 	ret

00081868 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81868:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8186c:	00bfff84 	movi	r2,-2
   81870:	2084703a 	and	r2,r4,r2
   81874:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   81878:	d0a7cb17 	ldw	r2,-24788(gp)
   8187c:	00c00044 	movi	r3,1
   81880:	194a983a 	sll	r5,r3,r5
   81884:	288ab03a 	or	r5,r5,r2
   81888:	d167cb15 	stw	r5,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8188c:	d0a7cb17 	ldw	r2,-24788(gp)
   81890:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81894:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   81898:	0005883a 	mov	r2,zero
   8189c:	f800283a 	ret

000818a0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   818a0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   818a4:	00bfff84 	movi	r2,-2
   818a8:	2084703a 	and	r2,r4,r2
   818ac:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   818b0:	d0a7cb17 	ldw	r2,-24788(gp)
   818b4:	00ffff84 	movi	r3,-2
   818b8:	194a183a 	rol	r5,r3,r5
   818bc:	288a703a 	and	r5,r5,r2
   818c0:	d167cb15 	stw	r5,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   818c4:	d0a7cb17 	ldw	r2,-24788(gp)
   818c8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   818cc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   818d0:	0005883a 	mov	r2,zero
   818d4:	f800283a 	ret

000818d8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   818d8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   818dc:	00800044 	movi	r2,1
   818e0:	1144983a 	sll	r2,r2,r5
   818e4:	10c4703a 	and	r2,r2,r3
}
   818e8:	1004c03a 	cmpne	r2,r2,zero
   818ec:	f800283a 	ret

000818f0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   818f0:	008007c4 	movi	r2,31
   818f4:	11401316 	blt	r2,r5,81944 <alt_iic_isr_register+0x54>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   818f8:	defffe04 	addi	sp,sp,-8
   818fc:	dfc00115 	stw	ra,4(sp)
   81900:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81904:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81908:	00bfff84 	movi	r2,-2
   8190c:	8084703a 	and	r2,r16,r2
   81910:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   81914:	280490fa 	slli	r2,r5,3
   81918:	00c00274 	movhi	r3,9
   8191c:	18e3c104 	addi	r3,r3,-28924
   81920:	1885883a 	add	r2,r3,r2
   81924:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   81928:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8192c:	30000226 	beq	r6,zero,81938 <alt_iic_isr_register+0x48>
   81930:	00818680 	call	81868 <alt_ic_irq_enable>
   81934:	00000106 	br	8193c <alt_iic_isr_register+0x4c>
   81938:	00818a00 	call	818a0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8193c:	8001703a 	wrctl	status,r16
   81940:	00000206 	br	8194c <alt_iic_isr_register+0x5c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   81944:	00bffa84 	movi	r2,-22
   81948:	f800283a 	ret

    alt_irq_enable_all(status);
  }

  return rc; 
}
   8194c:	dfc00117 	ldw	ra,4(sp)
   81950:	dc000017 	ldw	r16,0(sp)
   81954:	dec00204 	addi	sp,sp,8
   81958:	f800283a 	ret

0008195c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8195c:	defffc04 	addi	sp,sp,-16
   81960:	dfc00315 	stw	ra,12(sp)
   81964:	dc800215 	stw	r18,8(sp)
   81968:	dc400115 	stw	r17,4(sp)
   8196c:	dc000015 	stw	r16,0(sp)
   81970:	2025883a 	mov	r18,r4
   81974:	2809883a 	mov	r4,r5
   81978:	300b883a 	mov	r5,r6
  int old;

  old = open (name, flags, mode);
   8197c:	380d883a 	mov	r6,r7
   81980:	0081a700 	call	81a70 <open>

  if (old >= 0)
   81984:	10000f16 	blt	r2,zero,819c4 <alt_open_fd+0x68>
   81988:	1021883a 	mov	r16,r2
  {
    fd->dev      = alt_fd_list[old].dev;
   8198c:	01400304 	movi	r5,12
   81990:	1009883a 	mov	r4,r2
   81994:	00846b40 	call	846b4 <__mulsi3>
   81998:	04400234 	movhi	r17,8
   8199c:	8c586f04 	addi	r17,r17,25020
   819a0:	88a3883a 	add	r17,r17,r2
   819a4:	88800017 	ldw	r2,0(r17)
   819a8:	90800015 	stw	r2,0(r18)
    fd->priv     = alt_fd_list[old].priv;
   819ac:	88800117 	ldw	r2,4(r17)
   819b0:	90800115 	stw	r2,4(r18)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   819b4:	88800217 	ldw	r2,8(r17)
   819b8:	90800215 	stw	r2,8(r18)

    alt_release_fd (old);
   819bc:	8009883a 	mov	r4,r16
   819c0:	0081c2c0 	call	81c2c <alt_release_fd>
  }
} 
   819c4:	dfc00317 	ldw	ra,12(sp)
   819c8:	dc800217 	ldw	r18,8(sp)
   819cc:	dc400117 	ldw	r17,4(sp)
   819d0:	dc000017 	ldw	r16,0(sp)
   819d4:	dec00404 	addi	sp,sp,16
   819d8:	f800283a 	ret

000819dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   819dc:	defffa04 	addi	sp,sp,-24
   819e0:	dfc00515 	stw	ra,20(sp)
   819e4:	dd000415 	stw	r20,16(sp)
   819e8:	dcc00315 	stw	r19,12(sp)
   819ec:	dc800215 	stw	r18,8(sp)
   819f0:	dc400115 	stw	r17,4(sp)
   819f4:	dc000015 	stw	r16,0(sp)
   819f8:	2829883a 	mov	r20,r5
   819fc:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   81a00:	04407fc4 	movi	r17,511
   81a04:	04800044 	movi	r18,1
   81a08:	04000234 	movhi	r16,8
   81a0c:	84187204 	addi	r16,r16,25032
   81a10:	880f883a 	mov	r7,r17
   81a14:	900d883a 	mov	r6,r18
   81a18:	200b883a 	mov	r5,r4
   81a1c:	8009883a 	mov	r4,r16
   81a20:	008195c0 	call	8195c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   81a24:	843ffd04 	addi	r16,r16,-12
   81a28:	880f883a 	mov	r7,r17
   81a2c:	000d883a 	mov	r6,zero
   81a30:	a00b883a 	mov	r5,r20
   81a34:	8009883a 	mov	r4,r16
   81a38:	008195c0 	call	8195c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   81a3c:	880f883a 	mov	r7,r17
   81a40:	900d883a 	mov	r6,r18
   81a44:	980b883a 	mov	r5,r19
   81a48:	81000604 	addi	r4,r16,24
   81a4c:	008195c0 	call	8195c <alt_open_fd>
}  
   81a50:	dfc00517 	ldw	ra,20(sp)
   81a54:	dd000417 	ldw	r20,16(sp)
   81a58:	dcc00317 	ldw	r19,12(sp)
   81a5c:	dc800217 	ldw	r18,8(sp)
   81a60:	dc400117 	ldw	r17,4(sp)
   81a64:	dc000017 	ldw	r16,0(sp)
   81a68:	dec00604 	addi	sp,sp,24
   81a6c:	f800283a 	ret

00081a70 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   81a70:	defff704 	addi	sp,sp,-36
   81a74:	dfc00815 	stw	ra,32(sp)
   81a78:	ddc00715 	stw	r23,28(sp)
   81a7c:	dd800615 	stw	r22,24(sp)
   81a80:	dd400515 	stw	r21,20(sp)
   81a84:	dd000415 	stw	r20,16(sp)
   81a88:	dcc00315 	stw	r19,12(sp)
   81a8c:	dc800215 	stw	r18,8(sp)
   81a90:	dc400115 	stw	r17,4(sp)
   81a94:	dc000015 	stw	r16,0(sp)
   81a98:	202b883a 	mov	r21,r4
   81a9c:	2829883a 	mov	r20,r5
   81aa0:	302d883a 	mov	r22,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   81aa4:	d1600304 	addi	r5,gp,-32756
   81aa8:	00817c80 	call	817c8 <alt_find_dev>
   81aac:	10003e1e 	bne	r2,zero,81ba8 <open+0x138>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   81ab0:	a809883a 	mov	r4,r21
   81ab4:	0081d940 	call	81d94 <alt_find_file>
   81ab8:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81abc:	10004b1e 	bne	r2,zero,81bec <open+0x17c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   81ac0:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   81ac4:	043fffc4 	movi	r16,-1
   81ac8:	00001506 	br	81b20 <open+0xb0>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81acc:	11400017 	ldw	r5,0(r2)
   81ad0:	2980031e 	bne	r5,r6,81ae0 <open+0x70>
   81ad4:	21400017 	ldw	r5,0(r4)
   81ad8:	2800010e 	bge	r5,zero,81ae0 <open+0x70>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   81adc:	98800f1e 	bne	r19,r2,81b1c <open+0xac>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81ae0:	18c00044 	addi	r3,r3,1
   81ae4:	10800304 	addi	r2,r2,12
   81ae8:	21000304 	addi	r4,r4,12
   81aec:	90fff72e 	bgeu	r18,r3,81acc <tx_descriptor+0xfff81a6c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   81af0:	88800317 	ldw	r2,12(r17)
   81af4:	10001526 	beq	r2,zero,81b4c <open+0xdc>
   81af8:	b00f883a 	mov	r7,r22
   81afc:	a00d883a 	mov	r6,r20
   81b00:	a80b883a 	mov	r5,r21
   81b04:	9809883a 	mov	r4,r19
   81b08:	103ee83a 	callr	r2
   81b0c:	1023883a 	mov	r17,r2
   81b10:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   81b14:	88003a0e 	bge	r17,zero,81c00 <open+0x190>
   81b18:	00000106 	br	81b20 <open+0xb0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   81b1c:	047ffcc4 	movi	r17,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   81b20:	8009883a 	mov	r4,r16
   81b24:	0081c2c0 	call	81c2c <alt_release_fd>
   81b28:	d0a00717 	ldw	r2,-32740(gp)
   81b2c:	10000226 	beq	r2,zero,81b38 <open+0xc8>
   81b30:	103ee83a 	callr	r2
   81b34:	00000106 	br	81b3c <open+0xcc>
   81b38:	d0a7cf04 	addi	r2,gp,-24772
    ALT_ERRNO = -status;
   81b3c:	0463c83a 	sub	r17,zero,r17
   81b40:	14400015 	stw	r17,0(r2)
    return -1;
   81b44:	00bfffc4 	movi	r2,-1
   81b48:	00002d06 	br	81c00 <open+0x190>
   81b4c:	8005883a 	mov	r2,r16
   81b50:	00002b06 	br	81c00 <open+0x190>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   81b54:	8023883a 	mov	r17,r16
   81b58:	003ff106 	br	81b20 <tx_descriptor+0xfff81ac0>
   81b5c:	8023883a 	mov	r17,r16
   81b60:	003fef06 	br	81b20 <tx_descriptor+0xfff81ac0>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   81b64:	01400304 	movi	r5,12
   81b68:	8009883a 	mov	r4,r16
   81b6c:	00846b40 	call	846b4 <__mulsi3>
   81b70:	05c00234 	movhi	r23,8
   81b74:	bdd86f04 	addi	r23,r23,25020
   81b78:	15e7883a 	add	r19,r2,r23

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81b7c:	00900034 	movhi	r2,16384
   81b80:	10bfffc4 	addi	r2,r2,-1
   81b84:	a084703a 	and	r2,r20,r2
   81b88:	10900034 	orhi	r2,r2,16384
   81b8c:	98800215 	stw	r2,8(r19)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81b90:	d4a00217 	ldw	r18,-32760(gp)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81b94:	99800017 	ldw	r6,0(r19)
   81b98:	b805883a 	mov	r2,r23
   81b9c:	b9000204 	addi	r4,r23,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81ba0:	0007883a 	mov	r3,zero
   81ba4:	003fc906 	br	81acc <tx_descriptor+0xfff81a6c>
   81ba8:	1023883a 	mov	r17,r2
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   81bac:	1009883a 	mov	r4,r2
   81bb0:	0081e540 	call	81e54 <alt_get_fd>
   81bb4:	1021883a 	mov	r16,r2
   81bb8:	103fe616 	blt	r2,zero,81b54 <tx_descriptor+0xfff81af4>
   81bbc:	003fe906 	br	81b64 <tx_descriptor+0xfff81b04>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   81bc0:	01400304 	movi	r5,12
   81bc4:	8009883a 	mov	r4,r16
   81bc8:	00846b40 	call	846b4 <__mulsi3>
   81bcc:	04c00234 	movhi	r19,8
   81bd0:	9cd86f04 	addi	r19,r19,25020
   81bd4:	14e7883a 	add	r19,r2,r19
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   81bd8:	00900034 	movhi	r2,16384
   81bdc:	10bfffc4 	addi	r2,r2,-1
   81be0:	a084703a 	and	r2,r20,r2
   81be4:	98800215 	stw	r2,8(r19)
   81be8:	003fc106 	br	81af0 <tx_descriptor+0xfff81a90>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   81bec:	1009883a 	mov	r4,r2
   81bf0:	0081e540 	call	81e54 <alt_get_fd>
   81bf4:	1021883a 	mov	r16,r2
   81bf8:	103ff10e 	bge	r2,zero,81bc0 <tx_descriptor+0xfff81b60>
   81bfc:	003fd706 	br	81b5c <tx_descriptor+0xfff81afc>
  }
  
  /* return the reference upon success */

  return index;
}
   81c00:	dfc00817 	ldw	ra,32(sp)
   81c04:	ddc00717 	ldw	r23,28(sp)
   81c08:	dd800617 	ldw	r22,24(sp)
   81c0c:	dd400517 	ldw	r21,20(sp)
   81c10:	dd000417 	ldw	r20,16(sp)
   81c14:	dcc00317 	ldw	r19,12(sp)
   81c18:	dc800217 	ldw	r18,8(sp)
   81c1c:	dc400117 	ldw	r17,4(sp)
   81c20:	dc000017 	ldw	r16,0(sp)
   81c24:	dec00904 	addi	sp,sp,36
   81c28:	f800283a 	ret

00081c2c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   81c2c:	00800084 	movi	r2,2
   81c30:	1100140e 	bge	r2,r4,81c84 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   81c34:	defffd04 	addi	sp,sp,-12
   81c38:	dfc00215 	stw	ra,8(sp)
   81c3c:	dc400115 	stw	r17,4(sp)
   81c40:	dc000015 	stw	r16,0(sp)
   81c44:	2021883a 	mov	r16,r4
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
   81c48:	04400234 	movhi	r17,8
   81c4c:	8c586f04 	addi	r17,r17,25020
   81c50:	01400304 	movi	r5,12
   81c54:	00846b40 	call	846b4 <__mulsi3>
   81c58:	8885883a 	add	r2,r17,r2
   81c5c:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
   81c60:	01400304 	movi	r5,12
   81c64:	8009883a 	mov	r4,r16
   81c68:	00846b40 	call	846b4 <__mulsi3>
   81c6c:	8885883a 	add	r2,r17,r2
   81c70:	10000015 	stw	zero,0(r2)
  }
}
   81c74:	dfc00217 	ldw	ra,8(sp)
   81c78:	dc400117 	ldw	r17,4(sp)
   81c7c:	dc000017 	ldw	r16,0(sp)
   81c80:	dec00304 	addi	sp,sp,12
   81c84:	f800283a 	ret

00081c88 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81c88:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81c8c:	00bfff84 	movi	r2,-2
   81c90:	1884703a 	and	r2,r3,r2
   81c94:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   81c98:	20800017 	ldw	r2,0(r4)
   81c9c:	21400117 	ldw	r5,4(r4)
   81ca0:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   81ca4:	20800117 	ldw	r2,4(r4)
   81ca8:	21400017 	ldw	r5,0(r4)
   81cac:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   81cb0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   81cb4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81cb8:	1801703a 	wrctl	status,r3
   81cbc:	f800283a 	ret

00081cc0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   81cc0:	defffb04 	addi	sp,sp,-20
   81cc4:	dfc00415 	stw	ra,16(sp)
   81cc8:	dcc00315 	stw	r19,12(sp)
   81ccc:	dc800215 	stw	r18,8(sp)
   81cd0:	dc400115 	stw	r17,4(sp)
   81cd4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   81cd8:	d0e00904 	addi	r3,gp,-32732
   81cdc:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   81ce0:	d0a7cc17 	ldw	r2,-24784(gp)
   81ce4:	10800044 	addi	r2,r2,1
   81ce8:	d0a7cc15 	stw	r2,-24784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81cec:	80c02026 	beq	r16,r3,81d70 <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   81cf0:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81cf4:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
   81cf8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   81cfc:	80800403 	ldbu	r2,16(r16)
   81d00:	10001526 	beq	r2,zero,81d58 <alt_tick+0x98>
   81d04:	d0a7cc17 	ldw	r2,-24784(gp)
   81d08:	1000171e 	bne	r2,zero,81d68 <alt_tick+0xa8>
    {
      alarm->rollover = 0;
   81d0c:	80000405 	stb	zero,16(r16)
   81d10:	00001106 	br	81d58 <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
   81d14:	8009883a 	mov	r4,r16
   81d18:	0081c880 	call	81c88 <alt_alarm_stop>
   81d1c:	00000606 	br	81d38 <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
   81d20:	80c00217 	ldw	r3,8(r16)
   81d24:	10c5883a 	add	r2,r2,r3
   81d28:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   81d2c:	d0e7cc17 	ldw	r3,-24784(gp)
   81d30:	10c0012e 	bgeu	r2,r3,81d38 <alt_tick+0x78>
        {
          alarm->rollover = 1;
   81d34:	84c00405 	stb	r19,16(r16)
   81d38:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81d3c:	8cbfee1e 	bne	r17,r18,81cf8 <tx_descriptor+0xfff81c98>
   81d40:	00000b06 	br	81d70 <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
   81d44:	80800317 	ldw	r2,12(r16)
   81d48:	81000517 	ldw	r4,20(r16)
   81d4c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   81d50:	103ff31e 	bne	r2,zero,81d20 <tx_descriptor+0xfff81cc0>
   81d54:	003fef06 	br	81d14 <tx_descriptor+0xfff81cb4>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   81d58:	d0e7cc17 	ldw	r3,-24784(gp)
   81d5c:	80800217 	ldw	r2,8(r16)
   81d60:	18bff536 	bltu	r3,r2,81d38 <tx_descriptor+0xfff81cd8>
   81d64:	003ff706 	br	81d44 <tx_descriptor+0xfff81ce4>
   81d68:	d0a7cc17 	ldw	r2,-24784(gp)
   81d6c:	003ff206 	br	81d38 <tx_descriptor+0xfff81cd8>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   81d70:	dfc00417 	ldw	ra,16(sp)
   81d74:	dcc00317 	ldw	r19,12(sp)
   81d78:	dc800217 	ldw	r18,8(sp)
   81d7c:	dc400117 	ldw	r17,4(sp)
   81d80:	dc000017 	ldw	r16,0(sp)
   81d84:	dec00504 	addi	sp,sp,20
   81d88:	f800283a 	ret

00081d8c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   81d8c:	000170fa 	wrctl	ienable,zero
   81d90:	f800283a 	ret

00081d94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   81d94:	defffa04 	addi	sp,sp,-24
   81d98:	dfc00515 	stw	ra,20(sp)
   81d9c:	dd000415 	stw	r20,16(sp)
   81da0:	dcc00315 	stw	r19,12(sp)
   81da4:	dc800215 	stw	r18,8(sp)
   81da8:	dc400115 	stw	r17,4(sp)
   81dac:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81db0:	d0a00504 	addi	r2,gp,-32748
   81db4:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81db8:	80801b26 	beq	r16,r2,81e28 <alt_find_file+0x94>
   81dbc:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   81dc0:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81dc4:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
   81dc8:	84400217 	ldw	r17,8(r16)
   81dcc:	8809883a 	mov	r4,r17
   81dd0:	00824440 	call	82444 <strlen>
   81dd4:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   81dd8:	8889883a 	add	r4,r17,r2
   81ddc:	213fffc7 	ldb	r4,-1(r4)
   81de0:	2480011e 	bne	r4,r18,81de8 <alt_find_file+0x54>
    {
      len -= 1;
   81de4:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81de8:	180d883a 	mov	r6,r3
   81dec:	98c7883a 	add	r3,r19,r3
   81df0:	18800003 	ldbu	r2,0(r3)
   81df4:	10c03fcc 	andi	r3,r2,255
   81df8:	18c0201c 	xori	r3,r3,128
   81dfc:	18ffe004 	addi	r3,r3,-128
   81e00:	1c800126 	beq	r3,r18,81e08 <alt_find_file+0x74>
   81e04:	1800041e 	bne	r3,zero,81e18 <alt_find_file+0x84>
        !memcmp (next->name, name, len))
   81e08:	980b883a 	mov	r5,r19
   81e0c:	8809883a 	mov	r4,r17
   81e10:	00820900 	call	82090 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81e14:	10000626 	beq	r2,zero,81e30 <alt_find_file+0x9c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81e18:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81e1c:	853fea1e 	bne	r16,r20,81dc8 <tx_descriptor+0xfff81d68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   81e20:	0005883a 	mov	r2,zero
   81e24:	00000306 	br	81e34 <alt_find_file+0xa0>
   81e28:	0005883a 	mov	r2,zero
   81e2c:	00000106 	br	81e34 <alt_find_file+0xa0>
   81e30:	8005883a 	mov	r2,r16
}
   81e34:	dfc00517 	ldw	ra,20(sp)
   81e38:	dd000417 	ldw	r20,16(sp)
   81e3c:	dcc00317 	ldw	r19,12(sp)
   81e40:	dc800217 	ldw	r18,8(sp)
   81e44:	dc400117 	ldw	r17,4(sp)
   81e48:	dc000017 	ldw	r16,0(sp)
   81e4c:	dec00604 	addi	sp,sp,24
   81e50:	f800283a 	ret

00081e54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81e54:	defffd04 	addi	sp,sp,-12
   81e58:	dfc00215 	stw	ra,8(sp)
   81e5c:	dc400115 	stw	r17,4(sp)
   81e60:	dc000015 	stw	r16,0(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   81e64:	00800234 	movhi	r2,8
   81e68:	10986f04 	addi	r2,r2,25020
   81e6c:	10800017 	ldw	r2,0(r2)
   81e70:	10000726 	beq	r2,zero,81e90 <alt_get_fd+0x3c>
   81e74:	00800234 	movhi	r2,8
   81e78:	10987204 	addi	r2,r2,25032
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81e7c:	04000044 	movi	r16,1
   81e80:	01400804 	movi	r5,32
  {
    if (!alt_fd_list[i].dev)
   81e84:	10c00017 	ldw	r3,0(r2)
   81e88:	18000e1e 	bne	r3,zero,81ec4 <alt_get_fd+0x70>
   81e8c:	00000106 	br	81e94 <alt_get_fd+0x40>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81e90:	0021883a 	mov	r16,zero
   81e94:	2023883a 	mov	r17,r4
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   81e98:	01400304 	movi	r5,12
   81e9c:	8009883a 	mov	r4,r16
   81ea0:	00846b40 	call	846b4 <__mulsi3>
   81ea4:	00c00234 	movhi	r3,8
   81ea8:	18d86f04 	addi	r3,r3,25020
   81eac:	1885883a 	add	r2,r3,r2
   81eb0:	14400015 	stw	r17,0(r2)
      if (i > alt_max_fd)
   81eb4:	d0a00217 	ldw	r2,-32760(gp)
   81eb8:	1400060e 	bge	r2,r16,81ed4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   81ebc:	d4200215 	stw	r16,-32760(gp)
   81ec0:	00000406 	br	81ed4 <alt_get_fd+0x80>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81ec4:	84000044 	addi	r16,r16,1
   81ec8:	10800304 	addi	r2,r2,12
   81ecc:	817fed1e 	bne	r16,r5,81e84 <tx_descriptor+0xfff81e24>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   81ed0:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   81ed4:	8005883a 	mov	r2,r16
   81ed8:	dfc00217 	ldw	ra,8(sp)
   81edc:	dc400117 	ldw	r17,4(sp)
   81ee0:	dc000017 	ldw	r16,0(sp)
   81ee4:	dec00304 	addi	sp,sp,12
   81ee8:	f800283a 	ret

00081eec <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   81eec:	213ffe84 	addi	r4,r4,-6
   81ef0:	008003c4 	movi	r2,15
   81ef4:	11001636 	bltu	r2,r4,81f50 <alt_exception_cause_generated_bad_addr+0x64>
   81ef8:	200890ba 	slli	r4,r4,2
   81efc:	00800234 	movhi	r2,8
   81f00:	1087c404 	addi	r2,r2,7952
   81f04:	2089883a 	add	r4,r4,r2
   81f08:	20800017 	ldw	r2,0(r4)
   81f0c:	1000683a 	jmp	r2
   81f10:	00081f58 	cmpnei	zero,zero,8317
   81f14:	00081f58 	cmpnei	zero,zero,8317
   81f18:	00081f50 	cmplti	zero,zero,8317
   81f1c:	00081f50 	cmplti	zero,zero,8317
   81f20:	00081f50 	cmplti	zero,zero,8317
   81f24:	00081f58 	cmpnei	zero,zero,8317
   81f28:	00081f50 	cmplti	zero,zero,8317
   81f2c:	00081f50 	cmplti	zero,zero,8317
   81f30:	00081f58 	cmpnei	zero,zero,8317
   81f34:	00081f58 	cmpnei	zero,zero,8317
   81f38:	00081f50 	cmplti	zero,zero,8317
   81f3c:	00081f58 	cmpnei	zero,zero,8317
   81f40:	00081f50 	cmplti	zero,zero,8317
   81f44:	00081f50 	cmplti	zero,zero,8317
   81f48:	00081f50 	cmplti	zero,zero,8317
   81f4c:	00081f58 	cmpnei	zero,zero,8317
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   81f50:	0005883a 	mov	r2,zero
   81f54:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   81f58:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   81f5c:	f800283a 	ret

00081f60 <exit>:
   81f60:	defffe04 	addi	sp,sp,-8
   81f64:	000b883a 	mov	r5,zero
   81f68:	dc000015 	stw	r16,0(sp)
   81f6c:	dfc00115 	stw	ra,4(sp)
   81f70:	2021883a 	mov	r16,r4
   81f74:	00827880 	call	82788 <__call_exitprocs>
   81f78:	00800234 	movhi	r2,8
   81f7c:	109aef04 	addi	r2,r2,27580
   81f80:	11000017 	ldw	r4,0(r2)
   81f84:	20800f17 	ldw	r2,60(r4)
   81f88:	10000126 	beq	r2,zero,81f90 <exit+0x30>
   81f8c:	103ee83a 	callr	r2
   81f90:	8009883a 	mov	r4,r16
   81f94:	00846dc0 	call	846dc <_exit>

00081f98 <_getc_r>:
   81f98:	defffd04 	addi	sp,sp,-12
   81f9c:	dc000115 	stw	r16,4(sp)
   81fa0:	dfc00215 	stw	ra,8(sp)
   81fa4:	2021883a 	mov	r16,r4
   81fa8:	20000226 	beq	r4,zero,81fb4 <_getc_r+0x1c>
   81fac:	20800e17 	ldw	r2,56(r4)
   81fb0:	10000c26 	beq	r2,zero,81fe4 <_getc_r+0x4c>
   81fb4:	28800117 	ldw	r2,4(r5)
   81fb8:	10bfffc4 	addi	r2,r2,-1
   81fbc:	28800115 	stw	r2,4(r5)
   81fc0:	10000c16 	blt	r2,zero,81ff4 <_getc_r+0x5c>
   81fc4:	28800017 	ldw	r2,0(r5)
   81fc8:	10c00044 	addi	r3,r2,1
   81fcc:	28c00015 	stw	r3,0(r5)
   81fd0:	10800003 	ldbu	r2,0(r2)
   81fd4:	dfc00217 	ldw	ra,8(sp)
   81fd8:	dc000117 	ldw	r16,4(sp)
   81fdc:	dec00304 	addi	sp,sp,12
   81fe0:	f800283a 	ret
   81fe4:	d9400015 	stw	r5,0(sp)
   81fe8:	0082f100 	call	82f10 <__sinit>
   81fec:	d9400017 	ldw	r5,0(sp)
   81ff0:	003ff006 	br	81fb4 <tx_descriptor+0xfff81f54>
   81ff4:	8009883a 	mov	r4,r16
   81ff8:	dfc00217 	ldw	ra,8(sp)
   81ffc:	dc000117 	ldw	r16,4(sp)
   82000:	dec00304 	addi	sp,sp,12
   82004:	00823bc1 	jmpi	823bc <__srget_r>

00082008 <getc>:
   82008:	00800234 	movhi	r2,8
   8200c:	defffd04 	addi	sp,sp,-12
   82010:	109af004 	addi	r2,r2,27584
   82014:	dc400115 	stw	r17,4(sp)
   82018:	14400017 	ldw	r17,0(r2)
   8201c:	dc000015 	stw	r16,0(sp)
   82020:	dfc00215 	stw	ra,8(sp)
   82024:	2021883a 	mov	r16,r4
   82028:	88000226 	beq	r17,zero,82034 <getc+0x2c>
   8202c:	88800e17 	ldw	r2,56(r17)
   82030:	10000d26 	beq	r2,zero,82068 <getc+0x60>
   82034:	80800117 	ldw	r2,4(r16)
   82038:	10bfffc4 	addi	r2,r2,-1
   8203c:	80800115 	stw	r2,4(r16)
   82040:	10000c16 	blt	r2,zero,82074 <getc+0x6c>
   82044:	80800017 	ldw	r2,0(r16)
   82048:	10c00044 	addi	r3,r2,1
   8204c:	80c00015 	stw	r3,0(r16)
   82050:	10800003 	ldbu	r2,0(r2)
   82054:	dfc00217 	ldw	ra,8(sp)
   82058:	dc400117 	ldw	r17,4(sp)
   8205c:	dc000017 	ldw	r16,0(sp)
   82060:	dec00304 	addi	sp,sp,12
   82064:	f800283a 	ret
   82068:	8809883a 	mov	r4,r17
   8206c:	0082f100 	call	82f10 <__sinit>
   82070:	003ff006 	br	82034 <tx_descriptor+0xfff81fd4>
   82074:	800b883a 	mov	r5,r16
   82078:	8809883a 	mov	r4,r17
   8207c:	dfc00217 	ldw	ra,8(sp)
   82080:	dc400117 	ldw	r17,4(sp)
   82084:	dc000017 	ldw	r16,0(sp)
   82088:	dec00304 	addi	sp,sp,12
   8208c:	00823bc1 	jmpi	823bc <__srget_r>

00082090 <memcmp>:
   82090:	01c000c4 	movi	r7,3
   82094:	3980192e 	bgeu	r7,r6,820fc <memcmp+0x6c>
   82098:	2144b03a 	or	r2,r4,r5
   8209c:	11c4703a 	and	r2,r2,r7
   820a0:	10000f26 	beq	r2,zero,820e0 <memcmp+0x50>
   820a4:	20800003 	ldbu	r2,0(r4)
   820a8:	28c00003 	ldbu	r3,0(r5)
   820ac:	10c0151e 	bne	r2,r3,82104 <memcmp+0x74>
   820b0:	31bfff84 	addi	r6,r6,-2
   820b4:	01ffffc4 	movi	r7,-1
   820b8:	00000406 	br	820cc <memcmp+0x3c>
   820bc:	20800003 	ldbu	r2,0(r4)
   820c0:	28c00003 	ldbu	r3,0(r5)
   820c4:	31bfffc4 	addi	r6,r6,-1
   820c8:	10c00e1e 	bne	r2,r3,82104 <memcmp+0x74>
   820cc:	21000044 	addi	r4,r4,1
   820d0:	29400044 	addi	r5,r5,1
   820d4:	31fff91e 	bne	r6,r7,820bc <tx_descriptor+0xfff8205c>
   820d8:	0005883a 	mov	r2,zero
   820dc:	f800283a 	ret
   820e0:	20c00017 	ldw	r3,0(r4)
   820e4:	28800017 	ldw	r2,0(r5)
   820e8:	18bfee1e 	bne	r3,r2,820a4 <tx_descriptor+0xfff82044>
   820ec:	31bfff04 	addi	r6,r6,-4
   820f0:	21000104 	addi	r4,r4,4
   820f4:	29400104 	addi	r5,r5,4
   820f8:	39bff936 	bltu	r7,r6,820e0 <tx_descriptor+0xfff82080>
   820fc:	303fe91e 	bne	r6,zero,820a4 <tx_descriptor+0xfff82044>
   82100:	003ff506 	br	820d8 <tx_descriptor+0xfff82078>
   82104:	10c5c83a 	sub	r2,r2,r3
   82108:	f800283a 	ret

0008210c <memcpy>:
   8210c:	defffd04 	addi	sp,sp,-12
   82110:	dfc00215 	stw	ra,8(sp)
   82114:	dc400115 	stw	r17,4(sp)
   82118:	dc000015 	stw	r16,0(sp)
   8211c:	00c003c4 	movi	r3,15
   82120:	2005883a 	mov	r2,r4
   82124:	1980452e 	bgeu	r3,r6,8223c <memcpy+0x130>
   82128:	2906b03a 	or	r3,r5,r4
   8212c:	18c000cc 	andi	r3,r3,3
   82130:	1800441e 	bne	r3,zero,82244 <memcpy+0x138>
   82134:	347ffc04 	addi	r17,r6,-16
   82138:	8822d13a 	srli	r17,r17,4
   8213c:	28c00104 	addi	r3,r5,4
   82140:	23400104 	addi	r13,r4,4
   82144:	8820913a 	slli	r16,r17,4
   82148:	2b000204 	addi	r12,r5,8
   8214c:	22c00204 	addi	r11,r4,8
   82150:	84000504 	addi	r16,r16,20
   82154:	2a800304 	addi	r10,r5,12
   82158:	22400304 	addi	r9,r4,12
   8215c:	2c21883a 	add	r16,r5,r16
   82160:	2811883a 	mov	r8,r5
   82164:	200f883a 	mov	r7,r4
   82168:	41000017 	ldw	r4,0(r8)
   8216c:	1fc00017 	ldw	ra,0(r3)
   82170:	63c00017 	ldw	r15,0(r12)
   82174:	39000015 	stw	r4,0(r7)
   82178:	53800017 	ldw	r14,0(r10)
   8217c:	6fc00015 	stw	ra,0(r13)
   82180:	5bc00015 	stw	r15,0(r11)
   82184:	4b800015 	stw	r14,0(r9)
   82188:	18c00404 	addi	r3,r3,16
   8218c:	39c00404 	addi	r7,r7,16
   82190:	42000404 	addi	r8,r8,16
   82194:	6b400404 	addi	r13,r13,16
   82198:	63000404 	addi	r12,r12,16
   8219c:	5ac00404 	addi	r11,r11,16
   821a0:	52800404 	addi	r10,r10,16
   821a4:	4a400404 	addi	r9,r9,16
   821a8:	1c3fef1e 	bne	r3,r16,82168 <tx_descriptor+0xfff82108>
   821ac:	89c00044 	addi	r7,r17,1
   821b0:	380e913a 	slli	r7,r7,4
   821b4:	310003cc 	andi	r4,r6,15
   821b8:	02c000c4 	movi	r11,3
   821bc:	11c7883a 	add	r3,r2,r7
   821c0:	29cb883a 	add	r5,r5,r7
   821c4:	5900212e 	bgeu	r11,r4,8224c <memcpy+0x140>
   821c8:	1813883a 	mov	r9,r3
   821cc:	2811883a 	mov	r8,r5
   821d0:	200f883a 	mov	r7,r4
   821d4:	42800017 	ldw	r10,0(r8)
   821d8:	4a400104 	addi	r9,r9,4
   821dc:	39ffff04 	addi	r7,r7,-4
   821e0:	4abfff15 	stw	r10,-4(r9)
   821e4:	42000104 	addi	r8,r8,4
   821e8:	59fffa36 	bltu	r11,r7,821d4 <tx_descriptor+0xfff82174>
   821ec:	213fff04 	addi	r4,r4,-4
   821f0:	2008d0ba 	srli	r4,r4,2
   821f4:	318000cc 	andi	r6,r6,3
   821f8:	21000044 	addi	r4,r4,1
   821fc:	2109883a 	add	r4,r4,r4
   82200:	2109883a 	add	r4,r4,r4
   82204:	1907883a 	add	r3,r3,r4
   82208:	290b883a 	add	r5,r5,r4
   8220c:	30000626 	beq	r6,zero,82228 <memcpy+0x11c>
   82210:	198d883a 	add	r6,r3,r6
   82214:	29c00003 	ldbu	r7,0(r5)
   82218:	18c00044 	addi	r3,r3,1
   8221c:	29400044 	addi	r5,r5,1
   82220:	19ffffc5 	stb	r7,-1(r3)
   82224:	19bffb1e 	bne	r3,r6,82214 <tx_descriptor+0xfff821b4>
   82228:	dfc00217 	ldw	ra,8(sp)
   8222c:	dc400117 	ldw	r17,4(sp)
   82230:	dc000017 	ldw	r16,0(sp)
   82234:	dec00304 	addi	sp,sp,12
   82238:	f800283a 	ret
   8223c:	2007883a 	mov	r3,r4
   82240:	003ff206 	br	8220c <tx_descriptor+0xfff821ac>
   82244:	2007883a 	mov	r3,r4
   82248:	003ff106 	br	82210 <tx_descriptor+0xfff821b0>
   8224c:	200d883a 	mov	r6,r4
   82250:	003fee06 	br	8220c <tx_descriptor+0xfff821ac>

00082254 <_putc_r>:
   82254:	defffc04 	addi	sp,sp,-16
   82258:	dc000215 	stw	r16,8(sp)
   8225c:	dfc00315 	stw	ra,12(sp)
   82260:	2021883a 	mov	r16,r4
   82264:	20000226 	beq	r4,zero,82270 <_putc_r+0x1c>
   82268:	20800e17 	ldw	r2,56(r4)
   8226c:	10001b26 	beq	r2,zero,822dc <_putc_r+0x88>
   82270:	30800217 	ldw	r2,8(r6)
   82274:	10bfffc4 	addi	r2,r2,-1
   82278:	30800215 	stw	r2,8(r6)
   8227c:	10000a16 	blt	r2,zero,822a8 <_putc_r+0x54>
   82280:	30800017 	ldw	r2,0(r6)
   82284:	11400005 	stb	r5,0(r2)
   82288:	30800017 	ldw	r2,0(r6)
   8228c:	10c00044 	addi	r3,r2,1
   82290:	30c00015 	stw	r3,0(r6)
   82294:	10800003 	ldbu	r2,0(r2)
   82298:	dfc00317 	ldw	ra,12(sp)
   8229c:	dc000217 	ldw	r16,8(sp)
   822a0:	dec00404 	addi	sp,sp,16
   822a4:	f800283a 	ret
   822a8:	30c00617 	ldw	r3,24(r6)
   822ac:	10c00616 	blt	r2,r3,822c8 <_putc_r+0x74>
   822b0:	30800017 	ldw	r2,0(r6)
   822b4:	00c00284 	movi	r3,10
   822b8:	11400005 	stb	r5,0(r2)
   822bc:	30800017 	ldw	r2,0(r6)
   822c0:	11400003 	ldbu	r5,0(r2)
   822c4:	28fff11e 	bne	r5,r3,8228c <tx_descriptor+0xfff8222c>
   822c8:	8009883a 	mov	r4,r16
   822cc:	dfc00317 	ldw	ra,12(sp)
   822d0:	dc000217 	ldw	r16,8(sp)
   822d4:	dec00404 	addi	sp,sp,16
   822d8:	00824dc1 	jmpi	824dc <__swbuf_r>
   822dc:	d9400015 	stw	r5,0(sp)
   822e0:	d9800115 	stw	r6,4(sp)
   822e4:	0082f100 	call	82f10 <__sinit>
   822e8:	d9800117 	ldw	r6,4(sp)
   822ec:	d9400017 	ldw	r5,0(sp)
   822f0:	003fdf06 	br	82270 <tx_descriptor+0xfff82210>

000822f4 <putc>:
   822f4:	00800234 	movhi	r2,8
   822f8:	defffc04 	addi	sp,sp,-16
   822fc:	109af004 	addi	r2,r2,27584
   82300:	dc000115 	stw	r16,4(sp)
   82304:	14000017 	ldw	r16,0(r2)
   82308:	dc400215 	stw	r17,8(sp)
   8230c:	dfc00315 	stw	ra,12(sp)
   82310:	2023883a 	mov	r17,r4
   82314:	80000226 	beq	r16,zero,82320 <putc+0x2c>
   82318:	80800e17 	ldw	r2,56(r16)
   8231c:	10001a26 	beq	r2,zero,82388 <putc+0x94>
   82320:	28800217 	ldw	r2,8(r5)
   82324:	10bfffc4 	addi	r2,r2,-1
   82328:	28800215 	stw	r2,8(r5)
   8232c:	10000b16 	blt	r2,zero,8235c <putc+0x68>
   82330:	28800017 	ldw	r2,0(r5)
   82334:	14400005 	stb	r17,0(r2)
   82338:	28800017 	ldw	r2,0(r5)
   8233c:	10c00044 	addi	r3,r2,1
   82340:	28c00015 	stw	r3,0(r5)
   82344:	10800003 	ldbu	r2,0(r2)
   82348:	dfc00317 	ldw	ra,12(sp)
   8234c:	dc400217 	ldw	r17,8(sp)
   82350:	dc000117 	ldw	r16,4(sp)
   82354:	dec00404 	addi	sp,sp,16
   82358:	f800283a 	ret
   8235c:	28c00617 	ldw	r3,24(r5)
   82360:	10c00e16 	blt	r2,r3,8239c <putc+0xa8>
   82364:	28800017 	ldw	r2,0(r5)
   82368:	01000284 	movi	r4,10
   8236c:	14400005 	stb	r17,0(r2)
   82370:	28800017 	ldw	r2,0(r5)
   82374:	10c00003 	ldbu	r3,0(r2)
   82378:	193ff01e 	bne	r3,r4,8233c <tx_descriptor+0xfff822dc>
   8237c:	280d883a 	mov	r6,r5
   82380:	180b883a 	mov	r5,r3
   82384:	00000706 	br	823a4 <putc+0xb0>
   82388:	8009883a 	mov	r4,r16
   8238c:	d9400015 	stw	r5,0(sp)
   82390:	0082f100 	call	82f10 <__sinit>
   82394:	d9400017 	ldw	r5,0(sp)
   82398:	003fe106 	br	82320 <tx_descriptor+0xfff822c0>
   8239c:	280d883a 	mov	r6,r5
   823a0:	880b883a 	mov	r5,r17
   823a4:	8009883a 	mov	r4,r16
   823a8:	dfc00317 	ldw	ra,12(sp)
   823ac:	dc400217 	ldw	r17,8(sp)
   823b0:	dc000117 	ldw	r16,4(sp)
   823b4:	dec00404 	addi	sp,sp,16
   823b8:	00824dc1 	jmpi	824dc <__swbuf_r>

000823bc <__srget_r>:
   823bc:	defffd04 	addi	sp,sp,-12
   823c0:	dc400115 	stw	r17,4(sp)
   823c4:	dc000015 	stw	r16,0(sp)
   823c8:	dfc00215 	stw	ra,8(sp)
   823cc:	2023883a 	mov	r17,r4
   823d0:	2821883a 	mov	r16,r5
   823d4:	20000226 	beq	r4,zero,823e0 <__srget_r+0x24>
   823d8:	20800e17 	ldw	r2,56(r4)
   823dc:	10001026 	beq	r2,zero,82420 <__srget_r+0x64>
   823e0:	800b883a 	mov	r5,r16
   823e4:	8809883a 	mov	r4,r17
   823e8:	00840280 	call	84028 <__srefill_r>
   823ec:	10000e1e 	bne	r2,zero,82428 <__srget_r+0x6c>
   823f0:	80c00017 	ldw	r3,0(r16)
   823f4:	80800117 	ldw	r2,4(r16)
   823f8:	19000044 	addi	r4,r3,1
   823fc:	10bfffc4 	addi	r2,r2,-1
   82400:	80800115 	stw	r2,4(r16)
   82404:	81000015 	stw	r4,0(r16)
   82408:	18800003 	ldbu	r2,0(r3)
   8240c:	dfc00217 	ldw	ra,8(sp)
   82410:	dc400117 	ldw	r17,4(sp)
   82414:	dc000017 	ldw	r16,0(sp)
   82418:	dec00304 	addi	sp,sp,12
   8241c:	f800283a 	ret
   82420:	0082f100 	call	82f10 <__sinit>
   82424:	003fee06 	br	823e0 <tx_descriptor+0xfff82380>
   82428:	00bfffc4 	movi	r2,-1
   8242c:	003ff706 	br	8240c <tx_descriptor+0xfff823ac>

00082430 <__srget>:
   82430:	00800234 	movhi	r2,8
   82434:	109af004 	addi	r2,r2,27584
   82438:	200b883a 	mov	r5,r4
   8243c:	11000017 	ldw	r4,0(r2)
   82440:	00823bc1 	jmpi	823bc <__srget_r>

00082444 <strlen>:
   82444:	208000cc 	andi	r2,r4,3
   82448:	10002026 	beq	r2,zero,824cc <strlen+0x88>
   8244c:	20800007 	ldb	r2,0(r4)
   82450:	10002026 	beq	r2,zero,824d4 <strlen+0x90>
   82454:	2005883a 	mov	r2,r4
   82458:	00000206 	br	82464 <strlen+0x20>
   8245c:	10c00007 	ldb	r3,0(r2)
   82460:	18001826 	beq	r3,zero,824c4 <strlen+0x80>
   82464:	10800044 	addi	r2,r2,1
   82468:	10c000cc 	andi	r3,r2,3
   8246c:	183ffb1e 	bne	r3,zero,8245c <tx_descriptor+0xfff823fc>
   82470:	10c00017 	ldw	r3,0(r2)
   82474:	01ffbff4 	movhi	r7,65279
   82478:	39ffbfc4 	addi	r7,r7,-257
   8247c:	00ca303a 	nor	r5,zero,r3
   82480:	01a02074 	movhi	r6,32897
   82484:	19c7883a 	add	r3,r3,r7
   82488:	31a02004 	addi	r6,r6,-32640
   8248c:	1946703a 	and	r3,r3,r5
   82490:	1986703a 	and	r3,r3,r6
   82494:	1800091e 	bne	r3,zero,824bc <strlen+0x78>
   82498:	10800104 	addi	r2,r2,4
   8249c:	10c00017 	ldw	r3,0(r2)
   824a0:	19cb883a 	add	r5,r3,r7
   824a4:	00c6303a 	nor	r3,zero,r3
   824a8:	28c6703a 	and	r3,r5,r3
   824ac:	1986703a 	and	r3,r3,r6
   824b0:	183ff926 	beq	r3,zero,82498 <tx_descriptor+0xfff82438>
   824b4:	00000106 	br	824bc <strlen+0x78>
   824b8:	10800044 	addi	r2,r2,1
   824bc:	10c00007 	ldb	r3,0(r2)
   824c0:	183ffd1e 	bne	r3,zero,824b8 <tx_descriptor+0xfff82458>
   824c4:	1105c83a 	sub	r2,r2,r4
   824c8:	f800283a 	ret
   824cc:	2005883a 	mov	r2,r4
   824d0:	003fe706 	br	82470 <tx_descriptor+0xfff82410>
   824d4:	0005883a 	mov	r2,zero
   824d8:	f800283a 	ret

000824dc <__swbuf_r>:
   824dc:	defffb04 	addi	sp,sp,-20
   824e0:	dcc00315 	stw	r19,12(sp)
   824e4:	dc800215 	stw	r18,8(sp)
   824e8:	dc000015 	stw	r16,0(sp)
   824ec:	dfc00415 	stw	ra,16(sp)
   824f0:	dc400115 	stw	r17,4(sp)
   824f4:	2025883a 	mov	r18,r4
   824f8:	2827883a 	mov	r19,r5
   824fc:	3021883a 	mov	r16,r6
   82500:	20000226 	beq	r4,zero,8250c <__swbuf_r+0x30>
   82504:	20800e17 	ldw	r2,56(r4)
   82508:	10004226 	beq	r2,zero,82614 <__swbuf_r+0x138>
   8250c:	80800617 	ldw	r2,24(r16)
   82510:	8100030b 	ldhu	r4,12(r16)
   82514:	80800215 	stw	r2,8(r16)
   82518:	2080020c 	andi	r2,r4,8
   8251c:	10003626 	beq	r2,zero,825f8 <__swbuf_r+0x11c>
   82520:	80c00417 	ldw	r3,16(r16)
   82524:	18003426 	beq	r3,zero,825f8 <__swbuf_r+0x11c>
   82528:	2088000c 	andi	r2,r4,8192
   8252c:	9c403fcc 	andi	r17,r19,255
   82530:	10001a26 	beq	r2,zero,8259c <__swbuf_r+0xc0>
   82534:	80800017 	ldw	r2,0(r16)
   82538:	81000517 	ldw	r4,20(r16)
   8253c:	10c7c83a 	sub	r3,r2,r3
   82540:	1900200e 	bge	r3,r4,825c4 <__swbuf_r+0xe8>
   82544:	18c00044 	addi	r3,r3,1
   82548:	81000217 	ldw	r4,8(r16)
   8254c:	11400044 	addi	r5,r2,1
   82550:	81400015 	stw	r5,0(r16)
   82554:	213fffc4 	addi	r4,r4,-1
   82558:	81000215 	stw	r4,8(r16)
   8255c:	14c00005 	stb	r19,0(r2)
   82560:	80800517 	ldw	r2,20(r16)
   82564:	10c01e26 	beq	r2,r3,825e0 <__swbuf_r+0x104>
   82568:	8080030b 	ldhu	r2,12(r16)
   8256c:	1080004c 	andi	r2,r2,1
   82570:	10000226 	beq	r2,zero,8257c <__swbuf_r+0xa0>
   82574:	00800284 	movi	r2,10
   82578:	88801926 	beq	r17,r2,825e0 <__swbuf_r+0x104>
   8257c:	8805883a 	mov	r2,r17
   82580:	dfc00417 	ldw	ra,16(sp)
   82584:	dcc00317 	ldw	r19,12(sp)
   82588:	dc800217 	ldw	r18,8(sp)
   8258c:	dc400117 	ldw	r17,4(sp)
   82590:	dc000017 	ldw	r16,0(sp)
   82594:	dec00504 	addi	sp,sp,20
   82598:	f800283a 	ret
   8259c:	81401917 	ldw	r5,100(r16)
   825a0:	00b7ffc4 	movi	r2,-8193
   825a4:	21080014 	ori	r4,r4,8192
   825a8:	2884703a 	and	r2,r5,r2
   825ac:	80801915 	stw	r2,100(r16)
   825b0:	80800017 	ldw	r2,0(r16)
   825b4:	8100030d 	sth	r4,12(r16)
   825b8:	81000517 	ldw	r4,20(r16)
   825bc:	10c7c83a 	sub	r3,r2,r3
   825c0:	193fe016 	blt	r3,r4,82544 <tx_descriptor+0xfff824e4>
   825c4:	800b883a 	mov	r5,r16
   825c8:	9009883a 	mov	r4,r18
   825cc:	0082b240 	call	82b24 <_fflush_r>
   825d0:	1000071e 	bne	r2,zero,825f0 <__swbuf_r+0x114>
   825d4:	80800017 	ldw	r2,0(r16)
   825d8:	00c00044 	movi	r3,1
   825dc:	003fda06 	br	82548 <tx_descriptor+0xfff824e8>
   825e0:	800b883a 	mov	r5,r16
   825e4:	9009883a 	mov	r4,r18
   825e8:	0082b240 	call	82b24 <_fflush_r>
   825ec:	103fe326 	beq	r2,zero,8257c <tx_descriptor+0xfff8251c>
   825f0:	00bfffc4 	movi	r2,-1
   825f4:	003fe206 	br	82580 <tx_descriptor+0xfff82520>
   825f8:	800b883a 	mov	r5,r16
   825fc:	9009883a 	mov	r4,r18
   82600:	00826340 	call	82634 <__swsetup_r>
   82604:	103ffa1e 	bne	r2,zero,825f0 <tx_descriptor+0xfff82590>
   82608:	8100030b 	ldhu	r4,12(r16)
   8260c:	80c00417 	ldw	r3,16(r16)
   82610:	003fc506 	br	82528 <tx_descriptor+0xfff824c8>
   82614:	0082f100 	call	82f10 <__sinit>
   82618:	003fbc06 	br	8250c <tx_descriptor+0xfff824ac>

0008261c <__swbuf>:
   8261c:	00800234 	movhi	r2,8
   82620:	109af004 	addi	r2,r2,27584
   82624:	280d883a 	mov	r6,r5
   82628:	200b883a 	mov	r5,r4
   8262c:	11000017 	ldw	r4,0(r2)
   82630:	00824dc1 	jmpi	824dc <__swbuf_r>

00082634 <__swsetup_r>:
   82634:	00800234 	movhi	r2,8
   82638:	defffd04 	addi	sp,sp,-12
   8263c:	109af004 	addi	r2,r2,27584
   82640:	dc400115 	stw	r17,4(sp)
   82644:	2023883a 	mov	r17,r4
   82648:	11000017 	ldw	r4,0(r2)
   8264c:	dc000015 	stw	r16,0(sp)
   82650:	dfc00215 	stw	ra,8(sp)
   82654:	2821883a 	mov	r16,r5
   82658:	20000226 	beq	r4,zero,82664 <__swsetup_r+0x30>
   8265c:	20800e17 	ldw	r2,56(r4)
   82660:	10003126 	beq	r2,zero,82728 <__swsetup_r+0xf4>
   82664:	8080030b 	ldhu	r2,12(r16)
   82668:	10c0020c 	andi	r3,r2,8
   8266c:	1009883a 	mov	r4,r2
   82670:	18000f26 	beq	r3,zero,826b0 <__swsetup_r+0x7c>
   82674:	80c00417 	ldw	r3,16(r16)
   82678:	18001526 	beq	r3,zero,826d0 <__swsetup_r+0x9c>
   8267c:	1100004c 	andi	r4,r2,1
   82680:	20001c1e 	bne	r4,zero,826f4 <__swsetup_r+0xc0>
   82684:	1080008c 	andi	r2,r2,2
   82688:	1000291e 	bne	r2,zero,82730 <__swsetup_r+0xfc>
   8268c:	80800517 	ldw	r2,20(r16)
   82690:	80800215 	stw	r2,8(r16)
   82694:	18001c26 	beq	r3,zero,82708 <__swsetup_r+0xd4>
   82698:	0005883a 	mov	r2,zero
   8269c:	dfc00217 	ldw	ra,8(sp)
   826a0:	dc400117 	ldw	r17,4(sp)
   826a4:	dc000017 	ldw	r16,0(sp)
   826a8:	dec00304 	addi	sp,sp,12
   826ac:	f800283a 	ret
   826b0:	2080040c 	andi	r2,r4,16
   826b4:	10002e26 	beq	r2,zero,82770 <__swsetup_r+0x13c>
   826b8:	2080010c 	andi	r2,r4,4
   826bc:	10001e1e 	bne	r2,zero,82738 <__swsetup_r+0x104>
   826c0:	80c00417 	ldw	r3,16(r16)
   826c4:	20800214 	ori	r2,r4,8
   826c8:	8080030d 	sth	r2,12(r16)
   826cc:	183feb1e 	bne	r3,zero,8267c <tx_descriptor+0xfff8261c>
   826d0:	1100a00c 	andi	r4,r2,640
   826d4:	01408004 	movi	r5,512
   826d8:	217fe826 	beq	r4,r5,8267c <tx_descriptor+0xfff8261c>
   826dc:	800b883a 	mov	r5,r16
   826e0:	8809883a 	mov	r4,r17
   826e4:	008351c0 	call	8351c <__smakebuf_r>
   826e8:	8080030b 	ldhu	r2,12(r16)
   826ec:	80c00417 	ldw	r3,16(r16)
   826f0:	003fe206 	br	8267c <tx_descriptor+0xfff8261c>
   826f4:	80800517 	ldw	r2,20(r16)
   826f8:	80000215 	stw	zero,8(r16)
   826fc:	0085c83a 	sub	r2,zero,r2
   82700:	80800615 	stw	r2,24(r16)
   82704:	183fe41e 	bne	r3,zero,82698 <tx_descriptor+0xfff82638>
   82708:	80c0030b 	ldhu	r3,12(r16)
   8270c:	0005883a 	mov	r2,zero
   82710:	1900200c 	andi	r4,r3,128
   82714:	203fe126 	beq	r4,zero,8269c <tx_descriptor+0xfff8263c>
   82718:	18c01014 	ori	r3,r3,64
   8271c:	80c0030d 	sth	r3,12(r16)
   82720:	00bfffc4 	movi	r2,-1
   82724:	003fdd06 	br	8269c <tx_descriptor+0xfff8263c>
   82728:	0082f100 	call	82f10 <__sinit>
   8272c:	003fcd06 	br	82664 <tx_descriptor+0xfff82604>
   82730:	0005883a 	mov	r2,zero
   82734:	003fd606 	br	82690 <tx_descriptor+0xfff82630>
   82738:	81400c17 	ldw	r5,48(r16)
   8273c:	28000626 	beq	r5,zero,82758 <__swsetup_r+0x124>
   82740:	80801004 	addi	r2,r16,64
   82744:	28800326 	beq	r5,r2,82754 <__swsetup_r+0x120>
   82748:	8809883a 	mov	r4,r17
   8274c:	00830840 	call	83084 <_free_r>
   82750:	8100030b 	ldhu	r4,12(r16)
   82754:	80000c15 	stw	zero,48(r16)
   82758:	80c00417 	ldw	r3,16(r16)
   8275c:	00bff6c4 	movi	r2,-37
   82760:	1108703a 	and	r4,r2,r4
   82764:	80000115 	stw	zero,4(r16)
   82768:	80c00015 	stw	r3,0(r16)
   8276c:	003fd506 	br	826c4 <tx_descriptor+0xfff82664>
   82770:	00800244 	movi	r2,9
   82774:	88800015 	stw	r2,0(r17)
   82778:	20801014 	ori	r2,r4,64
   8277c:	8080030d 	sth	r2,12(r16)
   82780:	00bfffc4 	movi	r2,-1
   82784:	003fc506 	br	8269c <tx_descriptor+0xfff8263c>

00082788 <__call_exitprocs>:
   82788:	defff504 	addi	sp,sp,-44
   8278c:	df000915 	stw	fp,36(sp)
   82790:	dd400615 	stw	r21,24(sp)
   82794:	dc800315 	stw	r18,12(sp)
   82798:	dfc00a15 	stw	ra,40(sp)
   8279c:	ddc00815 	stw	r23,32(sp)
   827a0:	dd800715 	stw	r22,28(sp)
   827a4:	dd000515 	stw	r20,20(sp)
   827a8:	dcc00415 	stw	r19,16(sp)
   827ac:	dc400215 	stw	r17,8(sp)
   827b0:	dc000115 	stw	r16,4(sp)
   827b4:	d9000015 	stw	r4,0(sp)
   827b8:	2839883a 	mov	fp,r5
   827bc:	04800044 	movi	r18,1
   827c0:	057fffc4 	movi	r21,-1
   827c4:	00800234 	movhi	r2,8
   827c8:	109aef04 	addi	r2,r2,27580
   827cc:	12000017 	ldw	r8,0(r2)
   827d0:	45005217 	ldw	r20,328(r8)
   827d4:	44c05204 	addi	r19,r8,328
   827d8:	a0001c26 	beq	r20,zero,8284c <__call_exitprocs+0xc4>
   827dc:	a0800117 	ldw	r2,4(r20)
   827e0:	15ffffc4 	addi	r23,r2,-1
   827e4:	b8000d16 	blt	r23,zero,8281c <__call_exitprocs+0x94>
   827e8:	14000044 	addi	r16,r2,1
   827ec:	8421883a 	add	r16,r16,r16
   827f0:	8421883a 	add	r16,r16,r16
   827f4:	84402004 	addi	r17,r16,128
   827f8:	a463883a 	add	r17,r20,r17
   827fc:	a421883a 	add	r16,r20,r16
   82800:	e0001e26 	beq	fp,zero,8287c <__call_exitprocs+0xf4>
   82804:	80804017 	ldw	r2,256(r16)
   82808:	e0801c26 	beq	fp,r2,8287c <__call_exitprocs+0xf4>
   8280c:	bdffffc4 	addi	r23,r23,-1
   82810:	843fff04 	addi	r16,r16,-4
   82814:	8c7fff04 	addi	r17,r17,-4
   82818:	bd7ff91e 	bne	r23,r21,82800 <tx_descriptor+0xfff827a0>
   8281c:	00800034 	movhi	r2,0
   82820:	10800004 	addi	r2,r2,0
   82824:	10000926 	beq	r2,zero,8284c <__call_exitprocs+0xc4>
   82828:	a0800117 	ldw	r2,4(r20)
   8282c:	1000301e 	bne	r2,zero,828f0 <__call_exitprocs+0x168>
   82830:	a0800017 	ldw	r2,0(r20)
   82834:	10003226 	beq	r2,zero,82900 <__call_exitprocs+0x178>
   82838:	a009883a 	mov	r4,r20
   8283c:	98800015 	stw	r2,0(r19)
   82840:	00000000 	call	0 <__alt_mem_ROM_block>
   82844:	9d000017 	ldw	r20,0(r19)
   82848:	a03fe41e 	bne	r20,zero,827dc <tx_descriptor+0xfff8277c>
   8284c:	dfc00a17 	ldw	ra,40(sp)
   82850:	df000917 	ldw	fp,36(sp)
   82854:	ddc00817 	ldw	r23,32(sp)
   82858:	dd800717 	ldw	r22,28(sp)
   8285c:	dd400617 	ldw	r21,24(sp)
   82860:	dd000517 	ldw	r20,20(sp)
   82864:	dcc00417 	ldw	r19,16(sp)
   82868:	dc800317 	ldw	r18,12(sp)
   8286c:	dc400217 	ldw	r17,8(sp)
   82870:	dc000117 	ldw	r16,4(sp)
   82874:	dec00b04 	addi	sp,sp,44
   82878:	f800283a 	ret
   8287c:	a0800117 	ldw	r2,4(r20)
   82880:	80c00017 	ldw	r3,0(r16)
   82884:	10bfffc4 	addi	r2,r2,-1
   82888:	15c01426 	beq	r2,r23,828dc <__call_exitprocs+0x154>
   8288c:	80000015 	stw	zero,0(r16)
   82890:	183fde26 	beq	r3,zero,8280c <tx_descriptor+0xfff827ac>
   82894:	95c8983a 	sll	r4,r18,r23
   82898:	a0806217 	ldw	r2,392(r20)
   8289c:	a5800117 	ldw	r22,4(r20)
   828a0:	2084703a 	and	r2,r4,r2
   828a4:	10000b26 	beq	r2,zero,828d4 <__call_exitprocs+0x14c>
   828a8:	a0806317 	ldw	r2,396(r20)
   828ac:	2088703a 	and	r4,r4,r2
   828b0:	20000c1e 	bne	r4,zero,828e4 <__call_exitprocs+0x15c>
   828b4:	89400017 	ldw	r5,0(r17)
   828b8:	d9000017 	ldw	r4,0(sp)
   828bc:	183ee83a 	callr	r3
   828c0:	a0800117 	ldw	r2,4(r20)
   828c4:	15bfbf1e 	bne	r2,r22,827c4 <tx_descriptor+0xfff82764>
   828c8:	98800017 	ldw	r2,0(r19)
   828cc:	153fcf26 	beq	r2,r20,8280c <tx_descriptor+0xfff827ac>
   828d0:	003fbc06 	br	827c4 <tx_descriptor+0xfff82764>
   828d4:	183ee83a 	callr	r3
   828d8:	003ff906 	br	828c0 <tx_descriptor+0xfff82860>
   828dc:	a5c00115 	stw	r23,4(r20)
   828e0:	003feb06 	br	82890 <tx_descriptor+0xfff82830>
   828e4:	89000017 	ldw	r4,0(r17)
   828e8:	183ee83a 	callr	r3
   828ec:	003ff406 	br	828c0 <tx_descriptor+0xfff82860>
   828f0:	a0800017 	ldw	r2,0(r20)
   828f4:	a027883a 	mov	r19,r20
   828f8:	1029883a 	mov	r20,r2
   828fc:	003fb606 	br	827d8 <tx_descriptor+0xfff82778>
   82900:	0005883a 	mov	r2,zero
   82904:	003ffb06 	br	828f4 <tx_descriptor+0xfff82894>

00082908 <__sflush_r>:
   82908:	2880030b 	ldhu	r2,12(r5)
   8290c:	defffb04 	addi	sp,sp,-20
   82910:	dcc00315 	stw	r19,12(sp)
   82914:	dc400115 	stw	r17,4(sp)
   82918:	dfc00415 	stw	ra,16(sp)
   8291c:	dc800215 	stw	r18,8(sp)
   82920:	dc000015 	stw	r16,0(sp)
   82924:	10c0020c 	andi	r3,r2,8
   82928:	2823883a 	mov	r17,r5
   8292c:	2027883a 	mov	r19,r4
   82930:	1800311e 	bne	r3,zero,829f8 <__sflush_r+0xf0>
   82934:	28c00117 	ldw	r3,4(r5)
   82938:	10820014 	ori	r2,r2,2048
   8293c:	2880030d 	sth	r2,12(r5)
   82940:	00c04b0e 	bge	zero,r3,82a70 <__sflush_r+0x168>
   82944:	8a000a17 	ldw	r8,40(r17)
   82948:	40002326 	beq	r8,zero,829d8 <__sflush_r+0xd0>
   8294c:	9c000017 	ldw	r16,0(r19)
   82950:	10c4000c 	andi	r3,r2,4096
   82954:	98000015 	stw	zero,0(r19)
   82958:	18004826 	beq	r3,zero,82a7c <__sflush_r+0x174>
   8295c:	89801417 	ldw	r6,80(r17)
   82960:	10c0010c 	andi	r3,r2,4
   82964:	18000626 	beq	r3,zero,82980 <__sflush_r+0x78>
   82968:	88c00117 	ldw	r3,4(r17)
   8296c:	88800c17 	ldw	r2,48(r17)
   82970:	30cdc83a 	sub	r6,r6,r3
   82974:	10000226 	beq	r2,zero,82980 <__sflush_r+0x78>
   82978:	88800f17 	ldw	r2,60(r17)
   8297c:	308dc83a 	sub	r6,r6,r2
   82980:	89400717 	ldw	r5,28(r17)
   82984:	000f883a 	mov	r7,zero
   82988:	9809883a 	mov	r4,r19
   8298c:	403ee83a 	callr	r8
   82990:	00ffffc4 	movi	r3,-1
   82994:	10c04426 	beq	r2,r3,82aa8 <__sflush_r+0x1a0>
   82998:	88c0030b 	ldhu	r3,12(r17)
   8299c:	89000417 	ldw	r4,16(r17)
   829a0:	88000115 	stw	zero,4(r17)
   829a4:	197dffcc 	andi	r5,r3,63487
   829a8:	8940030d 	sth	r5,12(r17)
   829ac:	89000015 	stw	r4,0(r17)
   829b0:	18c4000c 	andi	r3,r3,4096
   829b4:	18002c1e 	bne	r3,zero,82a68 <__sflush_r+0x160>
   829b8:	89400c17 	ldw	r5,48(r17)
   829bc:	9c000015 	stw	r16,0(r19)
   829c0:	28000526 	beq	r5,zero,829d8 <__sflush_r+0xd0>
   829c4:	88801004 	addi	r2,r17,64
   829c8:	28800226 	beq	r5,r2,829d4 <__sflush_r+0xcc>
   829cc:	9809883a 	mov	r4,r19
   829d0:	00830840 	call	83084 <_free_r>
   829d4:	88000c15 	stw	zero,48(r17)
   829d8:	0005883a 	mov	r2,zero
   829dc:	dfc00417 	ldw	ra,16(sp)
   829e0:	dcc00317 	ldw	r19,12(sp)
   829e4:	dc800217 	ldw	r18,8(sp)
   829e8:	dc400117 	ldw	r17,4(sp)
   829ec:	dc000017 	ldw	r16,0(sp)
   829f0:	dec00504 	addi	sp,sp,20
   829f4:	f800283a 	ret
   829f8:	2c800417 	ldw	r18,16(r5)
   829fc:	903ff626 	beq	r18,zero,829d8 <tx_descriptor+0xfff82978>
   82a00:	2c000017 	ldw	r16,0(r5)
   82a04:	108000cc 	andi	r2,r2,3
   82a08:	2c800015 	stw	r18,0(r5)
   82a0c:	84a1c83a 	sub	r16,r16,r18
   82a10:	1000131e 	bne	r2,zero,82a60 <__sflush_r+0x158>
   82a14:	28800517 	ldw	r2,20(r5)
   82a18:	88800215 	stw	r2,8(r17)
   82a1c:	04000316 	blt	zero,r16,82a2c <__sflush_r+0x124>
   82a20:	003fed06 	br	829d8 <tx_descriptor+0xfff82978>
   82a24:	90a5883a 	add	r18,r18,r2
   82a28:	043feb0e 	bge	zero,r16,829d8 <tx_descriptor+0xfff82978>
   82a2c:	88800917 	ldw	r2,36(r17)
   82a30:	89400717 	ldw	r5,28(r17)
   82a34:	800f883a 	mov	r7,r16
   82a38:	900d883a 	mov	r6,r18
   82a3c:	9809883a 	mov	r4,r19
   82a40:	103ee83a 	callr	r2
   82a44:	80a1c83a 	sub	r16,r16,r2
   82a48:	00bff616 	blt	zero,r2,82a24 <tx_descriptor+0xfff829c4>
   82a4c:	88c0030b 	ldhu	r3,12(r17)
   82a50:	00bfffc4 	movi	r2,-1
   82a54:	18c01014 	ori	r3,r3,64
   82a58:	88c0030d 	sth	r3,12(r17)
   82a5c:	003fdf06 	br	829dc <tx_descriptor+0xfff8297c>
   82a60:	0005883a 	mov	r2,zero
   82a64:	003fec06 	br	82a18 <tx_descriptor+0xfff829b8>
   82a68:	88801415 	stw	r2,80(r17)
   82a6c:	003fd206 	br	829b8 <tx_descriptor+0xfff82958>
   82a70:	28c00f17 	ldw	r3,60(r5)
   82a74:	00ffb316 	blt	zero,r3,82944 <tx_descriptor+0xfff828e4>
   82a78:	003fd706 	br	829d8 <tx_descriptor+0xfff82978>
   82a7c:	89400717 	ldw	r5,28(r17)
   82a80:	000d883a 	mov	r6,zero
   82a84:	01c00044 	movi	r7,1
   82a88:	9809883a 	mov	r4,r19
   82a8c:	403ee83a 	callr	r8
   82a90:	100d883a 	mov	r6,r2
   82a94:	00bfffc4 	movi	r2,-1
   82a98:	30801426 	beq	r6,r2,82aec <__sflush_r+0x1e4>
   82a9c:	8880030b 	ldhu	r2,12(r17)
   82aa0:	8a000a17 	ldw	r8,40(r17)
   82aa4:	003fae06 	br	82960 <tx_descriptor+0xfff82900>
   82aa8:	98c00017 	ldw	r3,0(r19)
   82aac:	183fba26 	beq	r3,zero,82998 <tx_descriptor+0xfff82938>
   82ab0:	01000744 	movi	r4,29
   82ab4:	19000626 	beq	r3,r4,82ad0 <__sflush_r+0x1c8>
   82ab8:	01000584 	movi	r4,22
   82abc:	19000426 	beq	r3,r4,82ad0 <__sflush_r+0x1c8>
   82ac0:	88c0030b 	ldhu	r3,12(r17)
   82ac4:	18c01014 	ori	r3,r3,64
   82ac8:	88c0030d 	sth	r3,12(r17)
   82acc:	003fc306 	br	829dc <tx_descriptor+0xfff8297c>
   82ad0:	8880030b 	ldhu	r2,12(r17)
   82ad4:	88c00417 	ldw	r3,16(r17)
   82ad8:	88000115 	stw	zero,4(r17)
   82adc:	10bdffcc 	andi	r2,r2,63487
   82ae0:	8880030d 	sth	r2,12(r17)
   82ae4:	88c00015 	stw	r3,0(r17)
   82ae8:	003fb306 	br	829b8 <tx_descriptor+0xfff82958>
   82aec:	98800017 	ldw	r2,0(r19)
   82af0:	103fea26 	beq	r2,zero,82a9c <tx_descriptor+0xfff82a3c>
   82af4:	00c00744 	movi	r3,29
   82af8:	10c00226 	beq	r2,r3,82b04 <__sflush_r+0x1fc>
   82afc:	00c00584 	movi	r3,22
   82b00:	10c0031e 	bne	r2,r3,82b10 <__sflush_r+0x208>
   82b04:	9c000015 	stw	r16,0(r19)
   82b08:	0005883a 	mov	r2,zero
   82b0c:	003fb306 	br	829dc <tx_descriptor+0xfff8297c>
   82b10:	88c0030b 	ldhu	r3,12(r17)
   82b14:	3005883a 	mov	r2,r6
   82b18:	18c01014 	ori	r3,r3,64
   82b1c:	88c0030d 	sth	r3,12(r17)
   82b20:	003fae06 	br	829dc <tx_descriptor+0xfff8297c>

00082b24 <_fflush_r>:
   82b24:	defffd04 	addi	sp,sp,-12
   82b28:	dc000115 	stw	r16,4(sp)
   82b2c:	dfc00215 	stw	ra,8(sp)
   82b30:	2021883a 	mov	r16,r4
   82b34:	20000226 	beq	r4,zero,82b40 <_fflush_r+0x1c>
   82b38:	20800e17 	ldw	r2,56(r4)
   82b3c:	10000c26 	beq	r2,zero,82b70 <_fflush_r+0x4c>
   82b40:	2880030f 	ldh	r2,12(r5)
   82b44:	1000051e 	bne	r2,zero,82b5c <_fflush_r+0x38>
   82b48:	0005883a 	mov	r2,zero
   82b4c:	dfc00217 	ldw	ra,8(sp)
   82b50:	dc000117 	ldw	r16,4(sp)
   82b54:	dec00304 	addi	sp,sp,12
   82b58:	f800283a 	ret
   82b5c:	8009883a 	mov	r4,r16
   82b60:	dfc00217 	ldw	ra,8(sp)
   82b64:	dc000117 	ldw	r16,4(sp)
   82b68:	dec00304 	addi	sp,sp,12
   82b6c:	00829081 	jmpi	82908 <__sflush_r>
   82b70:	d9400015 	stw	r5,0(sp)
   82b74:	0082f100 	call	82f10 <__sinit>
   82b78:	d9400017 	ldw	r5,0(sp)
   82b7c:	003ff006 	br	82b40 <tx_descriptor+0xfff82ae0>

00082b80 <fflush>:
   82b80:	20000526 	beq	r4,zero,82b98 <fflush+0x18>
   82b84:	00800234 	movhi	r2,8
   82b88:	109af004 	addi	r2,r2,27584
   82b8c:	200b883a 	mov	r5,r4
   82b90:	11000017 	ldw	r4,0(r2)
   82b94:	0082b241 	jmpi	82b24 <_fflush_r>
   82b98:	00800234 	movhi	r2,8
   82b9c:	109aef04 	addi	r2,r2,27580
   82ba0:	11000017 	ldw	r4,0(r2)
   82ba4:	01400234 	movhi	r5,8
   82ba8:	294ac904 	addi	r5,r5,11044
   82bac:	00834581 	jmpi	83458 <_fwalk_reent>

00082bb0 <__fp_unlock>:
   82bb0:	0005883a 	mov	r2,zero
   82bb4:	f800283a 	ret

00082bb8 <_cleanup_r>:
   82bb8:	01400234 	movhi	r5,8
   82bbc:	29511004 	addi	r5,r5,17472
   82bc0:	00834581 	jmpi	83458 <_fwalk_reent>

00082bc4 <__sinit.part.1>:
   82bc4:	defff704 	addi	sp,sp,-36
   82bc8:	00c00234 	movhi	r3,8
   82bcc:	dfc00815 	stw	ra,32(sp)
   82bd0:	ddc00715 	stw	r23,28(sp)
   82bd4:	dd800615 	stw	r22,24(sp)
   82bd8:	dd400515 	stw	r21,20(sp)
   82bdc:	dd000415 	stw	r20,16(sp)
   82be0:	dcc00315 	stw	r19,12(sp)
   82be4:	dc800215 	stw	r18,8(sp)
   82be8:	dc400115 	stw	r17,4(sp)
   82bec:	dc000015 	stw	r16,0(sp)
   82bf0:	18caee04 	addi	r3,r3,11192
   82bf4:	24000117 	ldw	r16,4(r4)
   82bf8:	20c00f15 	stw	r3,60(r4)
   82bfc:	2080bb04 	addi	r2,r4,748
   82c00:	00c000c4 	movi	r3,3
   82c04:	20c0b915 	stw	r3,740(r4)
   82c08:	2080ba15 	stw	r2,744(r4)
   82c0c:	2000b815 	stw	zero,736(r4)
   82c10:	05c00204 	movi	r23,8
   82c14:	00800104 	movi	r2,4
   82c18:	2025883a 	mov	r18,r4
   82c1c:	b80d883a 	mov	r6,r23
   82c20:	81001704 	addi	r4,r16,92
   82c24:	000b883a 	mov	r5,zero
   82c28:	80000015 	stw	zero,0(r16)
   82c2c:	80000115 	stw	zero,4(r16)
   82c30:	80000215 	stw	zero,8(r16)
   82c34:	8080030d 	sth	r2,12(r16)
   82c38:	80001915 	stw	zero,100(r16)
   82c3c:	8000038d 	sth	zero,14(r16)
   82c40:	80000415 	stw	zero,16(r16)
   82c44:	80000515 	stw	zero,20(r16)
   82c48:	80000615 	stw	zero,24(r16)
   82c4c:	0083ee40 	call	83ee4 <memset>
   82c50:	05800234 	movhi	r22,8
   82c54:	94400217 	ldw	r17,8(r18)
   82c58:	05400234 	movhi	r21,8
   82c5c:	05000234 	movhi	r20,8
   82c60:	04c00234 	movhi	r19,8
   82c64:	b5909404 	addi	r22,r22,16976
   82c68:	ad50ab04 	addi	r21,r21,17068
   82c6c:	a510ca04 	addi	r20,r20,17192
   82c70:	9cd0e104 	addi	r19,r19,17284
   82c74:	85800815 	stw	r22,32(r16)
   82c78:	85400915 	stw	r21,36(r16)
   82c7c:	85000a15 	stw	r20,40(r16)
   82c80:	84c00b15 	stw	r19,44(r16)
   82c84:	84000715 	stw	r16,28(r16)
   82c88:	00800284 	movi	r2,10
   82c8c:	8880030d 	sth	r2,12(r17)
   82c90:	00800044 	movi	r2,1
   82c94:	b80d883a 	mov	r6,r23
   82c98:	89001704 	addi	r4,r17,92
   82c9c:	000b883a 	mov	r5,zero
   82ca0:	88000015 	stw	zero,0(r17)
   82ca4:	88000115 	stw	zero,4(r17)
   82ca8:	88000215 	stw	zero,8(r17)
   82cac:	88001915 	stw	zero,100(r17)
   82cb0:	8880038d 	sth	r2,14(r17)
   82cb4:	88000415 	stw	zero,16(r17)
   82cb8:	88000515 	stw	zero,20(r17)
   82cbc:	88000615 	stw	zero,24(r17)
   82cc0:	0083ee40 	call	83ee4 <memset>
   82cc4:	94000317 	ldw	r16,12(r18)
   82cc8:	00800484 	movi	r2,18
   82ccc:	8c400715 	stw	r17,28(r17)
   82cd0:	8d800815 	stw	r22,32(r17)
   82cd4:	8d400915 	stw	r21,36(r17)
   82cd8:	8d000a15 	stw	r20,40(r17)
   82cdc:	8cc00b15 	stw	r19,44(r17)
   82ce0:	8080030d 	sth	r2,12(r16)
   82ce4:	00800084 	movi	r2,2
   82ce8:	80000015 	stw	zero,0(r16)
   82cec:	80000115 	stw	zero,4(r16)
   82cf0:	80000215 	stw	zero,8(r16)
   82cf4:	80001915 	stw	zero,100(r16)
   82cf8:	8080038d 	sth	r2,14(r16)
   82cfc:	80000415 	stw	zero,16(r16)
   82d00:	80000515 	stw	zero,20(r16)
   82d04:	80000615 	stw	zero,24(r16)
   82d08:	b80d883a 	mov	r6,r23
   82d0c:	000b883a 	mov	r5,zero
   82d10:	81001704 	addi	r4,r16,92
   82d14:	0083ee40 	call	83ee4 <memset>
   82d18:	00800044 	movi	r2,1
   82d1c:	84000715 	stw	r16,28(r16)
   82d20:	85800815 	stw	r22,32(r16)
   82d24:	85400915 	stw	r21,36(r16)
   82d28:	85000a15 	stw	r20,40(r16)
   82d2c:	84c00b15 	stw	r19,44(r16)
   82d30:	90800e15 	stw	r2,56(r18)
   82d34:	dfc00817 	ldw	ra,32(sp)
   82d38:	ddc00717 	ldw	r23,28(sp)
   82d3c:	dd800617 	ldw	r22,24(sp)
   82d40:	dd400517 	ldw	r21,20(sp)
   82d44:	dd000417 	ldw	r20,16(sp)
   82d48:	dcc00317 	ldw	r19,12(sp)
   82d4c:	dc800217 	ldw	r18,8(sp)
   82d50:	dc400117 	ldw	r17,4(sp)
   82d54:	dc000017 	ldw	r16,0(sp)
   82d58:	dec00904 	addi	sp,sp,36
   82d5c:	f800283a 	ret

00082d60 <__fp_lock>:
   82d60:	0005883a 	mov	r2,zero
   82d64:	f800283a 	ret

00082d68 <__sfmoreglue>:
   82d68:	defffc04 	addi	sp,sp,-16
   82d6c:	dc800215 	stw	r18,8(sp)
   82d70:	2825883a 	mov	r18,r5
   82d74:	dc000015 	stw	r16,0(sp)
   82d78:	01401a04 	movi	r5,104
   82d7c:	2021883a 	mov	r16,r4
   82d80:	913fffc4 	addi	r4,r18,-1
   82d84:	dfc00315 	stw	ra,12(sp)
   82d88:	dc400115 	stw	r17,4(sp)
   82d8c:	00846b40 	call	846b4 <__mulsi3>
   82d90:	8009883a 	mov	r4,r16
   82d94:	11401d04 	addi	r5,r2,116
   82d98:	1023883a 	mov	r17,r2
   82d9c:	00836d80 	call	836d8 <_malloc_r>
   82da0:	1021883a 	mov	r16,r2
   82da4:	10000726 	beq	r2,zero,82dc4 <__sfmoreglue+0x5c>
   82da8:	11000304 	addi	r4,r2,12
   82dac:	10000015 	stw	zero,0(r2)
   82db0:	14800115 	stw	r18,4(r2)
   82db4:	11000215 	stw	r4,8(r2)
   82db8:	89801a04 	addi	r6,r17,104
   82dbc:	000b883a 	mov	r5,zero
   82dc0:	0083ee40 	call	83ee4 <memset>
   82dc4:	8005883a 	mov	r2,r16
   82dc8:	dfc00317 	ldw	ra,12(sp)
   82dcc:	dc800217 	ldw	r18,8(sp)
   82dd0:	dc400117 	ldw	r17,4(sp)
   82dd4:	dc000017 	ldw	r16,0(sp)
   82dd8:	dec00404 	addi	sp,sp,16
   82ddc:	f800283a 	ret

00082de0 <__sfp>:
   82de0:	defffb04 	addi	sp,sp,-20
   82de4:	dc000015 	stw	r16,0(sp)
   82de8:	04000234 	movhi	r16,8
   82dec:	841aef04 	addi	r16,r16,27580
   82df0:	dcc00315 	stw	r19,12(sp)
   82df4:	2027883a 	mov	r19,r4
   82df8:	81000017 	ldw	r4,0(r16)
   82dfc:	dfc00415 	stw	ra,16(sp)
   82e00:	dc800215 	stw	r18,8(sp)
   82e04:	20800e17 	ldw	r2,56(r4)
   82e08:	dc400115 	stw	r17,4(sp)
   82e0c:	1000021e 	bne	r2,zero,82e18 <__sfp+0x38>
   82e10:	0082bc40 	call	82bc4 <__sinit.part.1>
   82e14:	81000017 	ldw	r4,0(r16)
   82e18:	2480b804 	addi	r18,r4,736
   82e1c:	047fffc4 	movi	r17,-1
   82e20:	91000117 	ldw	r4,4(r18)
   82e24:	94000217 	ldw	r16,8(r18)
   82e28:	213fffc4 	addi	r4,r4,-1
   82e2c:	20000a16 	blt	r4,zero,82e58 <__sfp+0x78>
   82e30:	8080030f 	ldh	r2,12(r16)
   82e34:	10000c26 	beq	r2,zero,82e68 <__sfp+0x88>
   82e38:	80c01d04 	addi	r3,r16,116
   82e3c:	00000206 	br	82e48 <__sfp+0x68>
   82e40:	18bfe60f 	ldh	r2,-104(r3)
   82e44:	10000826 	beq	r2,zero,82e68 <__sfp+0x88>
   82e48:	213fffc4 	addi	r4,r4,-1
   82e4c:	1c3ffd04 	addi	r16,r3,-12
   82e50:	18c01a04 	addi	r3,r3,104
   82e54:	247ffa1e 	bne	r4,r17,82e40 <tx_descriptor+0xfff82de0>
   82e58:	90800017 	ldw	r2,0(r18)
   82e5c:	10001d26 	beq	r2,zero,82ed4 <__sfp+0xf4>
   82e60:	1025883a 	mov	r18,r2
   82e64:	003fee06 	br	82e20 <tx_descriptor+0xfff82dc0>
   82e68:	00bfffc4 	movi	r2,-1
   82e6c:	8080038d 	sth	r2,14(r16)
   82e70:	00800044 	movi	r2,1
   82e74:	8080030d 	sth	r2,12(r16)
   82e78:	80001915 	stw	zero,100(r16)
   82e7c:	80000015 	stw	zero,0(r16)
   82e80:	80000215 	stw	zero,8(r16)
   82e84:	80000115 	stw	zero,4(r16)
   82e88:	80000415 	stw	zero,16(r16)
   82e8c:	80000515 	stw	zero,20(r16)
   82e90:	80000615 	stw	zero,24(r16)
   82e94:	01800204 	movi	r6,8
   82e98:	000b883a 	mov	r5,zero
   82e9c:	81001704 	addi	r4,r16,92
   82ea0:	0083ee40 	call	83ee4 <memset>
   82ea4:	8005883a 	mov	r2,r16
   82ea8:	80000c15 	stw	zero,48(r16)
   82eac:	80000d15 	stw	zero,52(r16)
   82eb0:	80001115 	stw	zero,68(r16)
   82eb4:	80001215 	stw	zero,72(r16)
   82eb8:	dfc00417 	ldw	ra,16(sp)
   82ebc:	dcc00317 	ldw	r19,12(sp)
   82ec0:	dc800217 	ldw	r18,8(sp)
   82ec4:	dc400117 	ldw	r17,4(sp)
   82ec8:	dc000017 	ldw	r16,0(sp)
   82ecc:	dec00504 	addi	sp,sp,20
   82ed0:	f800283a 	ret
   82ed4:	01400104 	movi	r5,4
   82ed8:	9809883a 	mov	r4,r19
   82edc:	0082d680 	call	82d68 <__sfmoreglue>
   82ee0:	90800015 	stw	r2,0(r18)
   82ee4:	103fde1e 	bne	r2,zero,82e60 <tx_descriptor+0xfff82e00>
   82ee8:	00800304 	movi	r2,12
   82eec:	98800015 	stw	r2,0(r19)
   82ef0:	0005883a 	mov	r2,zero
   82ef4:	003ff006 	br	82eb8 <tx_descriptor+0xfff82e58>

00082ef8 <_cleanup>:
   82ef8:	00800234 	movhi	r2,8
   82efc:	109aef04 	addi	r2,r2,27580
   82f00:	11000017 	ldw	r4,0(r2)
   82f04:	01400234 	movhi	r5,8
   82f08:	29511004 	addi	r5,r5,17472
   82f0c:	00834581 	jmpi	83458 <_fwalk_reent>

00082f10 <__sinit>:
   82f10:	20800e17 	ldw	r2,56(r4)
   82f14:	10000126 	beq	r2,zero,82f1c <__sinit+0xc>
   82f18:	f800283a 	ret
   82f1c:	0082bc41 	jmpi	82bc4 <__sinit.part.1>

00082f20 <__sfp_lock_acquire>:
   82f20:	f800283a 	ret

00082f24 <__sfp_lock_release>:
   82f24:	f800283a 	ret

00082f28 <__sinit_lock_acquire>:
   82f28:	f800283a 	ret

00082f2c <__sinit_lock_release>:
   82f2c:	f800283a 	ret

00082f30 <__fp_lock_all>:
   82f30:	00800234 	movhi	r2,8
   82f34:	109af004 	addi	r2,r2,27584
   82f38:	11000017 	ldw	r4,0(r2)
   82f3c:	01400234 	movhi	r5,8
   82f40:	294b5804 	addi	r5,r5,11616
   82f44:	00833941 	jmpi	83394 <_fwalk>

00082f48 <__fp_unlock_all>:
   82f48:	00800234 	movhi	r2,8
   82f4c:	109af004 	addi	r2,r2,27584
   82f50:	11000017 	ldw	r4,0(r2)
   82f54:	01400234 	movhi	r5,8
   82f58:	294aec04 	addi	r5,r5,11184
   82f5c:	00833941 	jmpi	83394 <_fwalk>

00082f60 <_malloc_trim_r>:
   82f60:	defffb04 	addi	sp,sp,-20
   82f64:	dcc00315 	stw	r19,12(sp)
   82f68:	04c00234 	movhi	r19,8
   82f6c:	dc800215 	stw	r18,8(sp)
   82f70:	dc400115 	stw	r17,4(sp)
   82f74:	dc000015 	stw	r16,0(sp)
   82f78:	dfc00415 	stw	ra,16(sp)
   82f7c:	2821883a 	mov	r16,r5
   82f80:	9cd9e204 	addi	r19,r19,26504
   82f84:	2025883a 	mov	r18,r4
   82f88:	008491c0 	call	8491c <__malloc_lock>
   82f8c:	98800217 	ldw	r2,8(r19)
   82f90:	14400117 	ldw	r17,4(r2)
   82f94:	00bfff04 	movi	r2,-4
   82f98:	88a2703a 	and	r17,r17,r2
   82f9c:	8c21c83a 	sub	r16,r17,r16
   82fa0:	8403fbc4 	addi	r16,r16,4079
   82fa4:	8020d33a 	srli	r16,r16,12
   82fa8:	0083ffc4 	movi	r2,4095
   82fac:	843fffc4 	addi	r16,r16,-1
   82fb0:	8020933a 	slli	r16,r16,12
   82fb4:	1400060e 	bge	r2,r16,82fd0 <_malloc_trim_r+0x70>
   82fb8:	000b883a 	mov	r5,zero
   82fbc:	9009883a 	mov	r4,r18
   82fc0:	00841fc0 	call	841fc <_sbrk_r>
   82fc4:	98c00217 	ldw	r3,8(r19)
   82fc8:	1c47883a 	add	r3,r3,r17
   82fcc:	10c00a26 	beq	r2,r3,82ff8 <_malloc_trim_r+0x98>
   82fd0:	9009883a 	mov	r4,r18
   82fd4:	00849200 	call	84920 <__malloc_unlock>
   82fd8:	0005883a 	mov	r2,zero
   82fdc:	dfc00417 	ldw	ra,16(sp)
   82fe0:	dcc00317 	ldw	r19,12(sp)
   82fe4:	dc800217 	ldw	r18,8(sp)
   82fe8:	dc400117 	ldw	r17,4(sp)
   82fec:	dc000017 	ldw	r16,0(sp)
   82ff0:	dec00504 	addi	sp,sp,20
   82ff4:	f800283a 	ret
   82ff8:	040bc83a 	sub	r5,zero,r16
   82ffc:	9009883a 	mov	r4,r18
   83000:	00841fc0 	call	841fc <_sbrk_r>
   83004:	00ffffc4 	movi	r3,-1
   83008:	10c00d26 	beq	r2,r3,83040 <_malloc_trim_r+0xe0>
   8300c:	00c00274 	movhi	r3,9
   83010:	18e3b704 	addi	r3,r3,-28964
   83014:	18800017 	ldw	r2,0(r3)
   83018:	99000217 	ldw	r4,8(r19)
   8301c:	8c23c83a 	sub	r17,r17,r16
   83020:	8c400054 	ori	r17,r17,1
   83024:	1421c83a 	sub	r16,r2,r16
   83028:	24400115 	stw	r17,4(r4)
   8302c:	9009883a 	mov	r4,r18
   83030:	1c000015 	stw	r16,0(r3)
   83034:	00849200 	call	84920 <__malloc_unlock>
   83038:	00800044 	movi	r2,1
   8303c:	003fe706 	br	82fdc <tx_descriptor+0xfff82f7c>
   83040:	000b883a 	mov	r5,zero
   83044:	9009883a 	mov	r4,r18
   83048:	00841fc0 	call	841fc <_sbrk_r>
   8304c:	99000217 	ldw	r4,8(r19)
   83050:	014003c4 	movi	r5,15
   83054:	1107c83a 	sub	r3,r2,r4
   83058:	28ffdd0e 	bge	r5,r3,82fd0 <tx_descriptor+0xfff82f70>
   8305c:	01400234 	movhi	r5,8
   83060:	295af104 	addi	r5,r5,27588
   83064:	29400017 	ldw	r5,0(r5)
   83068:	18c00054 	ori	r3,r3,1
   8306c:	20c00115 	stw	r3,4(r4)
   83070:	00c00274 	movhi	r3,9
   83074:	1145c83a 	sub	r2,r2,r5
   83078:	18e3b704 	addi	r3,r3,-28964
   8307c:	18800015 	stw	r2,0(r3)
   83080:	003fd306 	br	82fd0 <tx_descriptor+0xfff82f70>

00083084 <_free_r>:
   83084:	28004126 	beq	r5,zero,8318c <_free_r+0x108>
   83088:	defffd04 	addi	sp,sp,-12
   8308c:	dc400115 	stw	r17,4(sp)
   83090:	dc000015 	stw	r16,0(sp)
   83094:	2023883a 	mov	r17,r4
   83098:	2821883a 	mov	r16,r5
   8309c:	dfc00215 	stw	ra,8(sp)
   830a0:	008491c0 	call	8491c <__malloc_lock>
   830a4:	81ffff17 	ldw	r7,-4(r16)
   830a8:	00bfff84 	movi	r2,-2
   830ac:	01000234 	movhi	r4,8
   830b0:	81bffe04 	addi	r6,r16,-8
   830b4:	3884703a 	and	r2,r7,r2
   830b8:	2119e204 	addi	r4,r4,26504
   830bc:	308b883a 	add	r5,r6,r2
   830c0:	2a400117 	ldw	r9,4(r5)
   830c4:	22000217 	ldw	r8,8(r4)
   830c8:	00ffff04 	movi	r3,-4
   830cc:	48c6703a 	and	r3,r9,r3
   830d0:	2a005726 	beq	r5,r8,83230 <_free_r+0x1ac>
   830d4:	28c00115 	stw	r3,4(r5)
   830d8:	39c0004c 	andi	r7,r7,1
   830dc:	3800091e 	bne	r7,zero,83104 <_free_r+0x80>
   830e0:	823ffe17 	ldw	r8,-8(r16)
   830e4:	22400204 	addi	r9,r4,8
   830e8:	320dc83a 	sub	r6,r6,r8
   830ec:	31c00217 	ldw	r7,8(r6)
   830f0:	1205883a 	add	r2,r2,r8
   830f4:	3a406526 	beq	r7,r9,8328c <_free_r+0x208>
   830f8:	32000317 	ldw	r8,12(r6)
   830fc:	3a000315 	stw	r8,12(r7)
   83100:	41c00215 	stw	r7,8(r8)
   83104:	28cf883a 	add	r7,r5,r3
   83108:	39c00117 	ldw	r7,4(r7)
   8310c:	39c0004c 	andi	r7,r7,1
   83110:	38003a26 	beq	r7,zero,831fc <_free_r+0x178>
   83114:	10c00054 	ori	r3,r2,1
   83118:	30c00115 	stw	r3,4(r6)
   8311c:	3087883a 	add	r3,r6,r2
   83120:	18800015 	stw	r2,0(r3)
   83124:	00c07fc4 	movi	r3,511
   83128:	18801936 	bltu	r3,r2,83190 <_free_r+0x10c>
   8312c:	1004d0fa 	srli	r2,r2,3
   83130:	01c00044 	movi	r7,1
   83134:	21400117 	ldw	r5,4(r4)
   83138:	10c00044 	addi	r3,r2,1
   8313c:	18c7883a 	add	r3,r3,r3
   83140:	1005d0ba 	srai	r2,r2,2
   83144:	18c7883a 	add	r3,r3,r3
   83148:	18c7883a 	add	r3,r3,r3
   8314c:	1907883a 	add	r3,r3,r4
   83150:	3884983a 	sll	r2,r7,r2
   83154:	19c00017 	ldw	r7,0(r3)
   83158:	1a3ffe04 	addi	r8,r3,-8
   8315c:	1144b03a 	or	r2,r2,r5
   83160:	32000315 	stw	r8,12(r6)
   83164:	31c00215 	stw	r7,8(r6)
   83168:	20800115 	stw	r2,4(r4)
   8316c:	19800015 	stw	r6,0(r3)
   83170:	39800315 	stw	r6,12(r7)
   83174:	8809883a 	mov	r4,r17
   83178:	dfc00217 	ldw	ra,8(sp)
   8317c:	dc400117 	ldw	r17,4(sp)
   83180:	dc000017 	ldw	r16,0(sp)
   83184:	dec00304 	addi	sp,sp,12
   83188:	00849201 	jmpi	84920 <__malloc_unlock>
   8318c:	f800283a 	ret
   83190:	100ad27a 	srli	r5,r2,9
   83194:	00c00104 	movi	r3,4
   83198:	19404a36 	bltu	r3,r5,832c4 <_free_r+0x240>
   8319c:	100ad1ba 	srli	r5,r2,6
   831a0:	28c00e44 	addi	r3,r5,57
   831a4:	18c7883a 	add	r3,r3,r3
   831a8:	29400e04 	addi	r5,r5,56
   831ac:	18c7883a 	add	r3,r3,r3
   831b0:	18c7883a 	add	r3,r3,r3
   831b4:	1909883a 	add	r4,r3,r4
   831b8:	20c00017 	ldw	r3,0(r4)
   831bc:	01c00234 	movhi	r7,8
   831c0:	213ffe04 	addi	r4,r4,-8
   831c4:	39d9e204 	addi	r7,r7,26504
   831c8:	20c04426 	beq	r4,r3,832dc <_free_r+0x258>
   831cc:	01ffff04 	movi	r7,-4
   831d0:	19400117 	ldw	r5,4(r3)
   831d4:	29ca703a 	and	r5,r5,r7
   831d8:	1140022e 	bgeu	r2,r5,831e4 <_free_r+0x160>
   831dc:	18c00217 	ldw	r3,8(r3)
   831e0:	20fffb1e 	bne	r4,r3,831d0 <tx_descriptor+0xfff83170>
   831e4:	19000317 	ldw	r4,12(r3)
   831e8:	31000315 	stw	r4,12(r6)
   831ec:	30c00215 	stw	r3,8(r6)
   831f0:	21800215 	stw	r6,8(r4)
   831f4:	19800315 	stw	r6,12(r3)
   831f8:	003fde06 	br	83174 <tx_descriptor+0xfff83114>
   831fc:	29c00217 	ldw	r7,8(r5)
   83200:	10c5883a 	add	r2,r2,r3
   83204:	00c00234 	movhi	r3,8
   83208:	18d9e404 	addi	r3,r3,26512
   8320c:	38c03b26 	beq	r7,r3,832fc <_free_r+0x278>
   83210:	2a000317 	ldw	r8,12(r5)
   83214:	11400054 	ori	r5,r2,1
   83218:	3087883a 	add	r3,r6,r2
   8321c:	3a000315 	stw	r8,12(r7)
   83220:	41c00215 	stw	r7,8(r8)
   83224:	31400115 	stw	r5,4(r6)
   83228:	18800015 	stw	r2,0(r3)
   8322c:	003fbd06 	br	83124 <tx_descriptor+0xfff830c4>
   83230:	39c0004c 	andi	r7,r7,1
   83234:	10c5883a 	add	r2,r2,r3
   83238:	3800071e 	bne	r7,zero,83258 <_free_r+0x1d4>
   8323c:	81fffe17 	ldw	r7,-8(r16)
   83240:	31cdc83a 	sub	r6,r6,r7
   83244:	30c00317 	ldw	r3,12(r6)
   83248:	31400217 	ldw	r5,8(r6)
   8324c:	11c5883a 	add	r2,r2,r7
   83250:	28c00315 	stw	r3,12(r5)
   83254:	19400215 	stw	r5,8(r3)
   83258:	10c00054 	ori	r3,r2,1
   8325c:	30c00115 	stw	r3,4(r6)
   83260:	00c00234 	movhi	r3,8
   83264:	18daf204 	addi	r3,r3,27592
   83268:	18c00017 	ldw	r3,0(r3)
   8326c:	21800215 	stw	r6,8(r4)
   83270:	10ffc036 	bltu	r2,r3,83174 <tx_descriptor+0xfff83114>
   83274:	00800274 	movhi	r2,9
   83278:	10a2b604 	addi	r2,r2,-29992
   8327c:	11400017 	ldw	r5,0(r2)
   83280:	8809883a 	mov	r4,r17
   83284:	0082f600 	call	82f60 <_malloc_trim_r>
   83288:	003fba06 	br	83174 <tx_descriptor+0xfff83114>
   8328c:	28c9883a 	add	r4,r5,r3
   83290:	21000117 	ldw	r4,4(r4)
   83294:	2100004c 	andi	r4,r4,1
   83298:	2000391e 	bne	r4,zero,83380 <_free_r+0x2fc>
   8329c:	29c00217 	ldw	r7,8(r5)
   832a0:	29000317 	ldw	r4,12(r5)
   832a4:	1885883a 	add	r2,r3,r2
   832a8:	10c00054 	ori	r3,r2,1
   832ac:	39000315 	stw	r4,12(r7)
   832b0:	21c00215 	stw	r7,8(r4)
   832b4:	30c00115 	stw	r3,4(r6)
   832b8:	308d883a 	add	r6,r6,r2
   832bc:	30800015 	stw	r2,0(r6)
   832c0:	003fac06 	br	83174 <tx_descriptor+0xfff83114>
   832c4:	00c00504 	movi	r3,20
   832c8:	19401536 	bltu	r3,r5,83320 <_free_r+0x29c>
   832cc:	28c01704 	addi	r3,r5,92
   832d0:	18c7883a 	add	r3,r3,r3
   832d4:	294016c4 	addi	r5,r5,91
   832d8:	003fb406 	br	831ac <tx_descriptor+0xfff8314c>
   832dc:	280bd0ba 	srai	r5,r5,2
   832e0:	00c00044 	movi	r3,1
   832e4:	38800117 	ldw	r2,4(r7)
   832e8:	194a983a 	sll	r5,r3,r5
   832ec:	2007883a 	mov	r3,r4
   832f0:	2884b03a 	or	r2,r5,r2
   832f4:	38800115 	stw	r2,4(r7)
   832f8:	003fbb06 	br	831e8 <tx_descriptor+0xfff83188>
   832fc:	21800515 	stw	r6,20(r4)
   83300:	21800415 	stw	r6,16(r4)
   83304:	10c00054 	ori	r3,r2,1
   83308:	31c00315 	stw	r7,12(r6)
   8330c:	31c00215 	stw	r7,8(r6)
   83310:	30c00115 	stw	r3,4(r6)
   83314:	308d883a 	add	r6,r6,r2
   83318:	30800015 	stw	r2,0(r6)
   8331c:	003f9506 	br	83174 <tx_descriptor+0xfff83114>
   83320:	00c01504 	movi	r3,84
   83324:	19400536 	bltu	r3,r5,8333c <_free_r+0x2b8>
   83328:	100ad33a 	srli	r5,r2,12
   8332c:	28c01bc4 	addi	r3,r5,111
   83330:	18c7883a 	add	r3,r3,r3
   83334:	29401b84 	addi	r5,r5,110
   83338:	003f9c06 	br	831ac <tx_descriptor+0xfff8314c>
   8333c:	00c05504 	movi	r3,340
   83340:	19400536 	bltu	r3,r5,83358 <_free_r+0x2d4>
   83344:	100ad3fa 	srli	r5,r2,15
   83348:	28c01e04 	addi	r3,r5,120
   8334c:	18c7883a 	add	r3,r3,r3
   83350:	29401dc4 	addi	r5,r5,119
   83354:	003f9506 	br	831ac <tx_descriptor+0xfff8314c>
   83358:	00c15504 	movi	r3,1364
   8335c:	19400536 	bltu	r3,r5,83374 <_free_r+0x2f0>
   83360:	100ad4ba 	srli	r5,r2,18
   83364:	28c01f44 	addi	r3,r5,125
   83368:	18c7883a 	add	r3,r3,r3
   8336c:	29401f04 	addi	r5,r5,124
   83370:	003f8e06 	br	831ac <tx_descriptor+0xfff8314c>
   83374:	00c03f84 	movi	r3,254
   83378:	01401f84 	movi	r5,126
   8337c:	003f8b06 	br	831ac <tx_descriptor+0xfff8314c>
   83380:	10c00054 	ori	r3,r2,1
   83384:	30c00115 	stw	r3,4(r6)
   83388:	308d883a 	add	r6,r6,r2
   8338c:	30800015 	stw	r2,0(r6)
   83390:	003f7806 	br	83174 <tx_descriptor+0xfff83114>

00083394 <_fwalk>:
   83394:	defff704 	addi	sp,sp,-36
   83398:	dd000415 	stw	r20,16(sp)
   8339c:	dfc00815 	stw	ra,32(sp)
   833a0:	ddc00715 	stw	r23,28(sp)
   833a4:	dd800615 	stw	r22,24(sp)
   833a8:	dd400515 	stw	r21,20(sp)
   833ac:	dcc00315 	stw	r19,12(sp)
   833b0:	dc800215 	stw	r18,8(sp)
   833b4:	dc400115 	stw	r17,4(sp)
   833b8:	dc000015 	stw	r16,0(sp)
   833bc:	2500b804 	addi	r20,r4,736
   833c0:	a0002326 	beq	r20,zero,83450 <_fwalk+0xbc>
   833c4:	282b883a 	mov	r21,r5
   833c8:	002f883a 	mov	r23,zero
   833cc:	05800044 	movi	r22,1
   833d0:	04ffffc4 	movi	r19,-1
   833d4:	a4400117 	ldw	r17,4(r20)
   833d8:	a4800217 	ldw	r18,8(r20)
   833dc:	8c7fffc4 	addi	r17,r17,-1
   833e0:	88000d16 	blt	r17,zero,83418 <_fwalk+0x84>
   833e4:	94000304 	addi	r16,r18,12
   833e8:	94800384 	addi	r18,r18,14
   833ec:	8080000b 	ldhu	r2,0(r16)
   833f0:	8c7fffc4 	addi	r17,r17,-1
   833f4:	813ffd04 	addi	r4,r16,-12
   833f8:	b080042e 	bgeu	r22,r2,8340c <_fwalk+0x78>
   833fc:	9080000f 	ldh	r2,0(r18)
   83400:	14c00226 	beq	r2,r19,8340c <_fwalk+0x78>
   83404:	a83ee83a 	callr	r21
   83408:	b8aeb03a 	or	r23,r23,r2
   8340c:	84001a04 	addi	r16,r16,104
   83410:	94801a04 	addi	r18,r18,104
   83414:	8cfff51e 	bne	r17,r19,833ec <tx_descriptor+0xfff8338c>
   83418:	a5000017 	ldw	r20,0(r20)
   8341c:	a03fed1e 	bne	r20,zero,833d4 <tx_descriptor+0xfff83374>
   83420:	b805883a 	mov	r2,r23
   83424:	dfc00817 	ldw	ra,32(sp)
   83428:	ddc00717 	ldw	r23,28(sp)
   8342c:	dd800617 	ldw	r22,24(sp)
   83430:	dd400517 	ldw	r21,20(sp)
   83434:	dd000417 	ldw	r20,16(sp)
   83438:	dcc00317 	ldw	r19,12(sp)
   8343c:	dc800217 	ldw	r18,8(sp)
   83440:	dc400117 	ldw	r17,4(sp)
   83444:	dc000017 	ldw	r16,0(sp)
   83448:	dec00904 	addi	sp,sp,36
   8344c:	f800283a 	ret
   83450:	002f883a 	mov	r23,zero
   83454:	003ff206 	br	83420 <tx_descriptor+0xfff833c0>

00083458 <_fwalk_reent>:
   83458:	defff704 	addi	sp,sp,-36
   8345c:	dd000415 	stw	r20,16(sp)
   83460:	dfc00815 	stw	ra,32(sp)
   83464:	ddc00715 	stw	r23,28(sp)
   83468:	dd800615 	stw	r22,24(sp)
   8346c:	dd400515 	stw	r21,20(sp)
   83470:	dcc00315 	stw	r19,12(sp)
   83474:	dc800215 	stw	r18,8(sp)
   83478:	dc400115 	stw	r17,4(sp)
   8347c:	dc000015 	stw	r16,0(sp)
   83480:	2500b804 	addi	r20,r4,736
   83484:	a0002326 	beq	r20,zero,83514 <_fwalk_reent+0xbc>
   83488:	282b883a 	mov	r21,r5
   8348c:	2027883a 	mov	r19,r4
   83490:	002f883a 	mov	r23,zero
   83494:	05800044 	movi	r22,1
   83498:	04bfffc4 	movi	r18,-1
   8349c:	a4400117 	ldw	r17,4(r20)
   834a0:	a4000217 	ldw	r16,8(r20)
   834a4:	8c7fffc4 	addi	r17,r17,-1
   834a8:	88000c16 	blt	r17,zero,834dc <_fwalk_reent+0x84>
   834ac:	84000304 	addi	r16,r16,12
   834b0:	8080000b 	ldhu	r2,0(r16)
   834b4:	8c7fffc4 	addi	r17,r17,-1
   834b8:	817ffd04 	addi	r5,r16,-12
   834bc:	b080052e 	bgeu	r22,r2,834d4 <_fwalk_reent+0x7c>
   834c0:	8080008f 	ldh	r2,2(r16)
   834c4:	9809883a 	mov	r4,r19
   834c8:	14800226 	beq	r2,r18,834d4 <_fwalk_reent+0x7c>
   834cc:	a83ee83a 	callr	r21
   834d0:	b8aeb03a 	or	r23,r23,r2
   834d4:	84001a04 	addi	r16,r16,104
   834d8:	8cbff51e 	bne	r17,r18,834b0 <tx_descriptor+0xfff83450>
   834dc:	a5000017 	ldw	r20,0(r20)
   834e0:	a03fee1e 	bne	r20,zero,8349c <tx_descriptor+0xfff8343c>
   834e4:	b805883a 	mov	r2,r23
   834e8:	dfc00817 	ldw	ra,32(sp)
   834ec:	ddc00717 	ldw	r23,28(sp)
   834f0:	dd800617 	ldw	r22,24(sp)
   834f4:	dd400517 	ldw	r21,20(sp)
   834f8:	dd000417 	ldw	r20,16(sp)
   834fc:	dcc00317 	ldw	r19,12(sp)
   83500:	dc800217 	ldw	r18,8(sp)
   83504:	dc400117 	ldw	r17,4(sp)
   83508:	dc000017 	ldw	r16,0(sp)
   8350c:	dec00904 	addi	sp,sp,36
   83510:	f800283a 	ret
   83514:	002f883a 	mov	r23,zero
   83518:	003ff206 	br	834e4 <tx_descriptor+0xfff83484>

0008351c <__smakebuf_r>:
   8351c:	2880030b 	ldhu	r2,12(r5)
   83520:	10c0008c 	andi	r3,r2,2
   83524:	1800411e 	bne	r3,zero,8362c <__smakebuf_r+0x110>
   83528:	deffec04 	addi	sp,sp,-80
   8352c:	dc000f15 	stw	r16,60(sp)
   83530:	2821883a 	mov	r16,r5
   83534:	2940038f 	ldh	r5,14(r5)
   83538:	dc401015 	stw	r17,64(sp)
   8353c:	dfc01315 	stw	ra,76(sp)
   83540:	dcc01215 	stw	r19,72(sp)
   83544:	dc801115 	stw	r18,68(sp)
   83548:	2023883a 	mov	r17,r4
   8354c:	28001c16 	blt	r5,zero,835c0 <__smakebuf_r+0xa4>
   83550:	d80d883a 	mov	r6,sp
   83554:	00845440 	call	84544 <_fstat_r>
   83558:	10001816 	blt	r2,zero,835bc <__smakebuf_r+0xa0>
   8355c:	d8800117 	ldw	r2,4(sp)
   83560:	00e00014 	movui	r3,32768
   83564:	10bc000c 	andi	r2,r2,61440
   83568:	14c80020 	cmpeqi	r19,r2,8192
   8356c:	10c03726 	beq	r2,r3,8364c <__smakebuf_r+0x130>
   83570:	80c0030b 	ldhu	r3,12(r16)
   83574:	18c20014 	ori	r3,r3,2048
   83578:	80c0030d 	sth	r3,12(r16)
   8357c:	00c80004 	movi	r3,8192
   83580:	10c0521e 	bne	r2,r3,836cc <__smakebuf_r+0x1b0>
   83584:	8140038f 	ldh	r5,14(r16)
   83588:	8809883a 	mov	r4,r17
   8358c:	00845a00 	call	845a0 <_isatty_r>
   83590:	10004c26 	beq	r2,zero,836c4 <__smakebuf_r+0x1a8>
   83594:	8080030b 	ldhu	r2,12(r16)
   83598:	80c010c4 	addi	r3,r16,67
   8359c:	80c00015 	stw	r3,0(r16)
   835a0:	10800054 	ori	r2,r2,1
   835a4:	8080030d 	sth	r2,12(r16)
   835a8:	00800044 	movi	r2,1
   835ac:	80c00415 	stw	r3,16(r16)
   835b0:	80800515 	stw	r2,20(r16)
   835b4:	04810004 	movi	r18,1024
   835b8:	00000706 	br	835d8 <__smakebuf_r+0xbc>
   835bc:	8080030b 	ldhu	r2,12(r16)
   835c0:	10c0200c 	andi	r3,r2,128
   835c4:	18001f1e 	bne	r3,zero,83644 <__smakebuf_r+0x128>
   835c8:	04810004 	movi	r18,1024
   835cc:	10820014 	ori	r2,r2,2048
   835d0:	8080030d 	sth	r2,12(r16)
   835d4:	0027883a 	mov	r19,zero
   835d8:	900b883a 	mov	r5,r18
   835dc:	8809883a 	mov	r4,r17
   835e0:	00836d80 	call	836d8 <_malloc_r>
   835e4:	10002c26 	beq	r2,zero,83698 <__smakebuf_r+0x17c>
   835e8:	80c0030b 	ldhu	r3,12(r16)
   835ec:	01000234 	movhi	r4,8
   835f0:	210aee04 	addi	r4,r4,11192
   835f4:	89000f15 	stw	r4,60(r17)
   835f8:	18c02014 	ori	r3,r3,128
   835fc:	80c0030d 	sth	r3,12(r16)
   83600:	80800015 	stw	r2,0(r16)
   83604:	80800415 	stw	r2,16(r16)
   83608:	84800515 	stw	r18,20(r16)
   8360c:	98001a1e 	bne	r19,zero,83678 <__smakebuf_r+0x15c>
   83610:	dfc01317 	ldw	ra,76(sp)
   83614:	dcc01217 	ldw	r19,72(sp)
   83618:	dc801117 	ldw	r18,68(sp)
   8361c:	dc401017 	ldw	r17,64(sp)
   83620:	dc000f17 	ldw	r16,60(sp)
   83624:	dec01404 	addi	sp,sp,80
   83628:	f800283a 	ret
   8362c:	288010c4 	addi	r2,r5,67
   83630:	28800015 	stw	r2,0(r5)
   83634:	28800415 	stw	r2,16(r5)
   83638:	00800044 	movi	r2,1
   8363c:	28800515 	stw	r2,20(r5)
   83640:	f800283a 	ret
   83644:	04801004 	movi	r18,64
   83648:	003fe006 	br	835cc <tx_descriptor+0xfff8356c>
   8364c:	81000a17 	ldw	r4,40(r16)
   83650:	00c00234 	movhi	r3,8
   83654:	18d0ca04 	addi	r3,r3,17192
   83658:	20ffc51e 	bne	r4,r3,83570 <tx_descriptor+0xfff83510>
   8365c:	8080030b 	ldhu	r2,12(r16)
   83660:	04810004 	movi	r18,1024
   83664:	84801315 	stw	r18,76(r16)
   83668:	1484b03a 	or	r2,r2,r18
   8366c:	8080030d 	sth	r2,12(r16)
   83670:	0027883a 	mov	r19,zero
   83674:	003fd806 	br	835d8 <tx_descriptor+0xfff83578>
   83678:	8140038f 	ldh	r5,14(r16)
   8367c:	8809883a 	mov	r4,r17
   83680:	00845a00 	call	845a0 <_isatty_r>
   83684:	103fe226 	beq	r2,zero,83610 <tx_descriptor+0xfff835b0>
   83688:	8080030b 	ldhu	r2,12(r16)
   8368c:	10800054 	ori	r2,r2,1
   83690:	8080030d 	sth	r2,12(r16)
   83694:	003fde06 	br	83610 <tx_descriptor+0xfff835b0>
   83698:	8080030b 	ldhu	r2,12(r16)
   8369c:	10c0800c 	andi	r3,r2,512
   836a0:	183fdb1e 	bne	r3,zero,83610 <tx_descriptor+0xfff835b0>
   836a4:	10800094 	ori	r2,r2,2
   836a8:	80c010c4 	addi	r3,r16,67
   836ac:	8080030d 	sth	r2,12(r16)
   836b0:	00800044 	movi	r2,1
   836b4:	80c00015 	stw	r3,0(r16)
   836b8:	80c00415 	stw	r3,16(r16)
   836bc:	80800515 	stw	r2,20(r16)
   836c0:	003fd306 	br	83610 <tx_descriptor+0xfff835b0>
   836c4:	04810004 	movi	r18,1024
   836c8:	003fc306 	br	835d8 <tx_descriptor+0xfff83578>
   836cc:	0027883a 	mov	r19,zero
   836d0:	04810004 	movi	r18,1024
   836d4:	003fc006 	br	835d8 <tx_descriptor+0xfff83578>

000836d8 <_malloc_r>:
   836d8:	defff504 	addi	sp,sp,-44
   836dc:	dc800315 	stw	r18,12(sp)
   836e0:	dfc00a15 	stw	ra,40(sp)
   836e4:	df000915 	stw	fp,36(sp)
   836e8:	ddc00815 	stw	r23,32(sp)
   836ec:	dd800715 	stw	r22,28(sp)
   836f0:	dd400615 	stw	r21,24(sp)
   836f4:	dd000515 	stw	r20,20(sp)
   836f8:	dcc00415 	stw	r19,16(sp)
   836fc:	dc400215 	stw	r17,8(sp)
   83700:	dc000115 	stw	r16,4(sp)
   83704:	288002c4 	addi	r2,r5,11
   83708:	00c00584 	movi	r3,22
   8370c:	2025883a 	mov	r18,r4
   83710:	18807f2e 	bgeu	r3,r2,83910 <_malloc_r+0x238>
   83714:	047ffe04 	movi	r17,-8
   83718:	1462703a 	and	r17,r2,r17
   8371c:	8800a316 	blt	r17,zero,839ac <_malloc_r+0x2d4>
   83720:	8940a236 	bltu	r17,r5,839ac <_malloc_r+0x2d4>
   83724:	008491c0 	call	8491c <__malloc_lock>
   83728:	00807dc4 	movi	r2,503
   8372c:	1441e92e 	bgeu	r2,r17,83ed4 <_malloc_r+0x7fc>
   83730:	8804d27a 	srli	r2,r17,9
   83734:	1000a126 	beq	r2,zero,839bc <_malloc_r+0x2e4>
   83738:	00c00104 	movi	r3,4
   8373c:	18811e36 	bltu	r3,r2,83bb8 <_malloc_r+0x4e0>
   83740:	8804d1ba 	srli	r2,r17,6
   83744:	12000e44 	addi	r8,r2,57
   83748:	11c00e04 	addi	r7,r2,56
   8374c:	4209883a 	add	r4,r8,r8
   83750:	04c00234 	movhi	r19,8
   83754:	2109883a 	add	r4,r4,r4
   83758:	9cd9e204 	addi	r19,r19,26504
   8375c:	2109883a 	add	r4,r4,r4
   83760:	9909883a 	add	r4,r19,r4
   83764:	24000117 	ldw	r16,4(r4)
   83768:	213ffe04 	addi	r4,r4,-8
   8376c:	24009726 	beq	r4,r16,839cc <_malloc_r+0x2f4>
   83770:	80800117 	ldw	r2,4(r16)
   83774:	01bfff04 	movi	r6,-4
   83778:	014003c4 	movi	r5,15
   8377c:	1184703a 	and	r2,r2,r6
   83780:	1447c83a 	sub	r3,r2,r17
   83784:	28c00716 	blt	r5,r3,837a4 <_malloc_r+0xcc>
   83788:	1800920e 	bge	r3,zero,839d4 <_malloc_r+0x2fc>
   8378c:	84000317 	ldw	r16,12(r16)
   83790:	24008e26 	beq	r4,r16,839cc <_malloc_r+0x2f4>
   83794:	80800117 	ldw	r2,4(r16)
   83798:	1184703a 	and	r2,r2,r6
   8379c:	1447c83a 	sub	r3,r2,r17
   837a0:	28fff90e 	bge	r5,r3,83788 <tx_descriptor+0xfff83728>
   837a4:	3809883a 	mov	r4,r7
   837a8:	01800234 	movhi	r6,8
   837ac:	9c000417 	ldw	r16,16(r19)
   837b0:	3199e204 	addi	r6,r6,26504
   837b4:	32000204 	addi	r8,r6,8
   837b8:	82013426 	beq	r16,r8,83c8c <_malloc_r+0x5b4>
   837bc:	80c00117 	ldw	r3,4(r16)
   837c0:	00bfff04 	movi	r2,-4
   837c4:	188e703a 	and	r7,r3,r2
   837c8:	3c45c83a 	sub	r2,r7,r17
   837cc:	00c003c4 	movi	r3,15
   837d0:	18811f16 	blt	r3,r2,83c50 <_malloc_r+0x578>
   837d4:	32000515 	stw	r8,20(r6)
   837d8:	32000415 	stw	r8,16(r6)
   837dc:	10007f0e 	bge	r2,zero,839dc <_malloc_r+0x304>
   837e0:	00807fc4 	movi	r2,511
   837e4:	11c0fd36 	bltu	r2,r7,83bdc <_malloc_r+0x504>
   837e8:	3806d0fa 	srli	r3,r7,3
   837ec:	01c00044 	movi	r7,1
   837f0:	30800117 	ldw	r2,4(r6)
   837f4:	19400044 	addi	r5,r3,1
   837f8:	294b883a 	add	r5,r5,r5
   837fc:	1807d0ba 	srai	r3,r3,2
   83800:	294b883a 	add	r5,r5,r5
   83804:	294b883a 	add	r5,r5,r5
   83808:	298b883a 	add	r5,r5,r6
   8380c:	38c6983a 	sll	r3,r7,r3
   83810:	29c00017 	ldw	r7,0(r5)
   83814:	2a7ffe04 	addi	r9,r5,-8
   83818:	1886b03a 	or	r3,r3,r2
   8381c:	82400315 	stw	r9,12(r16)
   83820:	81c00215 	stw	r7,8(r16)
   83824:	30c00115 	stw	r3,4(r6)
   83828:	2c000015 	stw	r16,0(r5)
   8382c:	3c000315 	stw	r16,12(r7)
   83830:	2005d0ba 	srai	r2,r4,2
   83834:	01400044 	movi	r5,1
   83838:	288a983a 	sll	r5,r5,r2
   8383c:	19406f36 	bltu	r3,r5,839fc <_malloc_r+0x324>
   83840:	28c4703a 	and	r2,r5,r3
   83844:	10000a1e 	bne	r2,zero,83870 <_malloc_r+0x198>
   83848:	00bfff04 	movi	r2,-4
   8384c:	294b883a 	add	r5,r5,r5
   83850:	2088703a 	and	r4,r4,r2
   83854:	28c4703a 	and	r2,r5,r3
   83858:	21000104 	addi	r4,r4,4
   8385c:	1000041e 	bne	r2,zero,83870 <_malloc_r+0x198>
   83860:	294b883a 	add	r5,r5,r5
   83864:	28c4703a 	and	r2,r5,r3
   83868:	21000104 	addi	r4,r4,4
   8386c:	103ffc26 	beq	r2,zero,83860 <tx_descriptor+0xfff83800>
   83870:	02bfff04 	movi	r10,-4
   83874:	024003c4 	movi	r9,15
   83878:	21800044 	addi	r6,r4,1
   8387c:	318d883a 	add	r6,r6,r6
   83880:	318d883a 	add	r6,r6,r6
   83884:	318d883a 	add	r6,r6,r6
   83888:	998d883a 	add	r6,r19,r6
   8388c:	333ffe04 	addi	r12,r6,-8
   83890:	2017883a 	mov	r11,r4
   83894:	31800104 	addi	r6,r6,4
   83898:	34000017 	ldw	r16,0(r6)
   8389c:	31fffd04 	addi	r7,r6,-12
   838a0:	81c0041e 	bne	r16,r7,838b4 <_malloc_r+0x1dc>
   838a4:	0000fb06 	br	83c94 <_malloc_r+0x5bc>
   838a8:	1801030e 	bge	r3,zero,83cb8 <_malloc_r+0x5e0>
   838ac:	84000317 	ldw	r16,12(r16)
   838b0:	81c0f826 	beq	r16,r7,83c94 <_malloc_r+0x5bc>
   838b4:	80800117 	ldw	r2,4(r16)
   838b8:	1284703a 	and	r2,r2,r10
   838bc:	1447c83a 	sub	r3,r2,r17
   838c0:	48fff90e 	bge	r9,r3,838a8 <tx_descriptor+0xfff83848>
   838c4:	80800317 	ldw	r2,12(r16)
   838c8:	81000217 	ldw	r4,8(r16)
   838cc:	89400054 	ori	r5,r17,1
   838d0:	81400115 	stw	r5,4(r16)
   838d4:	20800315 	stw	r2,12(r4)
   838d8:	11000215 	stw	r4,8(r2)
   838dc:	8463883a 	add	r17,r16,r17
   838e0:	9c400515 	stw	r17,20(r19)
   838e4:	9c400415 	stw	r17,16(r19)
   838e8:	18800054 	ori	r2,r3,1
   838ec:	88800115 	stw	r2,4(r17)
   838f0:	8a000315 	stw	r8,12(r17)
   838f4:	8a000215 	stw	r8,8(r17)
   838f8:	88e3883a 	add	r17,r17,r3
   838fc:	88c00015 	stw	r3,0(r17)
   83900:	9009883a 	mov	r4,r18
   83904:	00849200 	call	84920 <__malloc_unlock>
   83908:	80800204 	addi	r2,r16,8
   8390c:	00001b06 	br	8397c <_malloc_r+0x2a4>
   83910:	04400404 	movi	r17,16
   83914:	89402536 	bltu	r17,r5,839ac <_malloc_r+0x2d4>
   83918:	008491c0 	call	8491c <__malloc_lock>
   8391c:	00800184 	movi	r2,6
   83920:	01000084 	movi	r4,2
   83924:	04c00234 	movhi	r19,8
   83928:	1085883a 	add	r2,r2,r2
   8392c:	9cd9e204 	addi	r19,r19,26504
   83930:	1085883a 	add	r2,r2,r2
   83934:	9885883a 	add	r2,r19,r2
   83938:	14000117 	ldw	r16,4(r2)
   8393c:	10fffe04 	addi	r3,r2,-8
   83940:	80c0d926 	beq	r16,r3,83ca8 <_malloc_r+0x5d0>
   83944:	80c00117 	ldw	r3,4(r16)
   83948:	81000317 	ldw	r4,12(r16)
   8394c:	00bfff04 	movi	r2,-4
   83950:	1884703a 	and	r2,r3,r2
   83954:	81400217 	ldw	r5,8(r16)
   83958:	8085883a 	add	r2,r16,r2
   8395c:	10c00117 	ldw	r3,4(r2)
   83960:	29000315 	stw	r4,12(r5)
   83964:	21400215 	stw	r5,8(r4)
   83968:	18c00054 	ori	r3,r3,1
   8396c:	10c00115 	stw	r3,4(r2)
   83970:	9009883a 	mov	r4,r18
   83974:	00849200 	call	84920 <__malloc_unlock>
   83978:	80800204 	addi	r2,r16,8
   8397c:	dfc00a17 	ldw	ra,40(sp)
   83980:	df000917 	ldw	fp,36(sp)
   83984:	ddc00817 	ldw	r23,32(sp)
   83988:	dd800717 	ldw	r22,28(sp)
   8398c:	dd400617 	ldw	r21,24(sp)
   83990:	dd000517 	ldw	r20,20(sp)
   83994:	dcc00417 	ldw	r19,16(sp)
   83998:	dc800317 	ldw	r18,12(sp)
   8399c:	dc400217 	ldw	r17,8(sp)
   839a0:	dc000117 	ldw	r16,4(sp)
   839a4:	dec00b04 	addi	sp,sp,44
   839a8:	f800283a 	ret
   839ac:	00800304 	movi	r2,12
   839b0:	90800015 	stw	r2,0(r18)
   839b4:	0005883a 	mov	r2,zero
   839b8:	003ff006 	br	8397c <tx_descriptor+0xfff8391c>
   839bc:	01002004 	movi	r4,128
   839c0:	02001004 	movi	r8,64
   839c4:	01c00fc4 	movi	r7,63
   839c8:	003f6106 	br	83750 <tx_descriptor+0xfff836f0>
   839cc:	4009883a 	mov	r4,r8
   839d0:	003f7506 	br	837a8 <tx_descriptor+0xfff83748>
   839d4:	81000317 	ldw	r4,12(r16)
   839d8:	003fde06 	br	83954 <tx_descriptor+0xfff838f4>
   839dc:	81c5883a 	add	r2,r16,r7
   839e0:	11400117 	ldw	r5,4(r2)
   839e4:	9009883a 	mov	r4,r18
   839e8:	29400054 	ori	r5,r5,1
   839ec:	11400115 	stw	r5,4(r2)
   839f0:	00849200 	call	84920 <__malloc_unlock>
   839f4:	80800204 	addi	r2,r16,8
   839f8:	003fe006 	br	8397c <tx_descriptor+0xfff8391c>
   839fc:	9c000217 	ldw	r16,8(r19)
   83a00:	00bfff04 	movi	r2,-4
   83a04:	85800117 	ldw	r22,4(r16)
   83a08:	b0ac703a 	and	r22,r22,r2
   83a0c:	b4400336 	bltu	r22,r17,83a1c <_malloc_r+0x344>
   83a10:	b445c83a 	sub	r2,r22,r17
   83a14:	00c003c4 	movi	r3,15
   83a18:	18805d16 	blt	r3,r2,83b90 <_malloc_r+0x4b8>
   83a1c:	05c00234 	movhi	r23,8
   83a20:	00800274 	movhi	r2,9
   83a24:	10a2b604 	addi	r2,r2,-29992
   83a28:	bddaf104 	addi	r23,r23,27588
   83a2c:	15400017 	ldw	r21,0(r2)
   83a30:	b8c00017 	ldw	r3,0(r23)
   83a34:	00bfffc4 	movi	r2,-1
   83a38:	858d883a 	add	r6,r16,r22
   83a3c:	8d6b883a 	add	r21,r17,r21
   83a40:	1880ea26 	beq	r3,r2,83dec <_malloc_r+0x714>
   83a44:	ad4403c4 	addi	r21,r21,4111
   83a48:	00bc0004 	movi	r2,-4096
   83a4c:	a8aa703a 	and	r21,r21,r2
   83a50:	a80b883a 	mov	r5,r21
   83a54:	9009883a 	mov	r4,r18
   83a58:	d9800015 	stw	r6,0(sp)
   83a5c:	00841fc0 	call	841fc <_sbrk_r>
   83a60:	1029883a 	mov	r20,r2
   83a64:	00bfffc4 	movi	r2,-1
   83a68:	d9800017 	ldw	r6,0(sp)
   83a6c:	a080e826 	beq	r20,r2,83e10 <_malloc_r+0x738>
   83a70:	a180a636 	bltu	r20,r6,83d0c <_malloc_r+0x634>
   83a74:	07000274 	movhi	fp,9
   83a78:	e723b704 	addi	fp,fp,-28964
   83a7c:	e0800017 	ldw	r2,0(fp)
   83a80:	a887883a 	add	r3,r21,r2
   83a84:	e0c00015 	stw	r3,0(fp)
   83a88:	3500e626 	beq	r6,r20,83e24 <_malloc_r+0x74c>
   83a8c:	b9000017 	ldw	r4,0(r23)
   83a90:	00bfffc4 	movi	r2,-1
   83a94:	2080ee26 	beq	r4,r2,83e50 <_malloc_r+0x778>
   83a98:	a185c83a 	sub	r2,r20,r6
   83a9c:	10c5883a 	add	r2,r2,r3
   83aa0:	e0800015 	stw	r2,0(fp)
   83aa4:	a0c001cc 	andi	r3,r20,7
   83aa8:	1800bc26 	beq	r3,zero,83d9c <_malloc_r+0x6c4>
   83aac:	a0e9c83a 	sub	r20,r20,r3
   83ab0:	00840204 	movi	r2,4104
   83ab4:	a5000204 	addi	r20,r20,8
   83ab8:	10c7c83a 	sub	r3,r2,r3
   83abc:	a545883a 	add	r2,r20,r21
   83ac0:	1083ffcc 	andi	r2,r2,4095
   83ac4:	18abc83a 	sub	r21,r3,r2
   83ac8:	a80b883a 	mov	r5,r21
   83acc:	9009883a 	mov	r4,r18
   83ad0:	00841fc0 	call	841fc <_sbrk_r>
   83ad4:	00ffffc4 	movi	r3,-1
   83ad8:	10c0e126 	beq	r2,r3,83e60 <_malloc_r+0x788>
   83adc:	1505c83a 	sub	r2,r2,r20
   83ae0:	1545883a 	add	r2,r2,r21
   83ae4:	10800054 	ori	r2,r2,1
   83ae8:	e0c00017 	ldw	r3,0(fp)
   83aec:	9d000215 	stw	r20,8(r19)
   83af0:	a0800115 	stw	r2,4(r20)
   83af4:	a8c7883a 	add	r3,r21,r3
   83af8:	e0c00015 	stw	r3,0(fp)
   83afc:	84c00e26 	beq	r16,r19,83b38 <_malloc_r+0x460>
   83b00:	018003c4 	movi	r6,15
   83b04:	3580a72e 	bgeu	r6,r22,83da4 <_malloc_r+0x6cc>
   83b08:	81400117 	ldw	r5,4(r16)
   83b0c:	013ffe04 	movi	r4,-8
   83b10:	b0bffd04 	addi	r2,r22,-12
   83b14:	1104703a 	and	r2,r2,r4
   83b18:	2900004c 	andi	r4,r5,1
   83b1c:	2088b03a 	or	r4,r4,r2
   83b20:	81000115 	stw	r4,4(r16)
   83b24:	01400144 	movi	r5,5
   83b28:	8089883a 	add	r4,r16,r2
   83b2c:	21400115 	stw	r5,4(r4)
   83b30:	21400215 	stw	r5,8(r4)
   83b34:	3080cd36 	bltu	r6,r2,83e6c <_malloc_r+0x794>
   83b38:	00800274 	movhi	r2,9
   83b3c:	10a2b504 	addi	r2,r2,-29996
   83b40:	11000017 	ldw	r4,0(r2)
   83b44:	20c0012e 	bgeu	r4,r3,83b4c <_malloc_r+0x474>
   83b48:	10c00015 	stw	r3,0(r2)
   83b4c:	00800274 	movhi	r2,9
   83b50:	10a2b404 	addi	r2,r2,-30000
   83b54:	11000017 	ldw	r4,0(r2)
   83b58:	9c000217 	ldw	r16,8(r19)
   83b5c:	20c0012e 	bgeu	r4,r3,83b64 <_malloc_r+0x48c>
   83b60:	10c00015 	stw	r3,0(r2)
   83b64:	80c00117 	ldw	r3,4(r16)
   83b68:	00bfff04 	movi	r2,-4
   83b6c:	1886703a 	and	r3,r3,r2
   83b70:	1c45c83a 	sub	r2,r3,r17
   83b74:	1c400236 	bltu	r3,r17,83b80 <_malloc_r+0x4a8>
   83b78:	00c003c4 	movi	r3,15
   83b7c:	18800416 	blt	r3,r2,83b90 <_malloc_r+0x4b8>
   83b80:	9009883a 	mov	r4,r18
   83b84:	00849200 	call	84920 <__malloc_unlock>
   83b88:	0005883a 	mov	r2,zero
   83b8c:	003f7b06 	br	8397c <tx_descriptor+0xfff8391c>
   83b90:	88c00054 	ori	r3,r17,1
   83b94:	80c00115 	stw	r3,4(r16)
   83b98:	8463883a 	add	r17,r16,r17
   83b9c:	10800054 	ori	r2,r2,1
   83ba0:	9c400215 	stw	r17,8(r19)
   83ba4:	88800115 	stw	r2,4(r17)
   83ba8:	9009883a 	mov	r4,r18
   83bac:	00849200 	call	84920 <__malloc_unlock>
   83bb0:	80800204 	addi	r2,r16,8
   83bb4:	003f7106 	br	8397c <tx_descriptor+0xfff8391c>
   83bb8:	00c00504 	movi	r3,20
   83bbc:	18804a2e 	bgeu	r3,r2,83ce8 <_malloc_r+0x610>
   83bc0:	00c01504 	movi	r3,84
   83bc4:	18806e36 	bltu	r3,r2,83d80 <_malloc_r+0x6a8>
   83bc8:	8804d33a 	srli	r2,r17,12
   83bcc:	12001bc4 	addi	r8,r2,111
   83bd0:	11c01b84 	addi	r7,r2,110
   83bd4:	4209883a 	add	r4,r8,r8
   83bd8:	003edd06 	br	83750 <tx_descriptor+0xfff836f0>
   83bdc:	3804d27a 	srli	r2,r7,9
   83be0:	00c00104 	movi	r3,4
   83be4:	1880442e 	bgeu	r3,r2,83cf8 <_malloc_r+0x620>
   83be8:	00c00504 	movi	r3,20
   83bec:	18808136 	bltu	r3,r2,83df4 <_malloc_r+0x71c>
   83bf0:	11401704 	addi	r5,r2,92
   83bf4:	10c016c4 	addi	r3,r2,91
   83bf8:	294b883a 	add	r5,r5,r5
   83bfc:	294b883a 	add	r5,r5,r5
   83c00:	294b883a 	add	r5,r5,r5
   83c04:	994b883a 	add	r5,r19,r5
   83c08:	28800017 	ldw	r2,0(r5)
   83c0c:	01800234 	movhi	r6,8
   83c10:	297ffe04 	addi	r5,r5,-8
   83c14:	3199e204 	addi	r6,r6,26504
   83c18:	28806526 	beq	r5,r2,83db0 <_malloc_r+0x6d8>
   83c1c:	01bfff04 	movi	r6,-4
   83c20:	10c00117 	ldw	r3,4(r2)
   83c24:	1986703a 	and	r3,r3,r6
   83c28:	38c0022e 	bgeu	r7,r3,83c34 <_malloc_r+0x55c>
   83c2c:	10800217 	ldw	r2,8(r2)
   83c30:	28bffb1e 	bne	r5,r2,83c20 <tx_descriptor+0xfff83bc0>
   83c34:	11400317 	ldw	r5,12(r2)
   83c38:	98c00117 	ldw	r3,4(r19)
   83c3c:	81400315 	stw	r5,12(r16)
   83c40:	80800215 	stw	r2,8(r16)
   83c44:	2c000215 	stw	r16,8(r5)
   83c48:	14000315 	stw	r16,12(r2)
   83c4c:	003ef806 	br	83830 <tx_descriptor+0xfff837d0>
   83c50:	88c00054 	ori	r3,r17,1
   83c54:	80c00115 	stw	r3,4(r16)
   83c58:	8463883a 	add	r17,r16,r17
   83c5c:	34400515 	stw	r17,20(r6)
   83c60:	34400415 	stw	r17,16(r6)
   83c64:	10c00054 	ori	r3,r2,1
   83c68:	8a000315 	stw	r8,12(r17)
   83c6c:	8a000215 	stw	r8,8(r17)
   83c70:	88c00115 	stw	r3,4(r17)
   83c74:	88a3883a 	add	r17,r17,r2
   83c78:	88800015 	stw	r2,0(r17)
   83c7c:	9009883a 	mov	r4,r18
   83c80:	00849200 	call	84920 <__malloc_unlock>
   83c84:	80800204 	addi	r2,r16,8
   83c88:	003f3c06 	br	8397c <tx_descriptor+0xfff8391c>
   83c8c:	30c00117 	ldw	r3,4(r6)
   83c90:	003ee706 	br	83830 <tx_descriptor+0xfff837d0>
   83c94:	5ac00044 	addi	r11,r11,1
   83c98:	588000cc 	andi	r2,r11,3
   83c9c:	31800204 	addi	r6,r6,8
   83ca0:	103efd1e 	bne	r2,zero,83898 <tx_descriptor+0xfff83838>
   83ca4:	00002406 	br	83d38 <_malloc_r+0x660>
   83ca8:	14000317 	ldw	r16,12(r2)
   83cac:	143f251e 	bne	r2,r16,83944 <tx_descriptor+0xfff838e4>
   83cb0:	21000084 	addi	r4,r4,2
   83cb4:	003ebc06 	br	837a8 <tx_descriptor+0xfff83748>
   83cb8:	8085883a 	add	r2,r16,r2
   83cbc:	10c00117 	ldw	r3,4(r2)
   83cc0:	81000317 	ldw	r4,12(r16)
   83cc4:	81400217 	ldw	r5,8(r16)
   83cc8:	18c00054 	ori	r3,r3,1
   83ccc:	10c00115 	stw	r3,4(r2)
   83cd0:	29000315 	stw	r4,12(r5)
   83cd4:	21400215 	stw	r5,8(r4)
   83cd8:	9009883a 	mov	r4,r18
   83cdc:	00849200 	call	84920 <__malloc_unlock>
   83ce0:	80800204 	addi	r2,r16,8
   83ce4:	003f2506 	br	8397c <tx_descriptor+0xfff8391c>
   83ce8:	12001704 	addi	r8,r2,92
   83cec:	11c016c4 	addi	r7,r2,91
   83cf0:	4209883a 	add	r4,r8,r8
   83cf4:	003e9606 	br	83750 <tx_descriptor+0xfff836f0>
   83cf8:	3804d1ba 	srli	r2,r7,6
   83cfc:	11400e44 	addi	r5,r2,57
   83d00:	10c00e04 	addi	r3,r2,56
   83d04:	294b883a 	add	r5,r5,r5
   83d08:	003fbc06 	br	83bfc <tx_descriptor+0xfff83b9c>
   83d0c:	84ff5926 	beq	r16,r19,83a74 <tx_descriptor+0xfff83a14>
   83d10:	00800234 	movhi	r2,8
   83d14:	1099e204 	addi	r2,r2,26504
   83d18:	14000217 	ldw	r16,8(r2)
   83d1c:	00bfff04 	movi	r2,-4
   83d20:	80c00117 	ldw	r3,4(r16)
   83d24:	1886703a 	and	r3,r3,r2
   83d28:	003f9106 	br	83b70 <tx_descriptor+0xfff83b10>
   83d2c:	60800217 	ldw	r2,8(r12)
   83d30:	213fffc4 	addi	r4,r4,-1
   83d34:	1300651e 	bne	r2,r12,83ecc <_malloc_r+0x7f4>
   83d38:	208000cc 	andi	r2,r4,3
   83d3c:	633ffe04 	addi	r12,r12,-8
   83d40:	103ffa1e 	bne	r2,zero,83d2c <tx_descriptor+0xfff83ccc>
   83d44:	98800117 	ldw	r2,4(r19)
   83d48:	0146303a 	nor	r3,zero,r5
   83d4c:	1884703a 	and	r2,r3,r2
   83d50:	98800115 	stw	r2,4(r19)
   83d54:	294b883a 	add	r5,r5,r5
   83d58:	117f2836 	bltu	r2,r5,839fc <tx_descriptor+0xfff8399c>
   83d5c:	283f2726 	beq	r5,zero,839fc <tx_descriptor+0xfff8399c>
   83d60:	2886703a 	and	r3,r5,r2
   83d64:	5809883a 	mov	r4,r11
   83d68:	183ec31e 	bne	r3,zero,83878 <tx_descriptor+0xfff83818>
   83d6c:	294b883a 	add	r5,r5,r5
   83d70:	2886703a 	and	r3,r5,r2
   83d74:	21000104 	addi	r4,r4,4
   83d78:	183ffc26 	beq	r3,zero,83d6c <tx_descriptor+0xfff83d0c>
   83d7c:	003ebe06 	br	83878 <tx_descriptor+0xfff83818>
   83d80:	00c05504 	movi	r3,340
   83d84:	18801236 	bltu	r3,r2,83dd0 <_malloc_r+0x6f8>
   83d88:	8804d3fa 	srli	r2,r17,15
   83d8c:	12001e04 	addi	r8,r2,120
   83d90:	11c01dc4 	addi	r7,r2,119
   83d94:	4209883a 	add	r4,r8,r8
   83d98:	003e6d06 	br	83750 <tx_descriptor+0xfff836f0>
   83d9c:	00c40004 	movi	r3,4096
   83da0:	003f4606 	br	83abc <tx_descriptor+0xfff83a5c>
   83da4:	00800044 	movi	r2,1
   83da8:	a0800115 	stw	r2,4(r20)
   83dac:	003f7406 	br	83b80 <tx_descriptor+0xfff83b20>
   83db0:	1805d0ba 	srai	r2,r3,2
   83db4:	01c00044 	movi	r7,1
   83db8:	30c00117 	ldw	r3,4(r6)
   83dbc:	388e983a 	sll	r7,r7,r2
   83dc0:	2805883a 	mov	r2,r5
   83dc4:	38c6b03a 	or	r3,r7,r3
   83dc8:	30c00115 	stw	r3,4(r6)
   83dcc:	003f9b06 	br	83c3c <tx_descriptor+0xfff83bdc>
   83dd0:	00c15504 	movi	r3,1364
   83dd4:	18801a36 	bltu	r3,r2,83e40 <_malloc_r+0x768>
   83dd8:	8804d4ba 	srli	r2,r17,18
   83ddc:	12001f44 	addi	r8,r2,125
   83de0:	11c01f04 	addi	r7,r2,124
   83de4:	4209883a 	add	r4,r8,r8
   83de8:	003e5906 	br	83750 <tx_descriptor+0xfff836f0>
   83dec:	ad400404 	addi	r21,r21,16
   83df0:	003f1706 	br	83a50 <tx_descriptor+0xfff839f0>
   83df4:	00c01504 	movi	r3,84
   83df8:	18802336 	bltu	r3,r2,83e88 <_malloc_r+0x7b0>
   83dfc:	3804d33a 	srli	r2,r7,12
   83e00:	11401bc4 	addi	r5,r2,111
   83e04:	10c01b84 	addi	r3,r2,110
   83e08:	294b883a 	add	r5,r5,r5
   83e0c:	003f7b06 	br	83bfc <tx_descriptor+0xfff83b9c>
   83e10:	9c000217 	ldw	r16,8(r19)
   83e14:	00bfff04 	movi	r2,-4
   83e18:	80c00117 	ldw	r3,4(r16)
   83e1c:	1886703a 	and	r3,r3,r2
   83e20:	003f5306 	br	83b70 <tx_descriptor+0xfff83b10>
   83e24:	3083ffcc 	andi	r2,r6,4095
   83e28:	103f181e 	bne	r2,zero,83a8c <tx_descriptor+0xfff83a2c>
   83e2c:	99000217 	ldw	r4,8(r19)
   83e30:	b545883a 	add	r2,r22,r21
   83e34:	10800054 	ori	r2,r2,1
   83e38:	20800115 	stw	r2,4(r4)
   83e3c:	003f3e06 	br	83b38 <tx_descriptor+0xfff83ad8>
   83e40:	01003f84 	movi	r4,254
   83e44:	02001fc4 	movi	r8,127
   83e48:	01c01f84 	movi	r7,126
   83e4c:	003e4006 	br	83750 <tx_descriptor+0xfff836f0>
   83e50:	00800234 	movhi	r2,8
   83e54:	109af104 	addi	r2,r2,27588
   83e58:	15000015 	stw	r20,0(r2)
   83e5c:	003f1106 	br	83aa4 <tx_descriptor+0xfff83a44>
   83e60:	00800044 	movi	r2,1
   83e64:	002b883a 	mov	r21,zero
   83e68:	003f1f06 	br	83ae8 <tx_descriptor+0xfff83a88>
   83e6c:	81400204 	addi	r5,r16,8
   83e70:	9009883a 	mov	r4,r18
   83e74:	00830840 	call	83084 <_free_r>
   83e78:	00800274 	movhi	r2,9
   83e7c:	10a3b704 	addi	r2,r2,-28964
   83e80:	10c00017 	ldw	r3,0(r2)
   83e84:	003f2c06 	br	83b38 <tx_descriptor+0xfff83ad8>
   83e88:	00c05504 	movi	r3,340
   83e8c:	18800536 	bltu	r3,r2,83ea4 <_malloc_r+0x7cc>
   83e90:	3804d3fa 	srli	r2,r7,15
   83e94:	11401e04 	addi	r5,r2,120
   83e98:	10c01dc4 	addi	r3,r2,119
   83e9c:	294b883a 	add	r5,r5,r5
   83ea0:	003f5606 	br	83bfc <tx_descriptor+0xfff83b9c>
   83ea4:	00c15504 	movi	r3,1364
   83ea8:	18800536 	bltu	r3,r2,83ec0 <_malloc_r+0x7e8>
   83eac:	3804d4ba 	srli	r2,r7,18
   83eb0:	11401f44 	addi	r5,r2,125
   83eb4:	10c01f04 	addi	r3,r2,124
   83eb8:	294b883a 	add	r5,r5,r5
   83ebc:	003f4f06 	br	83bfc <tx_descriptor+0xfff83b9c>
   83ec0:	01403f84 	movi	r5,254
   83ec4:	00c01f84 	movi	r3,126
   83ec8:	003f4c06 	br	83bfc <tx_descriptor+0xfff83b9c>
   83ecc:	98800117 	ldw	r2,4(r19)
   83ed0:	003fa006 	br	83d54 <tx_descriptor+0xfff83cf4>
   83ed4:	8808d0fa 	srli	r4,r17,3
   83ed8:	20800044 	addi	r2,r4,1
   83edc:	1085883a 	add	r2,r2,r2
   83ee0:	003e9006 	br	83924 <tx_descriptor+0xfff838c4>

00083ee4 <memset>:
   83ee4:	20c000cc 	andi	r3,r4,3
   83ee8:	2005883a 	mov	r2,r4
   83eec:	18004426 	beq	r3,zero,84000 <memset+0x11c>
   83ef0:	31ffffc4 	addi	r7,r6,-1
   83ef4:	30004026 	beq	r6,zero,83ff8 <memset+0x114>
   83ef8:	2813883a 	mov	r9,r5
   83efc:	200d883a 	mov	r6,r4
   83f00:	2007883a 	mov	r3,r4
   83f04:	00000406 	br	83f18 <memset+0x34>
   83f08:	3a3fffc4 	addi	r8,r7,-1
   83f0c:	31800044 	addi	r6,r6,1
   83f10:	38003926 	beq	r7,zero,83ff8 <memset+0x114>
   83f14:	400f883a 	mov	r7,r8
   83f18:	18c00044 	addi	r3,r3,1
   83f1c:	32400005 	stb	r9,0(r6)
   83f20:	1a0000cc 	andi	r8,r3,3
   83f24:	403ff81e 	bne	r8,zero,83f08 <tx_descriptor+0xfff83ea8>
   83f28:	010000c4 	movi	r4,3
   83f2c:	21c02d2e 	bgeu	r4,r7,83fe4 <memset+0x100>
   83f30:	29003fcc 	andi	r4,r5,255
   83f34:	200c923a 	slli	r6,r4,8
   83f38:	3108b03a 	or	r4,r6,r4
   83f3c:	200c943a 	slli	r6,r4,16
   83f40:	218cb03a 	or	r6,r4,r6
   83f44:	010003c4 	movi	r4,15
   83f48:	21c0182e 	bgeu	r4,r7,83fac <memset+0xc8>
   83f4c:	3b3ffc04 	addi	r12,r7,-16
   83f50:	6018d13a 	srli	r12,r12,4
   83f54:	1a000104 	addi	r8,r3,4
   83f58:	1ac00204 	addi	r11,r3,8
   83f5c:	6008913a 	slli	r4,r12,4
   83f60:	1a800304 	addi	r10,r3,12
   83f64:	1813883a 	mov	r9,r3
   83f68:	21000504 	addi	r4,r4,20
   83f6c:	1909883a 	add	r4,r3,r4
   83f70:	49800015 	stw	r6,0(r9)
   83f74:	41800015 	stw	r6,0(r8)
   83f78:	59800015 	stw	r6,0(r11)
   83f7c:	51800015 	stw	r6,0(r10)
   83f80:	42000404 	addi	r8,r8,16
   83f84:	4a400404 	addi	r9,r9,16
   83f88:	5ac00404 	addi	r11,r11,16
   83f8c:	52800404 	addi	r10,r10,16
   83f90:	413ff71e 	bne	r8,r4,83f70 <tx_descriptor+0xfff83f10>
   83f94:	63000044 	addi	r12,r12,1
   83f98:	6018913a 	slli	r12,r12,4
   83f9c:	39c003cc 	andi	r7,r7,15
   83fa0:	010000c4 	movi	r4,3
   83fa4:	1b07883a 	add	r3,r3,r12
   83fa8:	21c00e2e 	bgeu	r4,r7,83fe4 <memset+0x100>
   83fac:	1813883a 	mov	r9,r3
   83fb0:	3811883a 	mov	r8,r7
   83fb4:	010000c4 	movi	r4,3
   83fb8:	49800015 	stw	r6,0(r9)
   83fbc:	423fff04 	addi	r8,r8,-4
   83fc0:	4a400104 	addi	r9,r9,4
   83fc4:	223ffc36 	bltu	r4,r8,83fb8 <tx_descriptor+0xfff83f58>
   83fc8:	393fff04 	addi	r4,r7,-4
   83fcc:	2008d0ba 	srli	r4,r4,2
   83fd0:	39c000cc 	andi	r7,r7,3
   83fd4:	21000044 	addi	r4,r4,1
   83fd8:	2109883a 	add	r4,r4,r4
   83fdc:	2109883a 	add	r4,r4,r4
   83fe0:	1907883a 	add	r3,r3,r4
   83fe4:	38000526 	beq	r7,zero,83ffc <memset+0x118>
   83fe8:	19cf883a 	add	r7,r3,r7
   83fec:	19400005 	stb	r5,0(r3)
   83ff0:	18c00044 	addi	r3,r3,1
   83ff4:	38fffd1e 	bne	r7,r3,83fec <tx_descriptor+0xfff83f8c>
   83ff8:	f800283a 	ret
   83ffc:	f800283a 	ret
   84000:	2007883a 	mov	r3,r4
   84004:	300f883a 	mov	r7,r6
   84008:	003fc706 	br	83f28 <tx_descriptor+0xfff83ec8>

0008400c <lflush>:
   8400c:	2080030b 	ldhu	r2,12(r4)
   84010:	00c00244 	movi	r3,9
   84014:	1080024c 	andi	r2,r2,9
   84018:	10c00226 	beq	r2,r3,84024 <lflush+0x18>
   8401c:	0005883a 	mov	r2,zero
   84020:	f800283a 	ret
   84024:	0082b801 	jmpi	82b80 <fflush>

00084028 <__srefill_r>:
   84028:	defffc04 	addi	sp,sp,-16
   8402c:	dc400115 	stw	r17,4(sp)
   84030:	dc000015 	stw	r16,0(sp)
   84034:	dfc00315 	stw	ra,12(sp)
   84038:	dc800215 	stw	r18,8(sp)
   8403c:	2023883a 	mov	r17,r4
   84040:	2821883a 	mov	r16,r5
   84044:	20000226 	beq	r4,zero,84050 <__srefill_r+0x28>
   84048:	20800e17 	ldw	r2,56(r4)
   8404c:	10003c26 	beq	r2,zero,84140 <__srefill_r+0x118>
   84050:	80c0030b 	ldhu	r3,12(r16)
   84054:	1908000c 	andi	r4,r3,8192
   84058:	1805883a 	mov	r2,r3
   8405c:	2000071e 	bne	r4,zero,8407c <__srefill_r+0x54>
   84060:	81001917 	ldw	r4,100(r16)
   84064:	18880014 	ori	r2,r3,8192
   84068:	00f7ffc4 	movi	r3,-8193
   8406c:	20c8703a 	and	r4,r4,r3
   84070:	8080030d 	sth	r2,12(r16)
   84074:	1007883a 	mov	r3,r2
   84078:	81001915 	stw	r4,100(r16)
   8407c:	80000115 	stw	zero,4(r16)
   84080:	1100080c 	andi	r4,r2,32
   84084:	2000571e 	bne	r4,zero,841e4 <__srefill_r+0x1bc>
   84088:	1100010c 	andi	r4,r2,4
   8408c:	20001f26 	beq	r4,zero,8410c <__srefill_r+0xe4>
   84090:	81400c17 	ldw	r5,48(r16)
   84094:	28000826 	beq	r5,zero,840b8 <__srefill_r+0x90>
   84098:	80801004 	addi	r2,r16,64
   8409c:	28800226 	beq	r5,r2,840a8 <__srefill_r+0x80>
   840a0:	8809883a 	mov	r4,r17
   840a4:	00830840 	call	83084 <_free_r>
   840a8:	80800f17 	ldw	r2,60(r16)
   840ac:	80000c15 	stw	zero,48(r16)
   840b0:	80800115 	stw	r2,4(r16)
   840b4:	1000391e 	bne	r2,zero,8419c <__srefill_r+0x174>
   840b8:	80800417 	ldw	r2,16(r16)
   840bc:	10004b26 	beq	r2,zero,841ec <__srefill_r+0x1c4>
   840c0:	8480030b 	ldhu	r18,12(r16)
   840c4:	908000cc 	andi	r2,r18,3
   840c8:	10001f1e 	bne	r2,zero,84148 <__srefill_r+0x120>
   840cc:	81800417 	ldw	r6,16(r16)
   840d0:	80800817 	ldw	r2,32(r16)
   840d4:	81c00517 	ldw	r7,20(r16)
   840d8:	81400717 	ldw	r5,28(r16)
   840dc:	81800015 	stw	r6,0(r16)
   840e0:	8809883a 	mov	r4,r17
   840e4:	103ee83a 	callr	r2
   840e8:	80800115 	stw	r2,4(r16)
   840ec:	00800e0e 	bge	zero,r2,84128 <__srefill_r+0x100>
   840f0:	0005883a 	mov	r2,zero
   840f4:	dfc00317 	ldw	ra,12(sp)
   840f8:	dc800217 	ldw	r18,8(sp)
   840fc:	dc400117 	ldw	r17,4(sp)
   84100:	dc000017 	ldw	r16,0(sp)
   84104:	dec00404 	addi	sp,sp,16
   84108:	f800283a 	ret
   8410c:	1100040c 	andi	r4,r2,16
   84110:	20003026 	beq	r4,zero,841d4 <__srefill_r+0x1ac>
   84114:	1080020c 	andi	r2,r2,8
   84118:	1000241e 	bne	r2,zero,841ac <__srefill_r+0x184>
   8411c:	18c00114 	ori	r3,r3,4
   84120:	80c0030d 	sth	r3,12(r16)
   84124:	003fe406 	br	840b8 <tx_descriptor+0xfff84058>
   84128:	80c0030b 	ldhu	r3,12(r16)
   8412c:	1000161e 	bne	r2,zero,84188 <__srefill_r+0x160>
   84130:	18c00814 	ori	r3,r3,32
   84134:	00bfffc4 	movi	r2,-1
   84138:	80c0030d 	sth	r3,12(r16)
   8413c:	003fed06 	br	840f4 <tx_descriptor+0xfff84094>
   84140:	0082f100 	call	82f10 <__sinit>
   84144:	003fc206 	br	84050 <tx_descriptor+0xfff83ff0>
   84148:	00800234 	movhi	r2,8
   8414c:	109aef04 	addi	r2,r2,27580
   84150:	11000017 	ldw	r4,0(r2)
   84154:	01400234 	movhi	r5,8
   84158:	00800044 	movi	r2,1
   8415c:	29500304 	addi	r5,r5,16396
   84160:	8080030d 	sth	r2,12(r16)
   84164:	00833940 	call	83394 <_fwalk>
   84168:	00800244 	movi	r2,9
   8416c:	8480030d 	sth	r18,12(r16)
   84170:	9480024c 	andi	r18,r18,9
   84174:	90bfd51e 	bne	r18,r2,840cc <tx_descriptor+0xfff8406c>
   84178:	800b883a 	mov	r5,r16
   8417c:	8809883a 	mov	r4,r17
   84180:	00829080 	call	82908 <__sflush_r>
   84184:	003fd106 	br	840cc <tx_descriptor+0xfff8406c>
   84188:	18c01014 	ori	r3,r3,64
   8418c:	80000115 	stw	zero,4(r16)
   84190:	00bfffc4 	movi	r2,-1
   84194:	80c0030d 	sth	r3,12(r16)
   84198:	003fd606 	br	840f4 <tx_descriptor+0xfff84094>
   8419c:	80c00e17 	ldw	r3,56(r16)
   841a0:	0005883a 	mov	r2,zero
   841a4:	80c00015 	stw	r3,0(r16)
   841a8:	003fd206 	br	840f4 <tx_descriptor+0xfff84094>
   841ac:	800b883a 	mov	r5,r16
   841b0:	8809883a 	mov	r4,r17
   841b4:	0082b240 	call	82b24 <_fflush_r>
   841b8:	10000a1e 	bne	r2,zero,841e4 <__srefill_r+0x1bc>
   841bc:	8080030b 	ldhu	r2,12(r16)
   841c0:	00fffdc4 	movi	r3,-9
   841c4:	80000215 	stw	zero,8(r16)
   841c8:	1886703a 	and	r3,r3,r2
   841cc:	80000615 	stw	zero,24(r16)
   841d0:	003fd206 	br	8411c <tx_descriptor+0xfff840bc>
   841d4:	00800244 	movi	r2,9
   841d8:	88800015 	stw	r2,0(r17)
   841dc:	18c01014 	ori	r3,r3,64
   841e0:	80c0030d 	sth	r3,12(r16)
   841e4:	00bfffc4 	movi	r2,-1
   841e8:	003fc206 	br	840f4 <tx_descriptor+0xfff84094>
   841ec:	800b883a 	mov	r5,r16
   841f0:	8809883a 	mov	r4,r17
   841f4:	008351c0 	call	8351c <__smakebuf_r>
   841f8:	003fb106 	br	840c0 <tx_descriptor+0xfff84060>

000841fc <_sbrk_r>:
   841fc:	defffd04 	addi	sp,sp,-12
   84200:	dc000015 	stw	r16,0(sp)
   84204:	04000274 	movhi	r16,9
   84208:	dc400115 	stw	r17,4(sp)
   8420c:	8422b304 	addi	r16,r16,-30004
   84210:	2023883a 	mov	r17,r4
   84214:	2809883a 	mov	r4,r5
   84218:	dfc00215 	stw	ra,8(sp)
   8421c:	80000015 	stw	zero,0(r16)
   84220:	0084a4c0 	call	84a4c <sbrk>
   84224:	00ffffc4 	movi	r3,-1
   84228:	10c00526 	beq	r2,r3,84240 <_sbrk_r+0x44>
   8422c:	dfc00217 	ldw	ra,8(sp)
   84230:	dc400117 	ldw	r17,4(sp)
   84234:	dc000017 	ldw	r16,0(sp)
   84238:	dec00304 	addi	sp,sp,12
   8423c:	f800283a 	ret
   84240:	80c00017 	ldw	r3,0(r16)
   84244:	183ff926 	beq	r3,zero,8422c <tx_descriptor+0xfff841cc>
   84248:	88c00015 	stw	r3,0(r17)
   8424c:	003ff706 	br	8422c <tx_descriptor+0xfff841cc>

00084250 <__sread>:
   84250:	defffe04 	addi	sp,sp,-8
   84254:	dc000015 	stw	r16,0(sp)
   84258:	2821883a 	mov	r16,r5
   8425c:	2940038f 	ldh	r5,14(r5)
   84260:	dfc00115 	stw	ra,4(sp)
   84264:	00846540 	call	84654 <_read_r>
   84268:	10000716 	blt	r2,zero,84288 <__sread+0x38>
   8426c:	80c01417 	ldw	r3,80(r16)
   84270:	1887883a 	add	r3,r3,r2
   84274:	80c01415 	stw	r3,80(r16)
   84278:	dfc00117 	ldw	ra,4(sp)
   8427c:	dc000017 	ldw	r16,0(sp)
   84280:	dec00204 	addi	sp,sp,8
   84284:	f800283a 	ret
   84288:	80c0030b 	ldhu	r3,12(r16)
   8428c:	18fbffcc 	andi	r3,r3,61439
   84290:	80c0030d 	sth	r3,12(r16)
   84294:	dfc00117 	ldw	ra,4(sp)
   84298:	dc000017 	ldw	r16,0(sp)
   8429c:	dec00204 	addi	sp,sp,8
   842a0:	f800283a 	ret

000842a4 <__seofread>:
   842a4:	0005883a 	mov	r2,zero
   842a8:	f800283a 	ret

000842ac <__swrite>:
   842ac:	2880030b 	ldhu	r2,12(r5)
   842b0:	defffb04 	addi	sp,sp,-20
   842b4:	dcc00315 	stw	r19,12(sp)
   842b8:	dc800215 	stw	r18,8(sp)
   842bc:	dc400115 	stw	r17,4(sp)
   842c0:	dc000015 	stw	r16,0(sp)
   842c4:	dfc00415 	stw	ra,16(sp)
   842c8:	10c0400c 	andi	r3,r2,256
   842cc:	2821883a 	mov	r16,r5
   842d0:	2023883a 	mov	r17,r4
   842d4:	3025883a 	mov	r18,r6
   842d8:	3827883a 	mov	r19,r7
   842dc:	18000526 	beq	r3,zero,842f4 <__swrite+0x48>
   842e0:	2940038f 	ldh	r5,14(r5)
   842e4:	01c00084 	movi	r7,2
   842e8:	000d883a 	mov	r6,zero
   842ec:	00845f40 	call	845f4 <_lseek_r>
   842f0:	8080030b 	ldhu	r2,12(r16)
   842f4:	8140038f 	ldh	r5,14(r16)
   842f8:	10bbffcc 	andi	r2,r2,61439
   842fc:	980f883a 	mov	r7,r19
   84300:	900d883a 	mov	r6,r18
   84304:	8809883a 	mov	r4,r17
   84308:	8080030d 	sth	r2,12(r16)
   8430c:	dfc00417 	ldw	ra,16(sp)
   84310:	dcc00317 	ldw	r19,12(sp)
   84314:	dc800217 	ldw	r18,8(sp)
   84318:	dc400117 	ldw	r17,4(sp)
   8431c:	dc000017 	ldw	r16,0(sp)
   84320:	dec00504 	addi	sp,sp,20
   84324:	008438c1 	jmpi	8438c <_write_r>

00084328 <__sseek>:
   84328:	defffe04 	addi	sp,sp,-8
   8432c:	dc000015 	stw	r16,0(sp)
   84330:	2821883a 	mov	r16,r5
   84334:	2940038f 	ldh	r5,14(r5)
   84338:	dfc00115 	stw	ra,4(sp)
   8433c:	00845f40 	call	845f4 <_lseek_r>
   84340:	00ffffc4 	movi	r3,-1
   84344:	10c00826 	beq	r2,r3,84368 <__sseek+0x40>
   84348:	80c0030b 	ldhu	r3,12(r16)
   8434c:	80801415 	stw	r2,80(r16)
   84350:	18c40014 	ori	r3,r3,4096
   84354:	80c0030d 	sth	r3,12(r16)
   84358:	dfc00117 	ldw	ra,4(sp)
   8435c:	dc000017 	ldw	r16,0(sp)
   84360:	dec00204 	addi	sp,sp,8
   84364:	f800283a 	ret
   84368:	80c0030b 	ldhu	r3,12(r16)
   8436c:	18fbffcc 	andi	r3,r3,61439
   84370:	80c0030d 	sth	r3,12(r16)
   84374:	dfc00117 	ldw	ra,4(sp)
   84378:	dc000017 	ldw	r16,0(sp)
   8437c:	dec00204 	addi	sp,sp,8
   84380:	f800283a 	ret

00084384 <__sclose>:
   84384:	2940038f 	ldh	r5,14(r5)
   84388:	00843ec1 	jmpi	843ec <_close_r>

0008438c <_write_r>:
   8438c:	defffd04 	addi	sp,sp,-12
   84390:	2805883a 	mov	r2,r5
   84394:	dc000015 	stw	r16,0(sp)
   84398:	04000274 	movhi	r16,9
   8439c:	dc400115 	stw	r17,4(sp)
   843a0:	300b883a 	mov	r5,r6
   843a4:	8422b304 	addi	r16,r16,-30004
   843a8:	2023883a 	mov	r17,r4
   843ac:	380d883a 	mov	r6,r7
   843b0:	1009883a 	mov	r4,r2
   843b4:	dfc00215 	stw	ra,8(sp)
   843b8:	80000015 	stw	zero,0(r16)
   843bc:	0084a980 	call	84a98 <write>
   843c0:	00ffffc4 	movi	r3,-1
   843c4:	10c00526 	beq	r2,r3,843dc <_write_r+0x50>
   843c8:	dfc00217 	ldw	ra,8(sp)
   843cc:	dc400117 	ldw	r17,4(sp)
   843d0:	dc000017 	ldw	r16,0(sp)
   843d4:	dec00304 	addi	sp,sp,12
   843d8:	f800283a 	ret
   843dc:	80c00017 	ldw	r3,0(r16)
   843e0:	183ff926 	beq	r3,zero,843c8 <tx_descriptor+0xfff84368>
   843e4:	88c00015 	stw	r3,0(r17)
   843e8:	003ff706 	br	843c8 <tx_descriptor+0xfff84368>

000843ec <_close_r>:
   843ec:	defffd04 	addi	sp,sp,-12
   843f0:	dc000015 	stw	r16,0(sp)
   843f4:	04000274 	movhi	r16,9
   843f8:	dc400115 	stw	r17,4(sp)
   843fc:	8422b304 	addi	r16,r16,-30004
   84400:	2023883a 	mov	r17,r4
   84404:	2809883a 	mov	r4,r5
   84408:	dfc00215 	stw	ra,8(sp)
   8440c:	80000015 	stw	zero,0(r16)
   84410:	008166c0 	call	8166c <close>
   84414:	00ffffc4 	movi	r3,-1
   84418:	10c00526 	beq	r2,r3,84430 <_close_r+0x44>
   8441c:	dfc00217 	ldw	ra,8(sp)
   84420:	dc400117 	ldw	r17,4(sp)
   84424:	dc000017 	ldw	r16,0(sp)
   84428:	dec00304 	addi	sp,sp,12
   8442c:	f800283a 	ret
   84430:	80c00017 	ldw	r3,0(r16)
   84434:	183ff926 	beq	r3,zero,8441c <tx_descriptor+0xfff843bc>
   84438:	88c00015 	stw	r3,0(r17)
   8443c:	003ff706 	br	8441c <tx_descriptor+0xfff843bc>

00084440 <_fclose_r>:
   84440:	28003926 	beq	r5,zero,84528 <_fclose_r+0xe8>
   84444:	defffc04 	addi	sp,sp,-16
   84448:	dc400115 	stw	r17,4(sp)
   8444c:	dc000015 	stw	r16,0(sp)
   84450:	dfc00315 	stw	ra,12(sp)
   84454:	dc800215 	stw	r18,8(sp)
   84458:	2023883a 	mov	r17,r4
   8445c:	2821883a 	mov	r16,r5
   84460:	20000226 	beq	r4,zero,8446c <_fclose_r+0x2c>
   84464:	20800e17 	ldw	r2,56(r4)
   84468:	10002726 	beq	r2,zero,84508 <_fclose_r+0xc8>
   8446c:	8080030f 	ldh	r2,12(r16)
   84470:	1000071e 	bne	r2,zero,84490 <_fclose_r+0x50>
   84474:	0005883a 	mov	r2,zero
   84478:	dfc00317 	ldw	ra,12(sp)
   8447c:	dc800217 	ldw	r18,8(sp)
   84480:	dc400117 	ldw	r17,4(sp)
   84484:	dc000017 	ldw	r16,0(sp)
   84488:	dec00404 	addi	sp,sp,16
   8448c:	f800283a 	ret
   84490:	800b883a 	mov	r5,r16
   84494:	8809883a 	mov	r4,r17
   84498:	00829080 	call	82908 <__sflush_r>
   8449c:	1025883a 	mov	r18,r2
   844a0:	80800b17 	ldw	r2,44(r16)
   844a4:	10000426 	beq	r2,zero,844b8 <_fclose_r+0x78>
   844a8:	81400717 	ldw	r5,28(r16)
   844ac:	8809883a 	mov	r4,r17
   844b0:	103ee83a 	callr	r2
   844b4:	10001616 	blt	r2,zero,84510 <_fclose_r+0xd0>
   844b8:	8080030b 	ldhu	r2,12(r16)
   844bc:	1080200c 	andi	r2,r2,128
   844c0:	1000151e 	bne	r2,zero,84518 <_fclose_r+0xd8>
   844c4:	81400c17 	ldw	r5,48(r16)
   844c8:	28000526 	beq	r5,zero,844e0 <_fclose_r+0xa0>
   844cc:	80801004 	addi	r2,r16,64
   844d0:	28800226 	beq	r5,r2,844dc <_fclose_r+0x9c>
   844d4:	8809883a 	mov	r4,r17
   844d8:	00830840 	call	83084 <_free_r>
   844dc:	80000c15 	stw	zero,48(r16)
   844e0:	81401117 	ldw	r5,68(r16)
   844e4:	28000326 	beq	r5,zero,844f4 <_fclose_r+0xb4>
   844e8:	8809883a 	mov	r4,r17
   844ec:	00830840 	call	83084 <_free_r>
   844f0:	80001115 	stw	zero,68(r16)
   844f4:	0082f200 	call	82f20 <__sfp_lock_acquire>
   844f8:	8000030d 	sth	zero,12(r16)
   844fc:	0082f240 	call	82f24 <__sfp_lock_release>
   84500:	9005883a 	mov	r2,r18
   84504:	003fdc06 	br	84478 <tx_descriptor+0xfff84418>
   84508:	0082f100 	call	82f10 <__sinit>
   8450c:	003fd706 	br	8446c <tx_descriptor+0xfff8440c>
   84510:	04bfffc4 	movi	r18,-1
   84514:	003fe806 	br	844b8 <tx_descriptor+0xfff84458>
   84518:	81400417 	ldw	r5,16(r16)
   8451c:	8809883a 	mov	r4,r17
   84520:	00830840 	call	83084 <_free_r>
   84524:	003fe706 	br	844c4 <tx_descriptor+0xfff84464>
   84528:	0005883a 	mov	r2,zero
   8452c:	f800283a 	ret

00084530 <fclose>:
   84530:	00800234 	movhi	r2,8
   84534:	109af004 	addi	r2,r2,27584
   84538:	200b883a 	mov	r5,r4
   8453c:	11000017 	ldw	r4,0(r2)
   84540:	00844401 	jmpi	84440 <_fclose_r>

00084544 <_fstat_r>:
   84544:	defffd04 	addi	sp,sp,-12
   84548:	2805883a 	mov	r2,r5
   8454c:	dc000015 	stw	r16,0(sp)
   84550:	04000274 	movhi	r16,9
   84554:	dc400115 	stw	r17,4(sp)
   84558:	8422b304 	addi	r16,r16,-30004
   8455c:	2023883a 	mov	r17,r4
   84560:	300b883a 	mov	r5,r6
   84564:	1009883a 	mov	r4,r2
   84568:	dfc00215 	stw	ra,8(sp)
   8456c:	80000015 	stw	zero,0(r16)
   84570:	00846f00 	call	846f0 <fstat>
   84574:	00ffffc4 	movi	r3,-1
   84578:	10c00526 	beq	r2,r3,84590 <_fstat_r+0x4c>
   8457c:	dfc00217 	ldw	ra,8(sp)
   84580:	dc400117 	ldw	r17,4(sp)
   84584:	dc000017 	ldw	r16,0(sp)
   84588:	dec00304 	addi	sp,sp,12
   8458c:	f800283a 	ret
   84590:	80c00017 	ldw	r3,0(r16)
   84594:	183ff926 	beq	r3,zero,8457c <tx_descriptor+0xfff8451c>
   84598:	88c00015 	stw	r3,0(r17)
   8459c:	003ff706 	br	8457c <tx_descriptor+0xfff8451c>

000845a0 <_isatty_r>:
   845a0:	defffd04 	addi	sp,sp,-12
   845a4:	dc000015 	stw	r16,0(sp)
   845a8:	04000274 	movhi	r16,9
   845ac:	dc400115 	stw	r17,4(sp)
   845b0:	8422b304 	addi	r16,r16,-30004
   845b4:	2023883a 	mov	r17,r4
   845b8:	2809883a 	mov	r4,r5
   845bc:	dfc00215 	stw	ra,8(sp)
   845c0:	80000015 	stw	zero,0(r16)
   845c4:	00847a40 	call	847a4 <isatty>
   845c8:	00ffffc4 	movi	r3,-1
   845cc:	10c00526 	beq	r2,r3,845e4 <_isatty_r+0x44>
   845d0:	dfc00217 	ldw	ra,8(sp)
   845d4:	dc400117 	ldw	r17,4(sp)
   845d8:	dc000017 	ldw	r16,0(sp)
   845dc:	dec00304 	addi	sp,sp,12
   845e0:	f800283a 	ret
   845e4:	80c00017 	ldw	r3,0(r16)
   845e8:	183ff926 	beq	r3,zero,845d0 <tx_descriptor+0xfff84570>
   845ec:	88c00015 	stw	r3,0(r17)
   845f0:	003ff706 	br	845d0 <tx_descriptor+0xfff84570>

000845f4 <_lseek_r>:
   845f4:	defffd04 	addi	sp,sp,-12
   845f8:	2805883a 	mov	r2,r5
   845fc:	dc000015 	stw	r16,0(sp)
   84600:	04000274 	movhi	r16,9
   84604:	dc400115 	stw	r17,4(sp)
   84608:	300b883a 	mov	r5,r6
   8460c:	8422b304 	addi	r16,r16,-30004
   84610:	2023883a 	mov	r17,r4
   84614:	380d883a 	mov	r6,r7
   84618:	1009883a 	mov	r4,r2
   8461c:	dfc00215 	stw	ra,8(sp)
   84620:	80000015 	stw	zero,0(r16)
   84624:	00848440 	call	84844 <lseek>
   84628:	00ffffc4 	movi	r3,-1
   8462c:	10c00526 	beq	r2,r3,84644 <_lseek_r+0x50>
   84630:	dfc00217 	ldw	ra,8(sp)
   84634:	dc400117 	ldw	r17,4(sp)
   84638:	dc000017 	ldw	r16,0(sp)
   8463c:	dec00304 	addi	sp,sp,12
   84640:	f800283a 	ret
   84644:	80c00017 	ldw	r3,0(r16)
   84648:	183ff926 	beq	r3,zero,84630 <tx_descriptor+0xfff845d0>
   8464c:	88c00015 	stw	r3,0(r17)
   84650:	003ff706 	br	84630 <tx_descriptor+0xfff845d0>

00084654 <_read_r>:
   84654:	defffd04 	addi	sp,sp,-12
   84658:	2805883a 	mov	r2,r5
   8465c:	dc000015 	stw	r16,0(sp)
   84660:	04000274 	movhi	r16,9
   84664:	dc400115 	stw	r17,4(sp)
   84668:	300b883a 	mov	r5,r6
   8466c:	8422b304 	addi	r16,r16,-30004
   84670:	2023883a 	mov	r17,r4
   84674:	380d883a 	mov	r6,r7
   84678:	1009883a 	mov	r4,r2
   8467c:	dfc00215 	stw	ra,8(sp)
   84680:	80000015 	stw	zero,0(r16)
   84684:	00849240 	call	84924 <read>
   84688:	00ffffc4 	movi	r3,-1
   8468c:	10c00526 	beq	r2,r3,846a4 <_read_r+0x50>
   84690:	dfc00217 	ldw	ra,8(sp)
   84694:	dc400117 	ldw	r17,4(sp)
   84698:	dc000017 	ldw	r16,0(sp)
   8469c:	dec00304 	addi	sp,sp,12
   846a0:	f800283a 	ret
   846a4:	80c00017 	ldw	r3,0(r16)
   846a8:	183ff926 	beq	r3,zero,84690 <tx_descriptor+0xfff84630>
   846ac:	88c00015 	stw	r3,0(r17)
   846b0:	003ff706 	br	84690 <tx_descriptor+0xfff84630>

000846b4 <__mulsi3>:
   846b4:	0005883a 	mov	r2,zero
   846b8:	20000726 	beq	r4,zero,846d8 <__mulsi3+0x24>
   846bc:	20c0004c 	andi	r3,r4,1
   846c0:	2008d07a 	srli	r4,r4,1
   846c4:	18000126 	beq	r3,zero,846cc <__mulsi3+0x18>
   846c8:	1145883a 	add	r2,r2,r5
   846cc:	294b883a 	add	r5,r5,r5
   846d0:	203ffa1e 	bne	r4,zero,846bc <tx_descriptor+0xfff8465c>
   846d4:	f800283a 	ret
   846d8:	f800283a 	ret

000846dc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   846dc:	20000226 	beq	r4,zero,846e8 <_exit+0xc>
    ALT_SIM_FAIL();
   846e0:	002af070 	cmpltui	zero,zero,43969
   846e4:	00000106 	br	846ec <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   846e8:	002af0b0 	cmpltui	zero,zero,43970
   846ec:	003fff06 	br	846ec <tx_descriptor+0xfff8468c>

000846f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   846f0:	defffc04 	addi	sp,sp,-16
   846f4:	dfc00315 	stw	ra,12(sp)
   846f8:	dc800215 	stw	r18,8(sp)
   846fc:	dc400115 	stw	r17,4(sp)
   84700:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84704:	20001916 	blt	r4,zero,8476c <fstat+0x7c>
   84708:	2021883a 	mov	r16,r4
   8470c:	2825883a 	mov	r18,r5
   84710:	01400304 	movi	r5,12
   84714:	00846b40 	call	846b4 <__mulsi3>
   84718:	04400234 	movhi	r17,8
   8471c:	8c586f04 	addi	r17,r17,25020
   84720:	1463883a 	add	r17,r2,r17
  
  if (fd)
   84724:	88001126 	beq	r17,zero,8476c <fstat+0x7c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   84728:	01400304 	movi	r5,12
   8472c:	8009883a 	mov	r4,r16
   84730:	00846b40 	call	846b4 <__mulsi3>
   84734:	00c00234 	movhi	r3,8
   84738:	18d86f04 	addi	r3,r3,25020
   8473c:	1885883a 	add	r2,r3,r2
   84740:	10800017 	ldw	r2,0(r2)
   84744:	10800817 	ldw	r2,32(r2)
   84748:	10000426 	beq	r2,zero,8475c <fstat+0x6c>
    {
      return fd->dev->fstat(fd, st);
   8474c:	900b883a 	mov	r5,r18
   84750:	8809883a 	mov	r4,r17
   84754:	103ee83a 	callr	r2
   84758:	00000c06 	br	8478c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8475c:	00880004 	movi	r2,8192
   84760:	90800115 	stw	r2,4(r18)
      return 0;
   84764:	0005883a 	mov	r2,zero
   84768:	00000806 	br	8478c <fstat+0x9c>
   8476c:	d0a00717 	ldw	r2,-32740(gp)
   84770:	10000226 	beq	r2,zero,8477c <fstat+0x8c>
   84774:	103ee83a 	callr	r2
   84778:	00000106 	br	84780 <fstat+0x90>
   8477c:	d0a7cf04 	addi	r2,gp,-24772
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84780:	00c01444 	movi	r3,81
   84784:	10c00015 	stw	r3,0(r2)
    return -1;
   84788:	00bfffc4 	movi	r2,-1
  }
}
   8478c:	dfc00317 	ldw	ra,12(sp)
   84790:	dc800217 	ldw	r18,8(sp)
   84794:	dc400117 	ldw	r17,4(sp)
   84798:	dc000017 	ldw	r16,0(sp)
   8479c:	dec00404 	addi	sp,sp,16
   847a0:	f800283a 	ret

000847a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   847a4:	deffef04 	addi	sp,sp,-68
   847a8:	dfc01015 	stw	ra,64(sp)
   847ac:	dc000f15 	stw	r16,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   847b0:	20001616 	blt	r4,zero,8480c <isatty+0x68>
   847b4:	2021883a 	mov	r16,r4
   847b8:	01400304 	movi	r5,12
   847bc:	00846b40 	call	846b4 <__mulsi3>
   847c0:	00c00234 	movhi	r3,8
   847c4:	18d86f04 	addi	r3,r3,25020
   847c8:	10c5883a 	add	r2,r2,r3
  
  if (fd)
   847cc:	10000f26 	beq	r2,zero,8480c <isatty+0x68>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   847d0:	01400304 	movi	r5,12
   847d4:	8009883a 	mov	r4,r16
   847d8:	00846b40 	call	846b4 <__mulsi3>
   847dc:	00c00234 	movhi	r3,8
   847e0:	18d86f04 	addi	r3,r3,25020
   847e4:	1885883a 	add	r2,r3,r2
   847e8:	10800017 	ldw	r2,0(r2)
   847ec:	10800817 	ldw	r2,32(r2)
   847f0:	10000f26 	beq	r2,zero,84830 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   847f4:	d80b883a 	mov	r5,sp
   847f8:	8009883a 	mov	r4,r16
   847fc:	00846f00 	call	846f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   84800:	d8800117 	ldw	r2,4(sp)
   84804:	10880020 	cmpeqi	r2,r2,8192
   84808:	00000a06 	br	84834 <isatty+0x90>
   8480c:	d0a00717 	ldw	r2,-32740(gp)
   84810:	10000226 	beq	r2,zero,8481c <isatty+0x78>
   84814:	103ee83a 	callr	r2
   84818:	00000106 	br	84820 <isatty+0x7c>
   8481c:	d0a7cf04 	addi	r2,gp,-24772
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84820:	00c01444 	movi	r3,81
   84824:	10c00015 	stw	r3,0(r2)
    return 0;
   84828:	0005883a 	mov	r2,zero
   8482c:	00000106 	br	84834 <isatty+0x90>
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   84830:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   84834:	dfc01017 	ldw	ra,64(sp)
   84838:	dc000f17 	ldw	r16,60(sp)
   8483c:	dec01104 	addi	sp,sp,68
   84840:	f800283a 	ret

00084844 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   84844:	defffb04 	addi	sp,sp,-20
   84848:	dfc00415 	stw	ra,16(sp)
   8484c:	dcc00315 	stw	r19,12(sp)
   84850:	dc800215 	stw	r18,8(sp)
   84854:	dc400115 	stw	r17,4(sp)
   84858:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8485c:	20001916 	blt	r4,zero,848c4 <lseek+0x80>
   84860:	2021883a 	mov	r16,r4
   84864:	2825883a 	mov	r18,r5
   84868:	3027883a 	mov	r19,r6
   8486c:	01400304 	movi	r5,12
   84870:	00846b40 	call	846b4 <__mulsi3>
   84874:	04400234 	movhi	r17,8
   84878:	8c586f04 	addi	r17,r17,25020
   8487c:	1463883a 	add	r17,r2,r17
  
  if (fd) 
   84880:	88001a26 	beq	r17,zero,848ec <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   84884:	01400304 	movi	r5,12
   84888:	8009883a 	mov	r4,r16
   8488c:	00846b40 	call	846b4 <__mulsi3>
   84890:	00c00234 	movhi	r3,8
   84894:	18d86f04 	addi	r3,r3,25020
   84898:	1885883a 	add	r2,r3,r2
   8489c:	10800017 	ldw	r2,0(r2)
   848a0:	10800717 	ldw	r2,28(r2)
   848a4:	10001326 	beq	r2,zero,848f4 <lseek+0xb0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   848a8:	980d883a 	mov	r6,r19
   848ac:	900b883a 	mov	r5,r18
   848b0:	8809883a 	mov	r4,r17
   848b4:	103ee83a 	callr	r2
   848b8:	1021883a 	mov	r16,r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   848bc:	10000f0e 	bge	r2,zero,848fc <lseek+0xb8>
   848c0:	00000106 	br	848c8 <lseek+0x84>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   848c4:	043febc4 	movi	r16,-81
   848c8:	d0a00717 	ldw	r2,-32740(gp)
   848cc:	10000226 	beq	r2,zero,848d8 <lseek+0x94>
   848d0:	103ee83a 	callr	r2
   848d4:	00000106 	br	848dc <lseek+0x98>
   848d8:	d0a7cf04 	addi	r2,gp,-24772
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   848dc:	0421c83a 	sub	r16,zero,r16
   848e0:	14000015 	stw	r16,0(r2)
    rc = -1;
   848e4:	043fffc4 	movi	r16,-1
  }

  return rc;
   848e8:	00000406 	br	848fc <lseek+0xb8>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   848ec:	043febc4 	movi	r16,-81
   848f0:	003ff506 	br	848c8 <tx_descriptor+0xfff84868>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   848f4:	043fde84 	movi	r16,-134
   848f8:	003ff306 	br	848c8 <tx_descriptor+0xfff84868>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   848fc:	8005883a 	mov	r2,r16
   84900:	dfc00417 	ldw	ra,16(sp)
   84904:	dcc00317 	ldw	r19,12(sp)
   84908:	dc800217 	ldw	r18,8(sp)
   8490c:	dc400117 	ldw	r17,4(sp)
   84910:	dc000017 	ldw	r16,0(sp)
   84914:	dec00504 	addi	sp,sp,20
   84918:	f800283a 	ret

0008491c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8491c:	f800283a 	ret

00084920 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   84920:	f800283a 	ret

00084924 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   84924:	defffb04 	addi	sp,sp,-20
   84928:	dfc00415 	stw	ra,16(sp)
   8492c:	dcc00315 	stw	r19,12(sp)
   84930:	dc800215 	stw	r18,8(sp)
   84934:	dc400115 	stw	r17,4(sp)
   84938:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8493c:	20003416 	blt	r4,zero,84a10 <read+0xec>
   84940:	2021883a 	mov	r16,r4
   84944:	2825883a 	mov	r18,r5
   84948:	3027883a 	mov	r19,r6
   8494c:	01400304 	movi	r5,12
   84950:	00846b40 	call	846b4 <__mulsi3>
   84954:	04400234 	movhi	r17,8
   84958:	8c586f04 	addi	r17,r17,25020
   8495c:	1463883a 	add	r17,r2,r17
  
  if (fd)
   84960:	88002b26 	beq	r17,zero,84a10 <read+0xec>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84964:	01400304 	movi	r5,12
   84968:	8009883a 	mov	r4,r16
   8496c:	00846b40 	call	846b4 <__mulsi3>
   84970:	00c00234 	movhi	r3,8
   84974:	18d87104 	addi	r3,r3,25028
   84978:	10c5883a 	add	r2,r2,r3
   8497c:	10800017 	ldw	r2,0(r2)
   84980:	108000cc 	andi	r2,r2,3
   84984:	00c00044 	movi	r3,1
   84988:	10c01826 	beq	r2,r3,849ec <read+0xc8>
        (fd->dev->read))
   8498c:	01400304 	movi	r5,12
   84990:	8009883a 	mov	r4,r16
   84994:	00846b40 	call	846b4 <__mulsi3>
   84998:	00c00234 	movhi	r3,8
   8499c:	18d86f04 	addi	r3,r3,25020
   849a0:	1885883a 	add	r2,r3,r2
   849a4:	10800017 	ldw	r2,0(r2)
   849a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   849ac:	10000f26 	beq	r2,zero,849ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   849b0:	980d883a 	mov	r6,r19
   849b4:	900b883a 	mov	r5,r18
   849b8:	8809883a 	mov	r4,r17
   849bc:	103ee83a 	callr	r2
   849c0:	1021883a 	mov	r16,r2
   849c4:	10001a0e 	bge	r2,zero,84a30 <read+0x10c>
   849c8:	d0a00717 	ldw	r2,-32740(gp)
   849cc:	10000226 	beq	r2,zero,849d8 <read+0xb4>
   849d0:	103ee83a 	callr	r2
   849d4:	00000106 	br	849dc <read+0xb8>
   849d8:	d0a7cf04 	addi	r2,gp,-24772
        {
          ALT_ERRNO = -rval;
   849dc:	0421c83a 	sub	r16,zero,r16
   849e0:	14000015 	stw	r16,0(r2)
          return -1;
   849e4:	00bfffc4 	movi	r2,-1
   849e8:	00001106 	br	84a30 <read+0x10c>
   849ec:	d0a00717 	ldw	r2,-32740(gp)
   849f0:	10000226 	beq	r2,zero,849fc <read+0xd8>
   849f4:	103ee83a 	callr	r2
   849f8:	00000106 	br	84a00 <read+0xdc>
   849fc:	d0a7cf04 	addi	r2,gp,-24772
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   84a00:	00c00344 	movi	r3,13
   84a04:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   84a08:	00bfffc4 	movi	r2,-1
   84a0c:	00000806 	br	84a30 <read+0x10c>
   84a10:	d0a00717 	ldw	r2,-32740(gp)
   84a14:	10000226 	beq	r2,zero,84a20 <read+0xfc>
   84a18:	103ee83a 	callr	r2
   84a1c:	00000106 	br	84a24 <read+0x100>
   84a20:	d0a7cf04 	addi	r2,gp,-24772
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   84a24:	00c01444 	movi	r3,81
   84a28:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   84a2c:	00bfffc4 	movi	r2,-1
}
   84a30:	dfc00417 	ldw	ra,16(sp)
   84a34:	dcc00317 	ldw	r19,12(sp)
   84a38:	dc800217 	ldw	r18,8(sp)
   84a3c:	dc400117 	ldw	r17,4(sp)
   84a40:	dc000017 	ldw	r16,0(sp)
   84a44:	dec00504 	addi	sp,sp,20
   84a48:	f800283a 	ret

00084a4c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84a4c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a50:	00bfff84 	movi	r2,-2
   84a54:	2884703a 	and	r2,r5,r2
   84a58:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   84a5c:	d0a00f17 	ldw	r2,-32708(gp)
   84a60:	108000c4 	addi	r2,r2,3
   84a64:	00ffff04 	movi	r3,-4
   84a68:	10c4703a 	and	r2,r2,r3
   84a6c:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   84a70:	1109883a 	add	r4,r2,r4
   84a74:	00c00374 	movhi	r3,13
   84a78:	18ec0004 	addi	r3,r3,-20480
   84a7c:	1900032e 	bgeu	r3,r4,84a8c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84a80:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   84a84:	00bfffc4 	movi	r2,-1
   84a88:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   84a8c:	d1200f15 	stw	r4,-32708(gp)
   84a90:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   84a94:	f800283a 	ret

00084a98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   84a98:	defffb04 	addi	sp,sp,-20
   84a9c:	dfc00415 	stw	ra,16(sp)
   84aa0:	dcc00315 	stw	r19,12(sp)
   84aa4:	dc800215 	stw	r18,8(sp)
   84aa8:	dc400115 	stw	r17,4(sp)
   84aac:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84ab0:	20003316 	blt	r4,zero,84b80 <write+0xe8>
   84ab4:	2021883a 	mov	r16,r4
   84ab8:	2825883a 	mov	r18,r5
   84abc:	3027883a 	mov	r19,r6
   84ac0:	01400304 	movi	r5,12
   84ac4:	00846b40 	call	846b4 <__mulsi3>
   84ac8:	04400234 	movhi	r17,8
   84acc:	8c586f04 	addi	r17,r17,25020
   84ad0:	1463883a 	add	r17,r2,r17
  
  if (fd)
   84ad4:	88002a26 	beq	r17,zero,84b80 <write+0xe8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   84ad8:	01400304 	movi	r5,12
   84adc:	8009883a 	mov	r4,r16
   84ae0:	00846b40 	call	846b4 <__mulsi3>
   84ae4:	00c00234 	movhi	r3,8
   84ae8:	18d87104 	addi	r3,r3,25028
   84aec:	10c5883a 	add	r2,r2,r3
   84af0:	10800017 	ldw	r2,0(r2)
   84af4:	108000cc 	andi	r2,r2,3
   84af8:	10001826 	beq	r2,zero,84b5c <write+0xc4>
   84afc:	01400304 	movi	r5,12
   84b00:	8009883a 	mov	r4,r16
   84b04:	00846b40 	call	846b4 <__mulsi3>
   84b08:	00c00234 	movhi	r3,8
   84b0c:	18d86f04 	addi	r3,r3,25020
   84b10:	1885883a 	add	r2,r3,r2
   84b14:	10800017 	ldw	r2,0(r2)
   84b18:	10800617 	ldw	r2,24(r2)
   84b1c:	10000f26 	beq	r2,zero,84b5c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   84b20:	980d883a 	mov	r6,r19
   84b24:	900b883a 	mov	r5,r18
   84b28:	8809883a 	mov	r4,r17
   84b2c:	103ee83a 	callr	r2
   84b30:	1021883a 	mov	r16,r2
   84b34:	10001a0e 	bge	r2,zero,84ba0 <write+0x108>
   84b38:	d0a00717 	ldw	r2,-32740(gp)
   84b3c:	10000226 	beq	r2,zero,84b48 <write+0xb0>
   84b40:	103ee83a 	callr	r2
   84b44:	00000106 	br	84b4c <write+0xb4>
   84b48:	d0a7cf04 	addi	r2,gp,-24772
      {
        ALT_ERRNO = -rval;
   84b4c:	0421c83a 	sub	r16,zero,r16
   84b50:	14000015 	stw	r16,0(r2)
        return -1;
   84b54:	00bfffc4 	movi	r2,-1
   84b58:	00001106 	br	84ba0 <write+0x108>
   84b5c:	d0a00717 	ldw	r2,-32740(gp)
   84b60:	10000226 	beq	r2,zero,84b6c <write+0xd4>
   84b64:	103ee83a 	callr	r2
   84b68:	00000106 	br	84b70 <write+0xd8>
   84b6c:	d0a7cf04 	addi	r2,gp,-24772
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   84b70:	00c00344 	movi	r3,13
   84b74:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   84b78:	00bfffc4 	movi	r2,-1
   84b7c:	00000806 	br	84ba0 <write+0x108>
   84b80:	d0a00717 	ldw	r2,-32740(gp)
   84b84:	10000226 	beq	r2,zero,84b90 <write+0xf8>
   84b88:	103ee83a 	callr	r2
   84b8c:	00000106 	br	84b94 <write+0xfc>
   84b90:	d0a7cf04 	addi	r2,gp,-24772
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   84b94:	00c01444 	movi	r3,81
   84b98:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   84b9c:	00bfffc4 	movi	r2,-1
}
   84ba0:	dfc00417 	ldw	ra,16(sp)
   84ba4:	dcc00317 	ldw	r19,12(sp)
   84ba8:	dc800217 	ldw	r18,8(sp)
   84bac:	dc400117 	ldw	r17,4(sp)
   84bb0:	dc000017 	ldw	r16,0(sp)
   84bb4:	dec00504 	addi	sp,sp,20
   84bb8:	f800283a 	ret
