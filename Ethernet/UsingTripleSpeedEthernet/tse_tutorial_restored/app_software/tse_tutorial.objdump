
C:/Users/julia/Documents/MicArrayProject/Ethernet/UsingTripleSpeedEthernet/tse_tutorial_restored/app_software/tse_tutorial.elf:     file format elf32-littlenios2
C:/Users/julia/Documents/MicArrayProject/Ethernet/UsingTripleSpeedEthernet/tse_tutorial_restored/app_software/tse_tutorial.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801a8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00004ce4 memsz 0x00004ce4 flags r-x
    LOAD off    0x00005d04 vaddr 0x00084d04 paddr 0x00086bd8 align 2**12
         filesz 0x00001ed4 memsz 0x00001ed4 flags rw-
    LOAD off    0x00008aac vaddr 0x00088aac paddr 0x00088aac align 2**12
         filesz 0x00000000 memsz 0x00000560 flags rw-
    LOAD off    0x00008000 vaddr 0x00101000 paddr 0x0008900c align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000188  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004a1c  000801a8  000801a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000140  00084bc4  00084bc4  00005bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ed4  00084d04  00086bd8  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000560  00088aac  00088aac  00008aac  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  0008900c  0008900c  00008080  2**0
                  CONTENTS
  7 .RAM_block    00000000  00100000  00100000  00008080  2**0
                  CONTENTS
  8 .descriptor_memory 00000080  00101000  0008900c  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000023  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a30  00000000  00000000  000080a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001904e  00000000  00000000  00008ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006ab4  00000000  00000000  00021b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006cd8  00000000  00000000  000285da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001474  00000000  00000000  0002f2b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b9f  00000000  00000000  00030728  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005b1b  00000000  00000000  000332c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00038de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000600  00000000  00000000  00038df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003bccc  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003bccf  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003bcdb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003bcdc  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003bcdd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003bce6  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003bcef  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003bcf8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006db1f  00000000  00000000  0003bd03  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801a8 l    d  .text	00000000 .text
00084bc4 l    d  .rodata	00000000 .rodata
00084d04 l    d  .rwdata	00000000 .rwdata
00088aac l    d  .bss	00000000 .bss
0008900c l    d  .main_memory	00000000 .main_memory
00100000 l    d  .RAM_block	00000000 .RAM_block
00101000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 BSP//obj/HAL/src/crt0.o
000801e0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tse_tutorial.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00085164 l     O .rwdata	00001060 jtag_uart
00085134 l     O .rwdata	00000030 sgdma_rx
00085104 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080a7c l     F .text	00000048 altera_avalon_jtag_uart_timeout
00080ac4 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00080ffc l     F .text	00000060 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081754 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00081964 l     F .text	00000080 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0008636c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00082bb8 l     F .text	00000008 __fp_unlock
00082bcc l     F .text	0000019c __sinit.part.1
00082d68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 refill.c
00084014 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00086bd4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00088ad0 g     O .bss	00000004 alt_instruction_exception_handler
000845a8 g     F .text	00000054 _isatty_r
000806e4 g     F .text	00000050 alt_main
000801e4 g     F .text	000000d4 rx_ethernet_isr
00088f0c g     O .bss	00000100 alt_irq
000845fc g     F .text	00000060 _lseek_r
00086bd8 g       *ABS*	00000000 __flash_rwdata_start
0008900c g       *ABS*	00000000 __alt_heap_start
000810e8 g     F .text	0000008c alt_avalon_sgdma_do_sync_transfer
00084330 g     F .text	0000005c __sseek
00082f18 g     F .text	00000010 __sinit
000824e4 g     F .text	00000140 __swbuf_r
00082d70 g     F .text	00000078 __sfmoreglue
00084928 g     F .text	00000004 __malloc_unlock
00081280 g     F .text	00000128 alt_avalon_sgdma_construct_descriptor_burst
00082f00 g     F .text	00000018 _cleanup
00081d94 g     F .text	00000008 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00081428 g     F .text	00000048 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008454c g     F .text	0000005c _fstat_r
00088ad4 g     O .bss	00000004 errno
00082438 g     F .text	00000014 __srget
000842ac g     F .text	00000008 __seofread
00088abc g     O .bss	00000004 alt_argv
0008eb98 g       *ABS*	00000000 _gp
000861c4 g     O .rwdata	00000180 alt_fd_list
00081fa0 g     F .text	00000070 _getc_r
00082010 g     F .text	00000088 getc
000817d0 g     F .text	0000007c alt_find_dev
00082114 g     F .text	00000148 memcpy
00082bc0 g     F .text	0000000c _cleanup_r
000819e4 g     F .text	00000094 alt_io_redirect
00081ef4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00081498 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00080d08 g     F .text	00000158 altera_avalon_jtag_uart_read
000847ac g     F .text	000000a0 isatty
00088ae0 g     O .bss	00000004 __malloc_top_pad
0008119c g     F .text	0000001c alt_avalon_sgdma_stop
00084204 g     F .text	00000054 _sbrk_r
0008465c g     F .text	00000060 _read_r
0008174c g     F .text	00000004 alt_dcache_flush
00086ba0 g     O .rwdata	00000004 alt_max_fd
00084448 g     F .text	000000f0 _fclose_r
00082b88 g     F .text	00000030 fflush
00088adc g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
0008484c g     F .text	000000d8 lseek
00086bc4 g     O .rwdata	00000004 _global_impure_ptr
0008900c g       *ABS*	00000000 __bss_end
000818f8 g     F .text	0000006c alt_iic_isr_register
00080540 g     F .text	00000020 alt_getchar
0008105c g     F .text	0000008c alt_avalon_sgdma_do_async_transfer
00081cc8 g     F .text	000000cc alt_tick
00101000 g     O .descriptor_memory	00000020 rx_descriptor_end
00100000 g       *ABS*	00000000 __alt_mem_RAM_block
00082f38 g     F .text	00000018 __fp_lock_all
000818e0 g     F .text	00000018 alt_ic_irq_enabled
00081c90 g     F .text	00000038 alt_alarm_stop
00101000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00088ac4 g     O .bss	00000004 alt_irq_active
00084d04 g     O .rwdata	00000400 tx_frame
000800fc g     F .exceptions	00000070 alt_irq_handler
00086344 g     O .rwdata	00000028 alt_dev_null
000811b8 g     F .text	0000002c alt_avalon_sgdma_check_descriptor_status
00081750 g     F .text	00000004 alt_dcache_flush_all
00101020 g     O .descriptor_memory	00000020 rx_descriptor
00086bd8 g       *ABS*	00000000 __ram_rwdata_end
00086ba4 g     O .rwdata	00000008 alt_dev_list
00084aa0 g     F .text	00000124 write
00081230 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
0008225c g     F .text	000000a0 _putc_r
00084d04 g       *ABS*	00000000 __ram_rodata_end
000846f8 g     F .text	000000b4 fstat
000814e8 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
00081174 g     F .text	00000010 alt_avalon_sgdma_register_callback
0008900c g       *ABS*	00000000 end
00080bcc g     F .text	00000078 altera_avalon_jtag_uart_init
0008016c g     F .exceptions	0000003c alt_instruction_exception_entry
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00081260 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
00080e60 g     F .text	0000019c altera_avalon_jtag_uart_write
000813f0 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00082f28 g     F .text	00000004 __sfp_lock_acquire
00081470 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
0008308c g     F .text	00000310 _free_r
00080734 g     F .text	00000214 alt_printf
000823c4 g     F .text	00000074 __srget_r
00082790 g     F .text	00000180 __call_exitprocs
00086bcc g     O .rwdata	00000004 __malloc_sbrk_base
000801a8 g     F .text	0000003c _start
00088acc g     O .bss	00000004 _alt_tick_rate
00088aac g     O .bss	00000004 sgdma_tx_dev
000811e4 g     F .text	0000004c alt_avalon_sgdma_open
00088ac8 g     O .bss	00000004 _alt_nticks
00088ab0 g     O .bss	00000004 text_length
0008492c g     F .text	00000128 read
00080988 g     F .text	00000068 alt_sys_init
00080c44 g     F .text	0000003c altera_avalon_jtag_uart_close
000846bc g     F .text	00000028 .hidden __mulsi3
00084d04 g       *ABS*	00000000 __ram_rwdata_start
00084bc4 g       *ABS*	00000000 __ram_rodata_start
00088ee4 g     O .bss	00000028 __malloc_current_mallinfo
000809f0 g     F .text	00000024 altera_avalon_jtag_uart_read_fd
00081e5c g     F .text	00000098 alt_get_fd
000843f4 g     F .text	00000054 _close_r
00082098 g     F .text	0000007c memcmp
00080a38 g     F .text	00000024 altera_avalon_jtag_uart_close_fd
0008900c g       *ABS*	00000000 __alt_stack_base
00080a5c g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
0008263c g     F .text	00000154 __swsetup_r
00082de8 g     F .text	00000118 __sfp
00086790 g     O .rwdata	00000408 __malloc_av_
00082f34 g     F .text	00000004 __sinit_lock_release
00084258 g     F .text	00000054 __sread
00081d9c g     F .text	000000c0 alt_find_file
0008175c g     F .text	00000074 alt_dev_llist_insert
00084924 g     F .text	00000004 __malloc_lock
00084a54 g     F .text	0000004c sbrk
00081184 g     F .text	00000018 alt_avalon_sgdma_start
00082b2c g     F .text	0000005c _fflush_r
00088aac g       *ABS*	00000000 __bss_start
00083eec g     F .text	00000128 memset
000802b8 g     F .text	00000288 main
00088ab8 g     O .bss	00000004 alt_envp
00088ad8 g     O .bss	00000004 __malloc_max_total_mem
00080a14 g     F .text	00000024 altera_avalon_jtag_uart_write_fd
00082624 g     F .text	00000018 __swbuf
00086b98 g     O .rwdata	00000008 alt_sgdma_list
0008438c g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
00084538 g     F .text	00000014 fclose
000836e0 g     F .text	0000080c _malloc_r
00086bb4 g     O .rwdata	00000004 alt_errno
00101060 g     O .descriptor_memory	00000020 tx_descriptor
00088ae4 g     O .bss	00000400 rx_frame
0008339c g     F .text	000000c4 _fwalk
000822fc g     F .text	000000c8 putc
00082f68 g     F .text	00000124 _malloc_trim_r
00084bc4 g       *ABS*	00000000 __flash_rodata_start
00080968 g     F .text	00000020 alt_irq_init
00081c34 g     F .text	0000005c alt_release_fd
00084394 g     F .text	00000060 _write_r
00086bc8 g     O .rwdata	00000004 _impure_ptr
00088ac0 g     O .bss	00000004 alt_argc
00082910 g     F .text	0000021c __sflush_r
00084030 g     F .text	000001d4 __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
00082f50 g     F .text	00000018 __fp_unlock_all
00086bac g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00081850 g     F .text	00000020 alt_ic_isr_register
00086bd8 g       *ABS*	00000000 _edata
0008900c g       *ABS*	00000000 _end
000801a8 g       *ABS*	00000000 __ram_exceptions_end
00080c80 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
000818a8 g     F .text	00000038 alt_ic_irq_disable
00101040 g     O .descriptor_memory	00000020 tx_descriptor_end
00081528 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
000842b4 g     F .text	0000007c __swrite
00086bd0 g     O .rwdata	00000004 __malloc_trim_threshold
00081f68 g     F .text	00000038 exit
00083460 g     F .text	000000c4 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082f2c g     F .text	00000004 __sfp_lock_release
00088ab4 g     O .bss	00000004 sgdma_rx_dev
000846e4 g     F .text	00000014 _exit
000815f4 g     F .text	00000080 alt_alarm_start
00083524 g     F .text	000001bc __smakebuf_r
0008244c g     F .text	00000098 strlen
00081a78 g     F .text	000001bc open
00080948 g     F .text	00000020 alt_putchar
0008184c g     F .text	00000004 alt_icache_flush_all
00086bb8 g     O .rwdata	00000004 alt_priority_mask
00081870 g     F .text	00000038 alt_ic_irq_enable
000813a8 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00086bbc g     O .rwdata	00000008 alt_alarm_list
00081674 g     F .text	000000d8 close
00080560 g     F .text	00000184 alt_load
00081570 g     F .text	00000084 alt_avalon_sgdma_init
00082f30 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406a14 	ori	at,at,424
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	008016c0 	call	8016c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defffe04 	addi	sp,sp,-8
   80100:	dfc00115 	stw	ra,4(sp)
   80104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80108:	000b313a 	rdctl	r5,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8010c:	04000274 	movhi	r16,9
   80110:	8423c304 	addi	r16,r16,-28916
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80114:	2880004c 	andi	r2,r5,1
   80118:	10000926 	beq	r2,zero,80140 <alt_irq_handler+0x44>

  active = alt_irq_pending ();

  do
  {
    i = 0;
   8011c:	0007883a 	mov	r3,zero
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80120:	180690fa 	slli	r3,r3,3
   80124:	80c7883a 	add	r3,r16,r3
   80128:	18800017 	ldw	r2,0(r3)
   8012c:	19000117 	ldw	r4,4(r3)
   80130:	103ee83a 	callr	r2
   80134:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   80138:	283ff61e 	bne	r5,zero,80114 <tx_descriptor+0xfff7f0b4>
   8013c:	00000706 	br	8015c <alt_irq_handler+0x60>
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80140:	0007883a 	mov	r3,zero
   80144:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80148:	1085883a 	add	r2,r2,r2
      i++;
   8014c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80150:	2888703a 	and	r4,r5,r2
   80154:	203ffc26 	beq	r4,zero,80148 <tx_descriptor+0xfff7f0e8>
   80158:	003ff106 	br	80120 <tx_descriptor+0xfff7f0c0>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   8015c:	dfc00117 	ldw	ra,4(sp)
   80160:	dc000017 	ldw	r16,0(sp)
   80164:	dec00204 	addi	sp,sp,8
   80168:	f800283a 	ret

0008016c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   8016c:	d0a7ce17 	ldw	r2,-24776(gp)
   80170:	10000726 	beq	r2,zero,80190 <alt_instruction_exception_entry+0x24>
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   80174:	deffff04 	addi	sp,sp,-4
   80178:	dfc00015 	stw	ra,0(sp)
   8017c:	200b883a 	mov	r5,r4
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80180:	000d883a 	mov	r6,zero
   80184:	013fffc4 	movi	r4,-1
   80188:	103ee83a 	callr	r2
   8018c:	00000306 	br	8019c <alt_instruction_exception_entry+0x30>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80190:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80194:	0005883a 	mov	r2,zero
   80198:	f800283a 	ret
}
   8019c:	dfc00017 	ldw	ra,0(sp)
   801a0:	dec00104 	addi	sp,sp,4
   801a4:	f800283a 	ret

Disassembly of section .text:

000801a8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801a8:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   801ac:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   801b0:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801b4:	d6bae614 	ori	gp,gp,60312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801b8:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801bc:	10a2ab14 	ori	r2,r2,35500

    movhi r3, %hi(__bss_end)
   801c0:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801c4:	18e40314 	ori	r3,r3,36876

    beq r2, r3, 1f
   801c8:	10c00326 	beq	r2,r3,801d8 <_start+0x30>

0:
    stw zero, (r2)
   801cc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801d0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801d4:	10fffd36 	bltu	r2,r3,801cc <tx_descriptor+0xfff7f16c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801d8:	00805600 	call	80560 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801dc:	00806e40 	call	806e4 <alt_main>

000801e0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801e0:	003fff06 	br	801e0 <tx_descriptor+0xfff7f180>

000801e4 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   801e4:	defffb04 	addi	sp,sp,-20
   801e8:	dfc00415 	stw	ra,16(sp)
   801ec:	dc800315 	stw	r18,12(sp)
   801f0:	dc400215 	stw	r17,8(sp)
   801f4:	dc000115 	stw	r16,4(sp)
	int i;

	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   801f8:	04000434 	movhi	r16,16
   801fc:	84040804 	addi	r16,r16,4128
   80200:	8009883a 	mov	r4,r16
   80204:	00811b80 	call	811b8 <alt_avalon_sgdma_check_descriptor_status>
   80208:	103ffd1e 	bne	r2,zero,80200 <tx_descriptor+0xfff7f1a0>
		;
	
	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   8020c:	d0e7c617 	ldw	r3,-24808(gp)
   80210:	00bffe84 	movi	r2,-6
   80214:	18800b26 	beq	r3,r2,80244 <rx_ethernet_isr+0x60>
   80218:	0021883a 	mov	r16,zero
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace	
   8021c:	04800204 	movi	r18,8
   80220:	04400234 	movhi	r17,8
   80224:	8c52f104 	addi	r17,r17,19396
   80228:	900b883a 	mov	r5,r18
   8022c:	8809883a 	mov	r4,r17
   80230:	00807340 	call	80734 <alt_printf>
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
		;
	
	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   80234:	84000044 	addi	r16,r16,1
   80238:	d0a7c617 	ldw	r2,-24808(gp)
   8023c:	10800184 	addi	r2,r2,6
   80240:	80bff936 	bltu	r16,r2,80228 <tx_descriptor+0xfff7f1c8>
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace	
	}
	
	// Output received text		
	alt_printf( "receive> %s\n", rx_frame + 16 );
   80244:	04400274 	movhi	r17,9
   80248:	8c62bd04 	addi	r17,r17,-29964
   8024c:	880b883a 	mov	r5,r17
   80250:	01000234 	movhi	r4,8
   80254:	2112f204 	addi	r4,r4,19400
   80258:	00807340 	call	80734 <alt_printf>
	
	// Reprint current input line after the output
	alt_printf( "send> %s", tx_frame + 16 );
   8025c:	01400234 	movhi	r5,8
   80260:	29534504 	addi	r5,r5,19732
   80264:	01000234 	movhi	r4,8
   80268:	2112f604 	addi	r4,r4,19416
   8026c:	00807340 	call	80734 <alt_printf>
	
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80270:	04000434 	movhi	r16,16
   80274:	84040804 	addi	r16,r16,4128
   80278:	d8000015 	stw	zero,0(sp)
   8027c:	000f883a 	mov	r7,zero
   80280:	89bffc04 	addi	r6,r17,-16
   80284:	01400434 	movhi	r5,16
   80288:	29440004 	addi	r5,r5,4096
   8028c:	8009883a 	mov	r4,r16
   80290:	00814700 	call	81470 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80294:	800b883a 	mov	r5,r16
   80298:	d127c717 	ldw	r4,-24804(gp)
   8029c:	008105c0 	call	8105c <alt_avalon_sgdma_do_async_transfer>
}
   802a0:	dfc00417 	ldw	ra,16(sp)
   802a4:	dc800317 	ldw	r18,12(sp)
   802a8:	dc400217 	ldw	r17,8(sp)
   802ac:	dc000117 	ldw	r16,4(sp)
   802b0:	dec00504 	addi	sp,sp,20
   802b4:	f800283a 	ret

000802b8 <main>:
 *  1. Records input text and transmits the text via Ethernet after Enter is 
 *     pressed
 *  2. Displays text received via Ethernet frame on the JTAG UART
********************************************************************************/
int main(void)
{	
   802b8:	defff504 	addi	sp,sp,-44
   802bc:	dfc00a15 	stw	ra,40(sp)
   802c0:	dd400915 	stw	r21,36(sp)
   802c4:	dd000815 	stw	r20,32(sp)
   802c8:	dcc00715 	stw	r19,28(sp)
   802cc:	dc800615 	stw	r18,24(sp)
   802d0:	dc400515 	stw	r17,20(sp)
   802d4:	dc000415 	stw	r16,16(sp)
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   802d8:	01000234 	movhi	r4,8
   802dc:	2112f904 	addi	r4,r4,19428
   802e0:	00811e40 	call	811e4 <alt_avalon_sgdma_open>
   802e4:	d0a7c515 	stw	r2,-24812(gp)
	if (sgdma_tx_dev == NULL) {
   802e8:	1000041e 	bne	r2,zero,802fc <main+0x44>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   802ec:	01000234 	movhi	r4,8
   802f0:	2112fd04 	addi	r4,r4,19444
   802f4:	00807340 	call	80734 <alt_printf>
		return -1;
   802f8:	00008706 	br	80518 <main+0x260>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   802fc:	01000234 	movhi	r4,8
   80300:	21130c04 	addi	r4,r4,19504
   80304:	00807340 	call	80734 <alt_printf>
		
	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   80308:	01000234 	movhi	r4,8
   8030c:	21131704 	addi	r4,r4,19548
   80310:	00811e40 	call	811e4 <alt_avalon_sgdma_open>
   80314:	d0a7c715 	stw	r2,-24804(gp)
	if (sgdma_rx_dev == NULL) {
   80318:	1000041e 	bne	r2,zero,8032c <main+0x74>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   8031c:	01000234 	movhi	r4,8
   80320:	21131b04 	addi	r4,r4,19564
   80324:	00807340 	call	80734 <alt_printf>
		return -1;
   80328:	00007b06 	br	80518 <main+0x260>
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   8032c:	01000234 	movhi	r4,8
   80330:	21132a04 	addi	r4,r4,19624
   80334:	00807340 	call	80734 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80338:	000f883a 	mov	r7,zero
   8033c:	01800504 	movi	r6,20
   80340:	01400234 	movhi	r5,8
   80344:	29407904 	addi	r5,r5,484
   80348:	d127c717 	ldw	r4,-24804(gp)
   8034c:	00811740 	call	81174 <alt_avalon_sgdma_register_callback>
	
	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80350:	04000434 	movhi	r16,16
   80354:	84040804 	addi	r16,r16,4128
   80358:	d8000015 	stw	zero,0(sp)
   8035c:	000f883a 	mov	r7,zero
   80360:	01800274 	movhi	r6,9
   80364:	31a2b904 	addi	r6,r6,-29980
   80368:	01400434 	movhi	r5,16
   8036c:	29440004 	addi	r5,r5,4096
   80370:	8009883a 	mov	r4,r16
   80374:	00814700 	call	81470 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80378:	800b883a 	mov	r5,r16
   8037c:	d127c717 	ldw	r4,-24804(gp)
   80380:	008105c0 	call	8105c <alt_avalon_sgdma_do_async_transfer>

	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) 0x00103000;	
	
	// Initialize the MAC address 
	*(tse + 3) = 0x116E6001;
   80384:	00c45bb4 	movhi	r3,4462
   80388:	18d80044 	addi	r3,r3,24577
   8038c:	00800434 	movhi	r2,16
   80390:	108c0304 	addi	r2,r2,12300
   80394:	10c00015 	stw	r3,0(r2)
	*(tse + 4) = 0x00000F02; 
   80398:	00c3c084 	movi	r3,3842
   8039c:	00800434 	movhi	r2,16
   803a0:	108c0404 	addi	r2,r2,12304
   803a4:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x00; //was 0x10
   803a8:	00800434 	movhi	r2,16
   803ac:	108c0f04 	addi	r2,r2,12348
   803b0:	10000015 	stw	zero,0(r2)
	*(tse + 0x10) = 0x00; //was 0x11
   803b4:	00800434 	movhi	r2,16
   803b8:	108c1004 	addi	r2,r2,12352
   803bc:	10000015 	stw	zero,0(r2)
	
	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	*(tse + 0x94) = 0x0000; //was 0x4000
   803c0:	00800434 	movhi	r2,16
   803c4:	108c9404 	addi	r2,r2,12880
   803c8:	10000015 	stw	zero,0(r2)
	
	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
   803cc:	00c00434 	movhi	r3,16
   803d0:	18ccb004 	addi	r3,r3,12992
   803d4:	18800017 	ldw	r2,0(r3)
   803d8:	10801814 	ori	r2,r2,96
   803dc:	18800015 	stw	r2,0(r3)
	
	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
   803e0:	00c00434 	movhi	r3,16
   803e4:	18ccb404 	addi	r3,r3,13008
   803e8:	18800017 	ldw	r2,0(r3)
   803ec:	10802094 	ori	r2,r2,130
   803f0:	18800015 	stw	r2,0(r3)
	
	// Software reset the second PHY chip and wait
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
   803f4:	00c00434 	movhi	r3,16
   803f8:	18cca004 	addi	r3,r3,12928
   803fc:	18800017 	ldw	r2,0(r3)
   80400:	10a00014 	ori	r2,r2,32768
   80404:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0xA0) & 0x8000  )
   80408:	00800434 	movhi	r2,16
   8040c:	108ca004 	addi	r2,r2,12928
   80410:	10800017 	ldw	r2,0(r2)
   80414:	10a0000c 	andi	r2,r2,32768
   80418:	103ffb1e 	bne	r2,zero,80408 <tx_descriptor+0xfff7f3a8>
		;	 
	 
	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse + 2) = *(tse + 2) | 0x0000004B;	
   8041c:	00c00434 	movhi	r3,16
   80420:	18cc0204 	addi	r3,r3,12296
   80424:	18800017 	ldw	r2,0(r3)
   80428:	108012d4 	ori	r2,r2,75
   8042c:	18800015 	stw	r2,0(r3)
	
	alt_printf( "send> " );
   80430:	01000234 	movhi	r4,8
   80434:	21133504 	addi	r4,r4,19668
   80438:	00807340 	call	80734 <alt_printf>
	text_length = 0;
   8043c:	d027c615 	stw	zero,-24808(gp)
	volatile int * ram_block = (int *) 0x00100000;
	
	while (1) {
		
		char new_char;
		tx_frame[16] = '\0';
   80440:	04c00234 	movhi	r19,8
   80444:	9cd34104 	addi	r19,r19,19716
   80448:	9c800c04 	addi	r18,r19,48

		// MODIFIED
		if (alt_getchar() == '\n') {
			while (text_length < 32) {
				tx_frame[16 + text_length] = *(ram_block + text_length);
				text_length++;
   8044c:	047ffc44 	movi	r17,-15
   80450:	8ce3c83a 	sub	r17,r17,r19
			}
			tx_frame[16 + text_length] = '\0';
		}
		// END MODIFIED
		
		alt_printf( "\nsend> " );
   80454:	05400234 	movhi	r21,8
   80458:	ad533704 	addi	r21,r21,19676
		text_length = 0;
		
		// Create transmit sgdma descriptor
		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0 );
   8045c:	05000434 	movhi	r20,16
   80460:	a5041004 	addi	r20,r20,4160
   80464:	04000434 	movhi	r16,16
   80468:	84041804 	addi	r16,r16,4192
	volatile int * ram_block = (int *) 0x00100000;
	
	while (1) {
		
		char new_char;
		tx_frame[16] = '\0';
   8046c:	98000405 	stb	zero,16(r19)
			}
			
		}*/

		// MODIFIED
		if (alt_getchar() == '\n') {
   80470:	00805400 	call	80540 <alt_getchar>
   80474:	00c00284 	movi	r3,10
   80478:	10c0131e 	bne	r2,r3,804c8 <main+0x210>
			while (text_length < 32) {
   8047c:	d0a7c617 	ldw	r2,-24808(gp)
   80480:	00c007c4 	movi	r3,31
   80484:	18800e36 	bltu	r3,r2,804c0 <main+0x208>
   80488:	1087883a 	add	r3,r2,r2
   8048c:	18c9883a 	add	r4,r3,r3
   80490:	00c00434 	movhi	r3,16
   80494:	20c7883a 	add	r3,r4,r3
   80498:	10800404 	addi	r2,r2,16
   8049c:	14c5883a 	add	r2,r2,r19
				tx_frame[16 + text_length] = *(ram_block + text_length);
   804a0:	19000017 	ldw	r4,0(r3)
   804a4:	11000005 	stb	r4,0(r2)
				text_length++;
   804a8:	8889883a 	add	r4,r17,r2
   804ac:	d127c615 	stw	r4,-24808(gp)
   804b0:	18c00104 	addi	r3,r3,4
   804b4:	10800044 	addi	r2,r2,1
			
		}*/

		// MODIFIED
		if (alt_getchar() == '\n') {
			while (text_length < 32) {
   804b8:	14bff91e 	bne	r2,r18,804a0 <tx_descriptor+0xfff7f440>
				tx_frame[16 + text_length] = *(ram_block + text_length);
				text_length++;
   804bc:	00800804 	movi	r2,32
			}
			tx_frame[16 + text_length] = '\0';
   804c0:	9885883a 	add	r2,r19,r2
   804c4:	10000405 	stb	zero,16(r2)
		}
		// END MODIFIED
		
		alt_printf( "\nsend> " );
   804c8:	a809883a 	mov	r4,r21
   804cc:	00807340 	call	80734 <alt_printf>
		text_length = 0;
   804d0:	d027c615 	stw	zero,-24808(gp)
		
		// Create transmit sgdma descriptor
		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0 );
   804d4:	d8000315 	stw	zero,12(sp)
   804d8:	00800044 	movi	r2,1
   804dc:	d8800215 	stw	r2,8(sp)
   804e0:	d8800115 	stw	r2,4(sp)
   804e4:	d8000015 	stw	zero,0(sp)
   804e8:	01c00f84 	movi	r7,62
   804ec:	980d883a 	mov	r6,r19
   804f0:	a00b883a 	mov	r5,r20
   804f4:	8009883a 	mov	r4,r16
   804f8:	00814e80 	call	814e8 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
		// Set up non-blocking transfer of sgdma transmit descriptor
		alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   804fc:	800b883a 	mov	r5,r16
   80500:	d127c517 	ldw	r4,-24812(gp)
   80504:	008105c0 	call	8105c <alt_avalon_sgdma_do_async_transfer>
		
		// Wait until transmit descriptor transfer is complete
		while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   80508:	8009883a 	mov	r4,r16
   8050c:	00811b80 	call	811b8 <alt_avalon_sgdma_check_descriptor_status>
   80510:	103ffd1e 	bne	r2,zero,80508 <tx_descriptor+0xfff7f4a8>
   80514:	003fd506 	br	8046c <tx_descriptor+0xfff7f40c>
			;
	}    
	
	return 0;
}
   80518:	00bfffc4 	movi	r2,-1
   8051c:	dfc00a17 	ldw	ra,40(sp)
   80520:	dd400917 	ldw	r21,36(sp)
   80524:	dd000817 	ldw	r20,32(sp)
   80528:	dcc00717 	ldw	r19,28(sp)
   8052c:	dc800617 	ldw	r18,24(sp)
   80530:	dc400517 	ldw	r17,20(sp)
   80534:	dc000417 	ldw	r16,16(sp)
   80538:	dec00b04 	addi	sp,sp,44
   8053c:	f800283a 	ret

00080540 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   80540:	deffff04 	addi	sp,sp,-4
   80544:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
   80548:	d0a00c17 	ldw	r2,-32720(gp)
   8054c:	11000117 	ldw	r4,4(r2)
   80550:	00820100 	call	82010 <getc>
#endif
#endif
}
   80554:	dfc00017 	ldw	ra,0(sp)
   80558:	dec00104 	addi	sp,sp,4
   8055c:	f800283a 	ret

00080560 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80560:	deffff04 	addi	sp,sp,-4
   80564:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80568:	00800234 	movhi	r2,8
   8056c:	109af604 	addi	r2,r2,27608
   80570:	00c00234 	movhi	r3,8
   80574:	18d34104 	addi	r3,r3,19716
   80578:	18801926 	beq	r3,r2,805e0 <alt_load+0x80>
  {
    while( to != end )
   8057c:	00800234 	movhi	r2,8
   80580:	109af604 	addi	r2,r2,27608
   80584:	00c00234 	movhi	r3,8
   80588:	18d34104 	addi	r3,r3,19716
   8058c:	18801426 	beq	r3,r2,805e0 <alt_load+0x80>
   80590:	00c00234 	movhi	r3,8
   80594:	18d34204 	addi	r3,r3,19720
   80598:	00800234 	movhi	r2,8
   8059c:	109af604 	addi	r2,r2,27608
   805a0:	10c7c83a 	sub	r3,r2,r3
   805a4:	1806d0ba 	srli	r3,r3,2
   805a8:	18c00044 	addi	r3,r3,1
   805ac:	18c7883a 	add	r3,r3,r3
   805b0:	18c7883a 	add	r3,r3,r3
   805b4:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   805b8:	01c00234 	movhi	r7,8
   805bc:	39d34104 	addi	r7,r7,19716
   805c0:	01800234 	movhi	r6,8
   805c4:	319af604 	addi	r6,r6,27608
   805c8:	11c9883a 	add	r4,r2,r7
   805cc:	118b883a 	add	r5,r2,r6
   805d0:	29400017 	ldw	r5,0(r5)
   805d4:	21400015 	stw	r5,0(r4)
   805d8:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   805dc:	10fffa1e 	bne	r2,r3,805c8 <tx_descriptor+0xfff7f568>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   805e0:	00800234 	movhi	r2,8
   805e4:	10800804 	addi	r2,r2,32
   805e8:	00c00234 	movhi	r3,8
   805ec:	18c00804 	addi	r3,r3,32
   805f0:	18801926 	beq	r3,r2,80658 <alt_load+0xf8>
  {
    while( to != end )
   805f4:	00800234 	movhi	r2,8
   805f8:	10806a04 	addi	r2,r2,424
   805fc:	00c00234 	movhi	r3,8
   80600:	18c00804 	addi	r3,r3,32
   80604:	18801426 	beq	r3,r2,80658 <alt_load+0xf8>
   80608:	00c00234 	movhi	r3,8
   8060c:	18c00904 	addi	r3,r3,36
   80610:	00800234 	movhi	r2,8
   80614:	10806a04 	addi	r2,r2,424
   80618:	10c7c83a 	sub	r3,r2,r3
   8061c:	1806d0ba 	srli	r3,r3,2
   80620:	18c00044 	addi	r3,r3,1
   80624:	18c7883a 	add	r3,r3,r3
   80628:	18c7883a 	add	r3,r3,r3
   8062c:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   80630:	01c00234 	movhi	r7,8
   80634:	39c00804 	addi	r7,r7,32
   80638:	01800234 	movhi	r6,8
   8063c:	31800804 	addi	r6,r6,32
   80640:	11c9883a 	add	r4,r2,r7
   80644:	118b883a 	add	r5,r2,r6
   80648:	29400017 	ldw	r5,0(r5)
   8064c:	21400015 	stw	r5,0(r4)
   80650:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80654:	18bffa1e 	bne	r3,r2,80640 <tx_descriptor+0xfff7f5e0>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80658:	00800234 	movhi	r2,8
   8065c:	1092f104 	addi	r2,r2,19396
   80660:	00c00234 	movhi	r3,8
   80664:	18d2f104 	addi	r3,r3,19396
   80668:	18801926 	beq	r3,r2,806d0 <alt_load+0x170>
  {
    while( to != end )
   8066c:	00800234 	movhi	r2,8
   80670:	10934104 	addi	r2,r2,19716
   80674:	00c00234 	movhi	r3,8
   80678:	18d2f104 	addi	r3,r3,19396
   8067c:	18801426 	beq	r3,r2,806d0 <alt_load+0x170>
   80680:	00c00234 	movhi	r3,8
   80684:	18d2f204 	addi	r3,r3,19400
   80688:	00800234 	movhi	r2,8
   8068c:	10934104 	addi	r2,r2,19716
   80690:	10c7c83a 	sub	r3,r2,r3
   80694:	1806d0ba 	srli	r3,r3,2
   80698:	18c00044 	addi	r3,r3,1
   8069c:	18c7883a 	add	r3,r3,r3
   806a0:	18c7883a 	add	r3,r3,r3
   806a4:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   806a8:	01c00234 	movhi	r7,8
   806ac:	39d2f104 	addi	r7,r7,19396
   806b0:	01800234 	movhi	r6,8
   806b4:	3192f104 	addi	r6,r6,19396
   806b8:	11c9883a 	add	r4,r2,r7
   806bc:	118b883a 	add	r5,r2,r6
   806c0:	29400017 	ldw	r5,0(r5)
   806c4:	21400015 	stw	r5,0(r4)
   806c8:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   806cc:	18bffa1e 	bne	r3,r2,806b8 <tx_descriptor+0xfff7f658>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   806d0:	00817500 	call	81750 <alt_dcache_flush_all>
  alt_icache_flush_all();
   806d4:	008184c0 	call	8184c <alt_icache_flush_all>
}
   806d8:	dfc00017 	ldw	ra,0(sp)
   806dc:	dec00104 	addi	sp,sp,4
   806e0:	f800283a 	ret

000806e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   806e4:	defffe04 	addi	sp,sp,-8
   806e8:	dfc00115 	stw	ra,4(sp)
   806ec:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   806f0:	0009883a 	mov	r4,zero
   806f4:	00809680 	call	80968 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   806f8:	00809880 	call	80988 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   806fc:	01000234 	movhi	r4,8
   80700:	21133904 	addi	r4,r4,19684
   80704:	200d883a 	mov	r6,r4
   80708:	200b883a 	mov	r5,r4
   8070c:	00819e40 	call	819e4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80710:	d1a7c817 	ldw	r6,-24800(gp)
   80714:	d167c917 	ldw	r5,-24796(gp)
   80718:	d127ca17 	ldw	r4,-24792(gp)
   8071c:	00802b80 	call	802b8 <main>
   80720:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   80724:	01000044 	movi	r4,1
   80728:	00816740 	call	81674 <close>
  exit (result);
   8072c:	8009883a 	mov	r4,r16
   80730:	0081f680 	call	81f68 <exit>

00080734 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80734:	defff304 	addi	sp,sp,-52
   80738:	dfc00915 	stw	ra,36(sp)
   8073c:	df000815 	stw	fp,32(sp)
   80740:	ddc00715 	stw	r23,28(sp)
   80744:	dd800615 	stw	r22,24(sp)
   80748:	dd400515 	stw	r21,20(sp)
   8074c:	dd000415 	stw	r20,16(sp)
   80750:	dcc00315 	stw	r19,12(sp)
   80754:	dc800215 	stw	r18,8(sp)
   80758:	dc400115 	stw	r17,4(sp)
   8075c:	dc000015 	stw	r16,0(sp)
   80760:	2021883a 	mov	r16,r4
   80764:	d9400a15 	stw	r5,40(sp)
   80768:	d9800b15 	stw	r6,44(sp)
   8076c:	d9c00c15 	stw	r7,48(sp)
	va_list args;
	va_start(args, fmt);
   80770:	dd800a04 	addi	r22,sp,40
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80774:	04800944 	movi	r18,37
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   80778:	05c018c4 	movi	r23,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   8077c:	07001e04 	movi	fp,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80780:	04c003c4 	movi	r19,15
                        if (digit <= 9)
   80784:	05400244 	movi	r21,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80788:	00005e06 	br	80904 <alt_printf+0x1d0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8078c:	20803fcc 	andi	r2,r4,255
   80790:	1080201c 	xori	r2,r2,128
   80794:	10bfe004 	addi	r2,r2,-128
   80798:	14800426 	beq	r2,r18,807ac <alt_printf+0x78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8079c:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
   807a0:	1009883a 	mov	r4,r2
   807a4:	00809480 	call	80948 <alt_putchar>
   807a8:	00005606 	br	80904 <alt_printf+0x1d0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   807ac:	85000084 	addi	r20,r16,2
   807b0:	80800043 	ldbu	r2,1(r16)
   807b4:	10c03fcc 	andi	r3,r2,255
   807b8:	18c0201c 	xori	r3,r3,128
   807bc:	18ffe004 	addi	r3,r3,-128
   807c0:	18005526 	beq	r3,zero,80918 <alt_printf+0x1e4>
            {
                if (c == '%')
   807c4:	1c80041e 	bne	r3,r18,807d8 <alt_printf+0xa4>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   807c8:	9009883a 	mov	r4,r18
   807cc:	00809480 	call	80948 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   807d0:	a021883a 	mov	r16,r20
   807d4:	00004b06 	br	80904 <alt_printf+0x1d0>
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   807d8:	10c03fcc 	andi	r3,r2,255
   807dc:	18c0201c 	xori	r3,r3,128
   807e0:	18ffe004 	addi	r3,r3,-128
   807e4:	1dc0061e 	bne	r3,r23,80800 <alt_printf+0xcc>
                {
                    int v = va_arg(args, int);
   807e8:	b4000104 	addi	r16,r22,4
                    alt_putchar(v);
   807ec:	b1000017 	ldw	r4,0(r22)
   807f0:	00809480 	call	80948 <alt_putchar>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   807f4:	802d883a 	mov	r22,r16
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   807f8:	a021883a 	mov	r16,r20
   807fc:	00004106 	br	80904 <alt_printf+0x1d0>
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   80800:	10c03fcc 	andi	r3,r2,255
   80804:	18c0201c 	xori	r3,r3,128
   80808:	18ffe004 	addi	r3,r3,-128
   8080c:	1f00201e 	bne	r3,fp,80890 <alt_printf+0x15c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   80810:	b4400017 	ldw	r17,0(r22)
   80814:	b5800104 	addi	r22,r22,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   80818:	88000426 	beq	r17,zero,8082c <alt_printf+0xf8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8081c:	88bc002c 	andhi	r2,r17,61440
   80820:	10000626 	beq	r2,zero,8083c <alt_printf+0x108>
   80824:	04000704 	movi	r16,28
   80828:	00000a06 	br	80854 <alt_printf+0x120>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   8082c:	01000c04 	movi	r4,48
   80830:	00809480 	call	80948 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80834:	a021883a 	mov	r16,r20

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
                        continue;
   80838:	00003206 	br	80904 <alt_printf+0x1d0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8083c:	04000704 	movi	r16,28
                        digit_shift -= 4;
   80840:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80844:	9c04983a 	sll	r2,r19,r16
   80848:	1444703a 	and	r2,r2,r17
   8084c:	103ffc26 	beq	r2,zero,80840 <tx_descriptor+0xfff7f7e0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80850:	80002716 	blt	r16,zero,808f0 <alt_printf+0x1bc>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80854:	9c08983a 	sll	r4,r19,r16
   80858:	2448703a 	and	r4,r4,r17
   8085c:	2408d83a 	srl	r4,r4,r16
                        if (digit <= 9)
   80860:	a9000236 	bltu	r21,r4,8086c <alt_printf+0x138>
                            c = '0' + digit;
   80864:	21000c04 	addi	r4,r4,48
   80868:	00000106 	br	80870 <alt_printf+0x13c>
                        else
                            c = 'a' + digit - 10;
   8086c:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   80870:	21003fcc 	andi	r4,r4,255
   80874:	2100201c 	xori	r4,r4,128
   80878:	213fe004 	addi	r4,r4,-128
   8087c:	00809480 	call	80948 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80880:	843fff04 	addi	r16,r16,-4
   80884:	803ff30e 	bge	r16,zero,80854 <tx_descriptor+0xfff7f7f4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80888:	a021883a 	mov	r16,r20
   8088c:	00001d06 	br	80904 <alt_printf+0x1d0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80890:	10803fcc 	andi	r2,r2,255
   80894:	1080201c 	xori	r2,r2,128
   80898:	10bfe004 	addi	r2,r2,-128
   8089c:	00c01cc4 	movi	r3,115
   808a0:	10c0151e 	bne	r2,r3,808f8 <alt_printf+0x1c4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   808a4:	b4000017 	ldw	r16,0(r22)
   808a8:	b5800104 	addi	r22,r22,4

                    while(*s)
   808ac:	81000003 	ldbu	r4,0(r16)
   808b0:	20803fcc 	andi	r2,r4,255
   808b4:	1080201c 	xori	r2,r2,128
   808b8:	10bfe004 	addi	r2,r2,-128
   808bc:	10001026 	beq	r2,zero,80900 <alt_printf+0x1cc>
                      alt_putchar(*s++);
   808c0:	84000044 	addi	r16,r16,1
   808c4:	21003fcc 	andi	r4,r4,255
   808c8:	2100201c 	xori	r4,r4,128
   808cc:	213fe004 	addi	r4,r4,-128
   808d0:	00809480 	call	80948 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   808d4:	81000003 	ldbu	r4,0(r16)
   808d8:	20803fcc 	andi	r2,r4,255
   808dc:	1080201c 	xori	r2,r2,128
   808e0:	10bfe004 	addi	r2,r2,-128
   808e4:	103ff61e 	bne	r2,zero,808c0 <tx_descriptor+0xfff7f860>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   808e8:	a021883a 	mov	r16,r20
   808ec:	00000506 	br	80904 <alt_printf+0x1d0>
   808f0:	a021883a 	mov	r16,r20
   808f4:	00000306 	br	80904 <alt_printf+0x1d0>
   808f8:	a021883a 	mov	r16,r20
   808fc:	00000106 	br	80904 <alt_printf+0x1d0>
   80900:	a021883a 	mov	r16,r20
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80904:	81000003 	ldbu	r4,0(r16)
   80908:	20803fcc 	andi	r2,r4,255
   8090c:	1080201c 	xori	r2,r2,128
   80910:	10bfe004 	addi	r2,r2,-128
   80914:	103f9d1e 	bne	r2,zero,8078c <tx_descriptor+0xfff7f72c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   80918:	dfc00917 	ldw	ra,36(sp)
   8091c:	df000817 	ldw	fp,32(sp)
   80920:	ddc00717 	ldw	r23,28(sp)
   80924:	dd800617 	ldw	r22,24(sp)
   80928:	dd400517 	ldw	r21,20(sp)
   8092c:	dd000417 	ldw	r20,16(sp)
   80930:	dcc00317 	ldw	r19,12(sp)
   80934:	dc800217 	ldw	r18,8(sp)
   80938:	dc400117 	ldw	r17,4(sp)
   8093c:	dc000017 	ldw	r16,0(sp)
   80940:	dec00d04 	addi	sp,sp,52
   80944:	f800283a 	ret

00080948 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   80948:	deffff04 	addi	sp,sp,-4
   8094c:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   80950:	d0a00c17 	ldw	r2,-32720(gp)
   80954:	11400217 	ldw	r5,8(r2)
   80958:	00822fc0 	call	822fc <putc>
#endif
#endif
}
   8095c:	dfc00017 	ldw	ra,0(sp)
   80960:	dec00104 	addi	sp,sp,4
   80964:	f800283a 	ret

00080968 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80968:	deffff04 	addi	sp,sp,-4
   8096c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   80970:	0081d940 	call	81d94 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80974:	00800044 	movi	r2,1
   80978:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8097c:	dfc00017 	ldw	ra,0(sp)
   80980:	dec00104 	addi	sp,sp,4
   80984:	f800283a 	ret

00080988 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80988:	defffe04 	addi	sp,sp,-8
   8098c:	dfc00115 	stw	ra,4(sp)
   80990:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80994:	04000234 	movhi	r16,8
   80998:	84146304 	addi	r16,r16,20876
   8099c:	000d883a 	mov	r6,zero
   809a0:	000b883a 	mov	r5,zero
   809a4:	8009883a 	mov	r4,r16
   809a8:	0080bcc0 	call	80bcc <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   809ac:	d1600304 	addi	r5,gp,-32756
   809b0:	813ff604 	addi	r4,r16,-40
   809b4:	008175c0 	call	8175c <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   809b8:	01800044 	movi	r6,1
   809bc:	000b883a 	mov	r5,zero
   809c0:	01000234 	movhi	r4,8
   809c4:	21144d04 	addi	r4,r4,20788
   809c8:	00815700 	call	81570 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   809cc:	01800084 	movi	r6,2
   809d0:	000b883a 	mov	r5,zero
   809d4:	01000234 	movhi	r4,8
   809d8:	21144104 	addi	r4,r4,20740
   809dc:	00815700 	call	81570 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
}
   809e0:	dfc00117 	ldw	ra,4(sp)
   809e4:	dc000017 	ldw	r16,0(sp)
   809e8:	dec00204 	addi	sp,sp,8
   809ec:	f800283a 	ret

000809f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   809f0:	deffff04 	addi	sp,sp,-4
   809f4:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   809f8:	20800017 	ldw	r2,0(r4)
   809fc:	21c00217 	ldw	r7,8(r4)
   80a00:	11000a04 	addi	r4,r2,40
   80a04:	0080d080 	call	80d08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80a08:	dfc00017 	ldw	ra,0(sp)
   80a0c:	dec00104 	addi	sp,sp,4
   80a10:	f800283a 	ret

00080a14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80a14:	deffff04 	addi	sp,sp,-4
   80a18:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80a1c:	20800017 	ldw	r2,0(r4)
   80a20:	21c00217 	ldw	r7,8(r4)
   80a24:	11000a04 	addi	r4,r2,40
   80a28:	0080e600 	call	80e60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80a2c:	dfc00017 	ldw	ra,0(sp)
   80a30:	dec00104 	addi	sp,sp,4
   80a34:	f800283a 	ret

00080a38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80a38:	deffff04 	addi	sp,sp,-4
   80a3c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80a40:	20800017 	ldw	r2,0(r4)
   80a44:	21400217 	ldw	r5,8(r4)
   80a48:	11000a04 	addi	r4,r2,40
   80a4c:	0080c440 	call	80c44 <altera_avalon_jtag_uart_close>
}
   80a50:	dfc00017 	ldw	ra,0(sp)
   80a54:	dec00104 	addi	sp,sp,4
   80a58:	f800283a 	ret

00080a5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80a5c:	deffff04 	addi	sp,sp,-4
   80a60:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80a64:	21000017 	ldw	r4,0(r4)
   80a68:	21000a04 	addi	r4,r4,40
   80a6c:	0080c800 	call	80c80 <altera_avalon_jtag_uart_ioctl>
}
   80a70:	dfc00017 	ldw	ra,0(sp)
   80a74:	dec00104 	addi	sp,sp,4
   80a78:	f800283a 	ret

00080a7c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80a7c:	20800017 	ldw	r2,0(r4)
   80a80:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   80a84:	1081000c 	andi	r2,r2,1024
   80a88:	10000626 	beq	r2,zero,80aa4 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80a8c:	20c00017 	ldw	r3,0(r4)
   80a90:	20800817 	ldw	r2,32(r4)
   80a94:	10810014 	ori	r2,r2,1024
   80a98:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
   80a9c:	20000915 	stw	zero,36(r4)
   80aa0:	00000606 	br	80abc <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   80aa4:	20800917 	ldw	r2,36(r4)
   80aa8:	00e00034 	movhi	r3,32768
   80aac:	18ffff04 	addi	r3,r3,-4
   80ab0:	18800236 	bltu	r3,r2,80abc <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   80ab4:	10800044 	addi	r2,r2,1
   80ab8:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80abc:	d0a7cd17 	ldw	r2,-24780(gp)
   80ac0:	f800283a 	ret

00080ac4 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   80ac4:	21800017 	ldw	r6,0(r4)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80ac8:	32000104 	addi	r8,r6,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80acc:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80ad0:	02ffff44 	movi	r11,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80ad4:	4013883a 	mov	r9,r8
   80ad8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80adc:	3880c00c 	andi	r2,r7,768
   80ae0:	10003926 	beq	r2,zero,80bc8 <altera_avalon_jtag_uart_irq+0x104>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80ae4:	3880400c 	andi	r2,r7,256
   80ae8:	10001c26 	beq	r2,zero,80b5c <altera_avalon_jtag_uart_irq+0x98>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80aec:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   80af0:	10800044 	addi	r2,r2,1
   80af4:	1081ffcc 	andi	r2,r2,2047
   80af8:	20c00b17 	ldw	r3,44(r4)
   80afc:	10c01226 	beq	r2,r3,80b48 <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80b00:	30800037 	ldwio	r2,0(r6)
   80b04:	100b883a 	mov	r5,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80b08:	10e0000c 	andi	r3,r2,32768
   80b0c:	18000c26 	beq	r3,zero,80b40 <altera_avalon_jtag_uart_irq+0x7c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80b10:	20c00a17 	ldw	r3,40(r4)
   80b14:	20c7883a 	add	r3,r4,r3
   80b18:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b1c:	20800a17 	ldw	r2,40(r4)
   80b20:	10800044 	addi	r2,r2,1
   80b24:	1081ffcc 	andi	r2,r2,2047
   80b28:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b2c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   80b30:	10800044 	addi	r2,r2,1
   80b34:	1081ffcc 	andi	r2,r2,2047
   80b38:	20c00b17 	ldw	r3,44(r4)
   80b3c:	10fff01e 	bne	r2,r3,80b00 <tx_descriptor+0xfff7faa0>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80b40:	297fffec 	andhi	r5,r5,65535
   80b44:	28000526 	beq	r5,zero,80b5c <altera_avalon_jtag_uart_irq+0x98>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80b48:	20800817 	ldw	r2,32(r4)
   80b4c:	1284703a 	and	r2,r2,r10
   80b50:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80b54:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80b58:	40800037 	ldwio	r2,0(r8)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80b5c:	3880800c 	andi	r2,r7,512
   80b60:	103fdc26 	beq	r2,zero,80ad4 <tx_descriptor+0xfff7fa74>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80b64:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   80b68:	383fda26 	beq	r7,zero,80ad4 <tx_descriptor+0xfff7fa74>
   80b6c:	20c00d17 	ldw	r3,52(r4)
   80b70:	20800c17 	ldw	r2,48(r4)
   80b74:	18800d26 	beq	r3,r2,80bac <altera_avalon_jtag_uart_irq+0xe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80b78:	20800d17 	ldw	r2,52(r4)
   80b7c:	2085883a 	add	r2,r4,r2
   80b80:	10820e07 	ldb	r2,2104(r2)
   80b84:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b88:	20800d17 	ldw	r2,52(r4)
   80b8c:	10800044 	addi	r2,r2,1
   80b90:	1081ffcc 	andi	r2,r2,2047
   80b94:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80b98:	39ffffc4 	addi	r7,r7,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80b9c:	383fcd26 	beq	r7,zero,80ad4 <tx_descriptor+0xfff7fa74>
   80ba0:	20c00d17 	ldw	r3,52(r4)
   80ba4:	20800c17 	ldw	r2,48(r4)
   80ba8:	18bff31e 	bne	r3,r2,80b78 <tx_descriptor+0xfff7fb18>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80bac:	20800817 	ldw	r2,32(r4)
   80bb0:	12c4703a 	and	r2,r2,r11
   80bb4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80bb8:	20c00017 	ldw	r3,0(r4)
   80bbc:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80bc0:	48800037 	ldwio	r2,0(r9)
   80bc4:	003fc306 	br	80ad4 <tx_descriptor+0xfff7fa74>
   80bc8:	f800283a 	ret

00080bcc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80bcc:	defffd04 	addi	sp,sp,-12
   80bd0:	dfc00215 	stw	ra,8(sp)
   80bd4:	dc000115 	stw	r16,4(sp)
   80bd8:	2021883a 	mov	r16,r4
   80bdc:	2809883a 	mov	r4,r5
   80be0:	300b883a 	mov	r5,r6
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80be4:	00800044 	movi	r2,1
   80be8:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80bec:	80c00017 	ldw	r3,0(r16)
   80bf0:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80bf4:	d8000015 	stw	zero,0(sp)
   80bf8:	800f883a 	mov	r7,r16
   80bfc:	01800234 	movhi	r6,8
   80c00:	3182b104 	addi	r6,r6,2756
   80c04:	00818500 	call	81850 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80c08:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80c0c:	800f883a 	mov	r7,r16
   80c10:	01800234 	movhi	r6,8
   80c14:	31829f04 	addi	r6,r6,2684
   80c18:	d167cd17 	ldw	r5,-24780(gp)
   80c1c:	81000204 	addi	r4,r16,8
   80c20:	00815f40 	call	815f4 <alt_alarm_start>
   80c24:	1000030e 	bge	r2,zero,80c34 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80c28:	00a00034 	movhi	r2,32768
   80c2c:	10bfffc4 	addi	r2,r2,-1
   80c30:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80c34:	dfc00217 	ldw	ra,8(sp)
   80c38:	dc000117 	ldw	r16,4(sp)
   80c3c:	dec00304 	addi	sp,sp,12
   80c40:	f800283a 	ret

00080c44 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80c44:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   80c48:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80c4c:	00000106 	br	80c54 <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
   80c50:	2800071e 	bne	r5,zero,80c70 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80c54:	20800d17 	ldw	r2,52(r4)
   80c58:	11800726 	beq	r2,r6,80c78 <altera_avalon_jtag_uart_close+0x34>
   80c5c:	20c00917 	ldw	r3,36(r4)
   80c60:	20800117 	ldw	r2,4(r4)
   80c64:	18bffa36 	bltu	r3,r2,80c50 <tx_descriptor+0xfff7fbf0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   80c68:	0005883a 	mov	r2,zero
   80c6c:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   80c70:	00bffd44 	movi	r2,-11
   80c74:	f800283a 	ret
    }
  }

  return 0;
   80c78:	0005883a 	mov	r2,zero
}
   80c7c:	f800283a 	ret

00080c80 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   80c80:	009a8044 	movi	r2,27137
   80c84:	28800326 	beq	r5,r2,80c94 <altera_avalon_jtag_uart_ioctl+0x14>
   80c88:	009a8084 	movi	r2,27138
   80c8c:	28800f26 	beq	r5,r2,80ccc <altera_avalon_jtag_uart_ioctl+0x4c>
   80c90:	00001706 	br	80cf0 <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   80c94:	20c00117 	ldw	r3,4(r4)
   80c98:	00a00034 	movhi	r2,32768
   80c9c:	10bfffc4 	addi	r2,r2,-1
   80ca0:	18801526 	beq	r3,r2,80cf8 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   80ca4:	30800017 	ldw	r2,0(r6)
   80ca8:	10ffff84 	addi	r3,r2,-2
   80cac:	01600034 	movhi	r5,32768
   80cb0:	297fff04 	addi	r5,r5,-4
   80cb4:	28c0022e 	bgeu	r5,r3,80cc0 <altera_avalon_jtag_uart_ioctl+0x40>
   80cb8:	00a00034 	movhi	r2,32768
   80cbc:	10bfff84 	addi	r2,r2,-2
   80cc0:	20800115 	stw	r2,4(r4)
      rc = 0;
   80cc4:	0005883a 	mov	r2,zero
   80cc8:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80ccc:	20c00117 	ldw	r3,4(r4)
   80cd0:	00a00034 	movhi	r2,32768
   80cd4:	10bfffc4 	addi	r2,r2,-1
   80cd8:	18800926 	beq	r3,r2,80d00 <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80cdc:	20800917 	ldw	r2,36(r4)
   80ce0:	10c5803a 	cmpltu	r2,r2,r3
   80ce4:	30800015 	stw	r2,0(r6)
      rc = 0;
   80ce8:	0005883a 	mov	r2,zero
   80cec:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   80cf0:	00bff9c4 	movi	r2,-25
   80cf4:	f800283a 	ret
   80cf8:	00bff9c4 	movi	r2,-25
   80cfc:	f800283a 	ret
   80d00:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   80d04:	f800283a 	ret

00080d08 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80d08:	0180450e 	bge	zero,r6,80e20 <altera_avalon_jtag_uart_read+0x118>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80d0c:	defff504 	addi	sp,sp,-44
   80d10:	dfc00a15 	stw	ra,40(sp)
   80d14:	df000915 	stw	fp,36(sp)
   80d18:	ddc00815 	stw	r23,32(sp)
   80d1c:	dd800715 	stw	r22,28(sp)
   80d20:	dd400615 	stw	r21,24(sp)
   80d24:	dd000515 	stw	r20,20(sp)
   80d28:	dcc00415 	stw	r19,16(sp)
   80d2c:	dc800315 	stw	r18,12(sp)
   80d30:	dc400215 	stw	r17,8(sp)
   80d34:	dc000115 	stw	r16,4(sp)
   80d38:	2023883a 	mov	r17,r4
   80d3c:	2839883a 	mov	fp,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80d40:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80d44:	25800e04 	addi	r22,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80d48:	39d0000c 	andi	r7,r7,16384
   80d4c:	d9c00015 	stw	r7,0(sp)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80d50:	e029883a 	mov	r20,fp
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   80d54:	8cc00a17 	ldw	r19,40(r17)
      out = sp->rx_out;
   80d58:	8c800b17 	ldw	r18,44(r17)

      if (in >= out)
   80d5c:	9c800236 	bltu	r19,r18,80d68 <altera_avalon_jtag_uart_read+0x60>
        n = in - out;
   80d60:	9ca1c83a 	sub	r16,r19,r18
   80d64:	00000106 	br	80d6c <altera_avalon_jtag_uart_read+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80d68:	bca1c83a 	sub	r16,r23,r18

      if (n == 0)
   80d6c:	80000d26 	beq	r16,zero,80da4 <altera_avalon_jtag_uart_read+0x9c>
        break; /* No more data available */

      if (n > space)
   80d70:	302b883a 	mov	r21,r6
   80d74:	3400012e 	bgeu	r6,r16,80d7c <altera_avalon_jtag_uart_read+0x74>
   80d78:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80d7c:	800d883a 	mov	r6,r16
   80d80:	b48b883a 	add	r5,r22,r18
   80d84:	a009883a 	mov	r4,r20
   80d88:	00821140 	call	82114 <memcpy>
      ptr   += n;
   80d8c:	a429883a 	add	r20,r20,r16
      space -= n;
   80d90:	ac0dc83a 	sub	r6,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d94:	9421883a 	add	r16,r18,r16
   80d98:	8401ffcc 	andi	r16,r16,2047
   80d9c:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   80da0:	01bfec16 	blt	zero,r6,80d54 <tx_descriptor+0xfff7fcf4>

    /* If we read any data then return it */
    if (ptr != buffer)
   80da4:	a700121e 	bne	r20,fp,80df0 <altera_avalon_jtag_uart_read+0xe8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80da8:	d8800017 	ldw	r2,0(sp)
   80dac:	10000a1e 	bne	r2,zero,80dd8 <altera_avalon_jtag_uart_read+0xd0>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   80db0:	88800a17 	ldw	r2,40(r17)
   80db4:	9880031e 	bne	r19,r2,80dc4 <altera_avalon_jtag_uart_read+0xbc>
   80db8:	88c00917 	ldw	r3,36(r17)
   80dbc:	88800117 	ldw	r2,4(r17)
   80dc0:	18bffb36 	bltu	r3,r2,80db0 <tx_descriptor+0xfff7fd50>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   80dc4:	88800a17 	ldw	r2,40(r17)
   80dc8:	98800526 	beq	r19,r2,80de0 <altera_avalon_jtag_uart_read+0xd8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80dcc:	01bfe016 	blt	zero,r6,80d50 <tx_descriptor+0xfff7fcf0>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   80dd0:	00bffec4 	movi	r2,-5
   80dd4:	00001606 	br	80e30 <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80dd8:	00bffd44 	movi	r2,-11
   80ddc:	00001406 	br	80e30 <altera_avalon_jtag_uart_read+0x128>
  else
    return -EIO;
   80de0:	00bffec4 	movi	r2,-5
   80de4:	00001206 	br	80e30 <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80de8:	00bffd44 	movi	r2,-11
   80dec:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80df0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80df4:	00bfff84 	movi	r2,-2
   80df8:	1884703a 	and	r2,r3,r2
   80dfc:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80e00:	88800817 	ldw	r2,32(r17)
   80e04:	10800054 	ori	r2,r2,1
   80e08:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80e0c:	89000017 	ldw	r4,0(r17)
   80e10:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80e14:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   80e18:	a705c83a 	sub	r2,r20,fp
   80e1c:	00000406 	br	80e30 <altera_avalon_jtag_uart_read+0x128>
  else if (flags & O_NONBLOCK)
   80e20:	39d0000c 	andi	r7,r7,16384
   80e24:	383ff01e 	bne	r7,zero,80de8 <tx_descriptor+0xfff7fd88>
    return -EWOULDBLOCK;
  else
    return -EIO;
   80e28:	00bffec4 	movi	r2,-5
   80e2c:	f800283a 	ret
}
   80e30:	dfc00a17 	ldw	ra,40(sp)
   80e34:	df000917 	ldw	fp,36(sp)
   80e38:	ddc00817 	ldw	r23,32(sp)
   80e3c:	dd800717 	ldw	r22,28(sp)
   80e40:	dd400617 	ldw	r21,24(sp)
   80e44:	dd000517 	ldw	r20,20(sp)
   80e48:	dcc00417 	ldw	r19,16(sp)
   80e4c:	dc800317 	ldw	r18,12(sp)
   80e50:	dc400217 	ldw	r17,8(sp)
   80e54:	dc000117 	ldw	r16,4(sp)
   80e58:	dec00b04 	addi	sp,sp,44
   80e5c:	f800283a 	ret

00080e60 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80e60:	defff504 	addi	sp,sp,-44
   80e64:	dfc00a15 	stw	ra,40(sp)
   80e68:	df000915 	stw	fp,36(sp)
   80e6c:	ddc00815 	stw	r23,32(sp)
   80e70:	dd800715 	stw	r22,28(sp)
   80e74:	dd400615 	stw	r21,24(sp)
   80e78:	dd000515 	stw	r20,20(sp)
   80e7c:	dcc00415 	stw	r19,16(sp)
   80e80:	dc800315 	stw	r18,12(sp)
   80e84:	dc400215 	stw	r17,8(sp)
   80e88:	dc000115 	stw	r16,4(sp)
   80e8c:	2021883a 	mov	r16,r4
   80e90:	282f883a 	mov	r23,r5
   80e94:	d9c00015 	stw	r7,0(sp)
   80e98:	2827883a 	mov	r19,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80e9c:	05bfff84 	movi	r22,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   80ea0:	3d50000c 	andi	r21,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   80ea4:	27020e04 	addi	fp,r4,2104
   80ea8:	00001906 	br	80f10 <altera_avalon_jtag_uart_write+0xb0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   80eac:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   80eb0:	81000d17 	ldw	r4,52(r16)

      if (in < out)
   80eb4:	9100032e 	bgeu	r18,r4,80ec4 <altera_avalon_jtag_uart_write+0x64>
        n = out - 1 - in;
   80eb8:	247fffc4 	addi	r17,r4,-1
   80ebc:	8ca3c83a 	sub	r17,r17,r18
   80ec0:	00000606 	br	80edc <altera_avalon_jtag_uart_write+0x7c>
      else if (out > 0)
   80ec4:	20000326 	beq	r4,zero,80ed4 <altera_avalon_jtag_uart_write+0x74>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   80ec8:	00820004 	movi	r2,2048
   80ecc:	14a3c83a 	sub	r17,r2,r18
   80ed0:	00000206 	br	80edc <altera_avalon_jtag_uart_write+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   80ed4:	00c1ffc4 	movi	r3,2047
   80ed8:	1ca3c83a 	sub	r17,r3,r18

      if (n == 0)
   80edc:	88002b26 	beq	r17,zero,80f8c <altera_avalon_jtag_uart_write+0x12c>
        break;

      if (n > count)
   80ee0:	3029883a 	mov	r20,r6
   80ee4:	3440012e 	bgeu	r6,r17,80eec <altera_avalon_jtag_uart_write+0x8c>
   80ee8:	3023883a 	mov	r17,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   80eec:	880d883a 	mov	r6,r17
   80ef0:	980b883a 	mov	r5,r19
   80ef4:	e489883a 	add	r4,fp,r18
   80ef8:	00821140 	call	82114 <memcpy>
      ptr   += n;
   80efc:	9c67883a 	add	r19,r19,r17
      count -= n;
   80f00:	a44dc83a 	sub	r6,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80f04:	9463883a 	add	r17,r18,r17
   80f08:	8c41ffcc 	andi	r17,r17,2047
   80f0c:	84400c15 	stw	r17,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80f10:	01bfe616 	blt	zero,r6,80eac <tx_descriptor+0xfff7fe4c>
   80f14:	00001106 	br	80f5c <altera_avalon_jtag_uart_write+0xfc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   80f18:	80800d17 	ldw	r2,52(r16)
   80f1c:	2080031e 	bne	r4,r2,80f2c <altera_avalon_jtag_uart_write+0xcc>
   80f20:	80c00917 	ldw	r3,36(r16)
   80f24:	80800117 	ldw	r2,4(r16)
   80f28:	18bffb36 	bltu	r3,r2,80f18 <tx_descriptor+0xfff7feb8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   80f2c:	80800917 	ldw	r2,36(r16)
   80f30:	103ff726 	beq	r2,zero,80f10 <tx_descriptor+0xfff7feb0>
   80f34:	00002006 	br	80fb8 <altera_avalon_jtag_uart_write+0x158>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   80f38:	9dc5c83a 	sub	r2,r19,r23
   80f3c:	00002306 	br	80fcc <altera_avalon_jtag_uart_write+0x16c>
  else if (flags & O_NONBLOCK)
   80f40:	d8c00017 	ldw	r3,0(sp)
   80f44:	1890000c 	andi	r2,r3,16384
   80f48:	1000021e 	bne	r2,zero,80f54 <altera_avalon_jtag_uart_write+0xf4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   80f4c:	00bffec4 	movi	r2,-5
   80f50:	00001e06 	br	80fcc <altera_avalon_jtag_uart_write+0x16c>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80f54:	00bffd44 	movi	r2,-11
   80f58:	00001c06 	br	80fcc <altera_avalon_jtag_uart_write+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f5c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f60:	00bfff84 	movi	r2,-2
   80f64:	1884703a 	and	r2,r3,r2
   80f68:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80f6c:	80800817 	ldw	r2,32(r16)
   80f70:	10800094 	ori	r2,r2,2
   80f74:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80f78:	81000017 	ldw	r4,0(r16)
   80f7c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80f80:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80f84:	9dffec1e 	bne	r19,r23,80f38 <tx_descriptor+0xfff7fed8>
   80f88:	003fed06 	br	80f40 <tx_descriptor+0xfff7fee0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80f8c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80f90:	1d84703a 	and	r2,r3,r22
   80f94:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80f98:	80800817 	ldw	r2,32(r16)
   80f9c:	10800094 	ori	r2,r2,2
   80fa0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80fa4:	81400017 	ldw	r5,0(r16)
   80fa8:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80fac:	1801703a 	wrctl	status,r3
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   80fb0:	a83fd926 	beq	r21,zero,80f18 <tx_descriptor+0xfff7feb8>
   80fb4:	00000306 	br	80fc4 <altera_avalon_jtag_uart_write+0x164>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80fb8:	9dffdf1e 	bne	r19,r23,80f38 <tx_descriptor+0xfff7fed8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   80fbc:	00bffec4 	movi	r2,-5
   80fc0:	00000206 	br	80fcc <altera_avalon_jtag_uart_write+0x16c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80fc4:	9dffdc1e 	bne	r19,r23,80f38 <tx_descriptor+0xfff7fed8>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   80fc8:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   80fcc:	dfc00a17 	ldw	ra,40(sp)
   80fd0:	df000917 	ldw	fp,36(sp)
   80fd4:	ddc00817 	ldw	r23,32(sp)
   80fd8:	dd800717 	ldw	r22,28(sp)
   80fdc:	dd400617 	ldw	r21,24(sp)
   80fe0:	dd000517 	ldw	r20,20(sp)
   80fe4:	dcc00417 	ldw	r19,16(sp)
   80fe8:	dc800317 	ldw	r18,12(sp)
   80fec:	dc400217 	ldw	r17,8(sp)
   80ff0:	dc000117 	ldw	r16,4(sp)
   80ff4:	dec00b04 	addi	sp,sp,44
   80ff8:	f800283a 	ret

00080ffc <alt_avalon_sgdma_irq>:
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   80ffc:	20800317 	ldw	r2,12(r4)
   81000:	10800404 	addi	r2,r2,16
   81004:	10c00037 	ldwio	r3,0(r2)
   81008:	18e00034 	orhi	r3,r3,32768
   8100c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81010:	20800317 	ldw	r2,12(r4)
   81014:	10800437 	ldwio	r2,16(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   81018:	20800917 	ldw	r2,36(r4)
   8101c:	10000e26 	beq	r2,zero,81058 <alt_avalon_sgdma_irq+0x5c>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   81020:	defffe04 	addi	sp,sp,-8
   81024:	dfc00115 	stw	ra,4(sp)
   81028:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8102c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81030:	00bfff84 	movi	r2,-2
   81034:	8084703a 	and	r2,r16,r2
   81038:	1001703a 	wrctl	status,r2
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
   8103c:	20800917 	ldw	r2,36(r4)
   81040:	21000a17 	ldw	r4,40(r4)
   81044:	103ee83a 	callr	r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81048:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
   8104c:	dfc00117 	ldw	ra,4(sp)
   81050:	dc000017 	ldw	r16,0(sp)
   81054:	dec00204 	addi	sp,sp,8
   81058:	f800283a 	ret

0008105c <alt_avalon_sgdma_do_async_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8105c:	20800317 	ldw	r2,12(r4)
   81060:	10800037 	ldwio	r2,0(r2)
   81064:	1080040c 	andi	r2,r2,16
   81068:	10001d1e 	bne	r2,zero,810e0 <alt_avalon_sgdma_do_async_transfer+0x84>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8106c:	20c00317 	ldw	r3,12(r4)
   81070:	18c00404 	addi	r3,r3,16
   81074:	19c00037 	ldwio	r7,0(r3)
   81078:	01bff7c4 	movi	r6,-33
   8107c:	398c703a 	and	r6,r7,r6
   81080:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81084:	20c00317 	ldw	r3,12(r4)
   81088:	01803fc4 	movi	r6,255
   8108c:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81090:	20c00317 	ldw	r3,12(r4)
   81094:	19400835 	stwio	r5,32(r3)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   81098:	20c00917 	ldw	r3,36(r4)
   8109c:	18000826 	beq	r3,zero,810c0 <alt_avalon_sgdma_do_async_transfer+0x64>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   810a0:	20c00317 	ldw	r3,12(r4)
   810a4:	18c00404 	addi	r3,r3,16
   810a8:	19400037 	ldwio	r5,0(r3)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   810ac:	21000b17 	ldw	r4,44(r4)
   810b0:	21001814 	ori	r4,r4,96
   810b4:	2148b03a 	or	r4,r4,r5
   810b8:	19000035 	stwio	r4,0(r3)
   810bc:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   810c0:	21000317 	ldw	r4,12(r4)
   810c4:	21000404 	addi	r4,r4,16
   810c8:	21400037 	ldwio	r5,0(r4)
   810cc:	00fffbc4 	movi	r3,-17
   810d0:	28c6703a 	and	r3,r5,r3

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   810d4:	18c01814 	ori	r3,r3,96
   810d8:	20c00035 	stwio	r3,0(r4)
   810dc:	f800283a 	ret
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   810e0:	00bffc04 	movi	r2,-16
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
   810e4:	f800283a 	ret

000810e8 <alt_avalon_sgdma_do_sync_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   810e8:	20800317 	ldw	r2,12(r4)
   810ec:	10800037 	ldwio	r2,0(r2)
   810f0:	1080040c 	andi	r2,r2,16
   810f4:	103ffc1e 	bne	r2,zero,810e8 <tx_descriptor+0xfff80088>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   810f8:	20800317 	ldw	r2,12(r4)
   810fc:	10800404 	addi	r2,r2,16
   81100:	11800037 	ldwio	r6,0(r2)
   81104:	00fff7c4 	movi	r3,-33
   81108:	30c6703a 	and	r3,r6,r3
   8110c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81110:	20800317 	ldw	r2,12(r4)
   81114:	00c03fc4 	movi	r3,255
   81118:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8111c:	20800317 	ldw	r2,12(r4)
   81120:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81124:	20800317 	ldw	r2,12(r4)
   81128:	10800404 	addi	r2,r2,16
   8112c:	10c00037 	ldwio	r3,0(r2)
   81130:	18c01814 	ori	r3,r3,96
   81134:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81138:	20800317 	ldw	r2,12(r4)
   8113c:	10800037 	ldwio	r2,0(r2)
   81140:	1080040c 	andi	r2,r2,16
   81144:	103ffc1e 	bne	r2,zero,81138 <tx_descriptor+0xfff800d8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81148:	20800317 	ldw	r2,12(r4)
   8114c:	10800404 	addi	r2,r2,16
   81150:	11400037 	ldwio	r5,0(r2)
   81154:	00fff7c4 	movi	r3,-33
   81158:	28c6703a 	and	r3,r5,r3
   8115c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   81160:	20c00317 	ldw	r3,12(r4)
   81164:	18800037 	ldwio	r2,0(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81168:	01003fc4 	movi	r4,255
   8116c:	19000035 	stwio	r4,0(r3)

  return status;
}
   81170:	f800283a 	ret

00081174 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
   81174:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
   81178:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
   8117c:	21800b15 	stw	r6,44(r4)
   81180:	f800283a 	ret

00081184 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81184:	20800317 	ldw	r2,12(r4)
   81188:	10800404 	addi	r2,r2,16
   8118c:	10c00037 	ldwio	r3,0(r2)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81190:	18c00814 	ori	r3,r3,32
   81194:	10c00035 	stwio	r3,0(r2)
   81198:	f800283a 	ret

0008119c <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8119c:	20800317 	ldw	r2,12(r4)
   811a0:	10800404 	addi	r2,r2,16
   811a4:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   811a8:	00fff7c4 	movi	r3,-33
   811ac:	20c6703a 	and	r3,r4,r3
   811b0:	10c00035 	stwio	r3,0(r2)
   811b4:	f800283a 	ret

000811b8 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   811b8:	208007a3 	ldbuio	r2,30(r4)
   811bc:	10801fcc 	andi	r2,r2,127
   811c0:	1000041e 	bne	r2,zero,811d4 <alt_avalon_sgdma_check_descriptor_status+0x1c>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   811c4:	208007e3 	ldbuio	r2,31(r4)
   811c8:	1080200c 	andi	r2,r2,128
   811cc:	1000031e 	bne	r2,zero,811dc <alt_avalon_sgdma_check_descriptor_status+0x24>
   811d0:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   811d4:	00bffec4 	movi	r2,-5
   811d8:	f800283a 	ret
  }

  if( IORD_8DIRECT(&desc->control, 0) &
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   811dc:	00bfe244 	movi	r2,-119
  }

    return 0;
}
   811e0:	f800283a 	ret

000811e4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   811e4:	defffe04 	addi	sp,sp,-8
   811e8:	dfc00115 	stw	ra,4(sp)
   811ec:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   811f0:	d1600004 	addi	r5,gp,-32768
   811f4:	00817d00 	call	817d0 <alt_find_dev>
   811f8:	1021883a 	mov	r16,r2

  if (NULL == dev) {
   811fc:	1000071e 	bne	r2,zero,8121c <alt_avalon_sgdma_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   81200:	d0a00717 	ldw	r2,-32740(gp)
   81204:	10000226 	beq	r2,zero,81210 <alt_avalon_sgdma_open+0x2c>
   81208:	103ee83a 	callr	r2
   8120c:	00000106 	br	81214 <alt_avalon_sgdma_open+0x30>
   81210:	d0a7cf04 	addi	r2,gp,-24772
    ALT_ERRNO = ENODEV;
   81214:	00c004c4 	movi	r3,19
   81218:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
   8121c:	8005883a 	mov	r2,r16
   81220:	dfc00117 	ldw	ra,4(sp)
   81224:	dc000017 	ldw	r16,0(sp)
   81228:	dec00204 	addi	sp,sp,8
   8122c:	f800283a 	ret

00081230 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81230:	20c00317 	ldw	r3,12(r4)
   81234:	18c00404 	addi	r3,r3,16
   81238:	19000037 	ldwio	r4,0(r3)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   8123c:	00a00434 	movhi	r2,32784
   81240:	10bfffc4 	addi	r2,r2,-1
   81244:	2084703a 	and	r2,r4,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81248:	280a953a 	slli	r5,r5,20
   8124c:	295ffc2c 	andhi	r5,r5,32752
   81250:	29400134 	orhi	r5,r5,4
   81254:	288ab03a 	or	r5,r5,r2
   81258:	19400035 	stwio	r5,0(r3)
   8125c:	f800283a 	ret

00081260 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81260:	20800317 	ldw	r2,12(r4)
   81264:	10800404 	addi	r2,r2,16
   81268:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8126c:	00ffff34 	movhi	r3,65532
   81270:	18ffffc4 	addi	r3,r3,-1
   81274:	20c6703a 	and	r3,r4,r3
   81278:	10c00035 	stwio	r3,0(r2)
   8127c:	f800283a 	ret

00081280 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81280:	deffff04 	addi	sp,sp,-4
   81284:	dfc00015 	stw	ra,0(sp)
   81288:	da000717 	ldw	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   8128c:	288007c3 	ldbu	r2,31(r5)
   81290:	10801fcc 	andi	r2,r2,127
   81294:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81298:	21800005 	stb	r6,0(r4)
   8129c:	3004d23a 	srli	r2,r6,8
   812a0:	20800045 	stb	r2,1(r4)
   812a4:	3004d43a 	srli	r2,r6,16
   812a8:	20800085 	stb	r2,2(r4)
   812ac:	300cd63a 	srli	r6,r6,24
   812b0:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
   812b4:	21c00205 	stb	r7,8(r4)
   812b8:	3804d23a 	srli	r2,r7,8
   812bc:	20800245 	stb	r2,9(r4)
   812c0:	3804d43a 	srli	r2,r7,16
   812c4:	20800285 	stb	r2,10(r4)
   812c8:	380ed63a 	srli	r7,r7,24
   812cc:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
   812d0:	21400405 	stb	r5,16(r4)
   812d4:	2804d23a 	srli	r2,r5,8
   812d8:	20800445 	stb	r2,17(r4)
   812dc:	2804d43a 	srli	r2,r5,16
   812e0:	20800485 	stb	r2,18(r4)
   812e4:	280ad63a 	srli	r5,r5,24
   812e8:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
   812ec:	20000105 	stb	zero,4(r4)
   812f0:	20000145 	stb	zero,5(r4)
   812f4:	20000185 	stb	zero,6(r4)
   812f8:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
   812fc:	20000305 	stb	zero,12(r4)
   81300:	20000345 	stb	zero,13(r4)
   81304:	20000385 	stb	zero,14(r4)
   81308:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
   8130c:	20000505 	stb	zero,20(r4)
   81310:	20000545 	stb	zero,21(r4)
   81314:	20000585 	stb	zero,22(r4)
   81318:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
   8131c:	d880010b 	ldhu	r2,4(sp)
   81320:	20800605 	stb	r2,24(r4)
   81324:	1004d23a 	srli	r2,r2,8
   81328:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
   8132c:	20000705 	stb	zero,28(r4)
   81330:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
   81334:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   81338:	d8800517 	ldw	r2,20(sp)
   8133c:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
   81340:	d8800617 	ldw	r2,24(sp)
   81344:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   81348:	d8800217 	ldw	r2,8(sp)
   8134c:	1004c03a 	cmpne	r2,r2,zero
   81350:	10bfe004 	addi	r2,r2,-128
   81354:	d8c00317 	ldw	r3,12(sp)
   81358:	1806c03a 	cmpne	r3,r3,zero
   8135c:	1806907a 	slli	r3,r3,1
   81360:	10c4b03a 	or	r2,r2,r3
   81364:	d8c00417 	ldw	r3,16(sp)
   81368:	1806c03a 	cmpne	r3,r3,zero
   8136c:	180690ba 	slli	r3,r3,2
   81370:	10c4b03a 	or	r2,r2,r3
   81374:	40c03fcc 	andi	r3,r8,255
   81378:	18000326 	beq	r3,zero,81388 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
   8137c:	420003cc 	andi	r8,r8,15
   81380:	401090fa 	slli	r8,r8,3
   81384:	00000106 	br	8138c <alt_avalon_sgdma_construct_descriptor_burst+0x10c>
   81388:	0011883a 	mov	r8,zero
   8138c:	1204b03a 	or	r2,r2,r8
   81390:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   81394:	01400804 	movi	r5,32
   81398:	008174c0 	call	8174c <alt_dcache_flush>
}
   8139c:	dfc00017 	ldw	ra,0(sp)
   813a0:	dec00104 	addi	sp,sp,4
   813a4:	f800283a 	ret

000813a8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   813a8:	defff804 	addi	sp,sp,-32
   813ac:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   813b0:	d8000615 	stw	zero,24(sp)
   813b4:	d8800c17 	ldw	r2,48(sp)
   813b8:	d8800515 	stw	r2,20(sp)
   813bc:	d8800b17 	ldw	r2,44(sp)
   813c0:	d8800415 	stw	r2,16(sp)
   813c4:	d8800a17 	ldw	r2,40(sp)
   813c8:	d8800315 	stw	r2,12(sp)
   813cc:	d8800917 	ldw	r2,36(sp)
   813d0:	d8800215 	stw	r2,8(sp)
   813d4:	d8000115 	stw	zero,4(sp)
   813d8:	d880080b 	ldhu	r2,32(sp)
   813dc:	d8800015 	stw	r2,0(sp)
   813e0:	00812800 	call	81280 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   813e4:	dfc00717 	ldw	ra,28(sp)
   813e8:	dec00804 	addi	sp,sp,32
   813ec:	f800283a 	ret

000813f0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   813f0:	defffa04 	addi	sp,sp,-24
   813f4:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   813f8:	d8000415 	stw	zero,16(sp)
   813fc:	d8000315 	stw	zero,12(sp)
   81400:	d8800817 	ldw	r2,32(sp)
   81404:	d8800215 	stw	r2,8(sp)
   81408:	d8800717 	ldw	r2,28(sp)
   8140c:	d8800115 	stw	r2,4(sp)
   81410:	d880060b 	ldhu	r2,24(sp)
   81414:	d8800015 	stw	r2,0(sp)
   81418:	00813a80 	call	813a8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   8141c:	dfc00517 	ldw	ra,20(sp)
   81420:	dec00604 	addi	sp,sp,24
   81424:	f800283a 	ret

00081428 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   81428:	defff804 	addi	sp,sp,-32
   8142c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81430:	d8000615 	stw	zero,24(sp)
   81434:	d8800917 	ldw	r2,36(sp)
   81438:	d8800515 	stw	r2,20(sp)
   8143c:	d8000415 	stw	zero,16(sp)
   81440:	d8800817 	ldw	r2,32(sp)
   81444:	d8800315 	stw	r2,12(sp)
   81448:	d8000215 	stw	zero,8(sp)
   8144c:	d8000115 	stw	zero,4(sp)
   81450:	39ffffcc 	andi	r7,r7,65535
   81454:	d9c00015 	stw	r7,0(sp)
   81458:	300f883a 	mov	r7,r6
   8145c:	000d883a 	mov	r6,zero
   81460:	00812800 	call	81280 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   81464:	dfc00717 	ldw	ra,28(sp)
   81468:	dec00804 	addi	sp,sp,32
   8146c:	f800283a 	ret

00081470 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   81470:	defffd04 	addi	sp,sp,-12
   81474:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   81478:	d8000115 	stw	zero,4(sp)
   8147c:	d8800317 	ldw	r2,12(sp)
   81480:	d8800015 	stw	r2,0(sp)
   81484:	39ffffcc 	andi	r7,r7,65535
   81488:	00814280 	call	81428 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   8148c:	dfc00217 	ldw	ra,8(sp)
   81490:	dec00304 	addi	sp,sp,12
   81494:	f800283a 	ret

00081498 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81498:	defff804 	addi	sp,sp,-32
   8149c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   814a0:	d8800c03 	ldbu	r2,48(sp)
   814a4:	d8800615 	stw	r2,24(sp)
   814a8:	d8000515 	stw	zero,20(sp)
   814ac:	d8800b17 	ldw	r2,44(sp)
   814b0:	d8800415 	stw	r2,16(sp)
   814b4:	d8800917 	ldw	r2,36(sp)
   814b8:	d8800315 	stw	r2,12(sp)
   814bc:	d8800817 	ldw	r2,32(sp)
   814c0:	d8800215 	stw	r2,8(sp)
   814c4:	d8800a17 	ldw	r2,40(sp)
   814c8:	d8800115 	stw	r2,4(sp)
   814cc:	39ffffcc 	andi	r7,r7,65535
   814d0:	d9c00015 	stw	r7,0(sp)
   814d4:	000f883a 	mov	r7,zero
   814d8:	00812800 	call	81280 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   814dc:	dfc00717 	ldw	ra,28(sp)
   814e0:	dec00804 	addi	sp,sp,32
   814e4:	f800283a 	ret

000814e8 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   814e8:	defffa04 	addi	sp,sp,-24
   814ec:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   814f0:	d8800903 	ldbu	r2,36(sp)
   814f4:	d8800415 	stw	r2,16(sp)
   814f8:	d8000315 	stw	zero,12(sp)
   814fc:	d8800817 	ldw	r2,32(sp)
   81500:	d8800215 	stw	r2,8(sp)
   81504:	d8800717 	ldw	r2,28(sp)
   81508:	d8800115 	stw	r2,4(sp)
   8150c:	d8800617 	ldw	r2,24(sp)
   81510:	d8800015 	stw	r2,0(sp)
   81514:	39ffffcc 	andi	r7,r7,65535
   81518:	00814980 	call	81498 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   8151c:	dfc00517 	ldw	ra,20(sp)
   81520:	dec00604 	addi	sp,sp,24
   81524:	f800283a 	ret

00081528 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81528:	defff804 	addi	sp,sp,-32
   8152c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81530:	d8800c03 	ldbu	r2,48(sp)
   81534:	d8800615 	stw	r2,24(sp)
   81538:	d8000515 	stw	zero,20(sp)
   8153c:	d8000415 	stw	zero,16(sp)
   81540:	d8800b17 	ldw	r2,44(sp)
   81544:	d8800315 	stw	r2,12(sp)
   81548:	d8800a17 	ldw	r2,40(sp)
   8154c:	d8800215 	stw	r2,8(sp)
   81550:	d8800917 	ldw	r2,36(sp)
   81554:	d8800115 	stw	r2,4(sp)
   81558:	d880080b 	ldhu	r2,32(sp)
   8155c:	d8800015 	stw	r2,0(sp)
   81560:	00812800 	call	81280 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81564:	dfc00717 	ldw	ra,28(sp)
   81568:	dec00804 	addi	sp,sp,32
   8156c:	f800283a 	ret

00081570 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   81570:	defffb04 	addi	sp,sp,-20
   81574:	dfc00415 	stw	ra,16(sp)
   81578:	dc800315 	stw	r18,12(sp)
   8157c:	dc400215 	stw	r17,8(sp)
   81580:	dc000115 	stw	r16,4(sp)
   81584:	2021883a 	mov	r16,r4
   81588:	2823883a 	mov	r17,r5
   8158c:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81590:	20c00317 	ldw	r3,12(r4)
   81594:	00800074 	movhi	r2,1
   81598:	18800435 	stwio	r2,16(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8159c:	20c00317 	ldw	r3,12(r4)
   815a0:	18800435 	stwio	r2,16(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   815a4:	20800317 	ldw	r2,12(r4)
   815a8:	10000435 	stwio	zero,16(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   815ac:	20800317 	ldw	r2,12(r4)
   815b0:	00c03fc4 	movi	r3,255
   815b4:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   815b8:	d1600004 	addi	r5,gp,-32768
   815bc:	008175c0 	call	8175c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   815c0:	d8000015 	stw	zero,0(sp)
   815c4:	800f883a 	mov	r7,r16
   815c8:	01800234 	movhi	r6,8
   815cc:	3183ff04 	addi	r6,r6,4092
   815d0:	900b883a 	mov	r5,r18
   815d4:	8809883a 	mov	r4,r17
   815d8:	00818500 	call	81850 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   815dc:	dfc00417 	ldw	ra,16(sp)
   815e0:	dc800317 	ldw	r18,12(sp)
   815e4:	dc400217 	ldw	r17,8(sp)
   815e8:	dc000117 	ldw	r16,4(sp)
   815ec:	dec00504 	addi	sp,sp,20
   815f0:	f800283a 	ret

000815f4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   815f4:	d0a7cd17 	ldw	r2,-24780(gp)
   815f8:	10001a26 	beq	r2,zero,81664 <alt_alarm_start+0x70>
  {
    if (alarm)
   815fc:	20001b26 	beq	r4,zero,8166c <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
   81600:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   81604:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81608:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8160c:	00bfff84 	movi	r2,-2
   81610:	1884703a 	and	r2,r3,r2
   81614:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81618:	d0a7cc17 	ldw	r2,-24784(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   8161c:	11800044 	addi	r6,r2,1
   81620:	314b883a 	add	r5,r6,r5
   81624:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   81628:	2880032e 	bgeu	r5,r2,81638 <alt_alarm_start+0x44>
      {
        alarm->rollover = 1;
   8162c:	00800044 	movi	r2,1
   81630:	20800405 	stb	r2,16(r4)
   81634:	00000106 	br	8163c <alt_alarm_start+0x48>
      }
      else
      {
        alarm->rollover = 0;
   81638:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8163c:	d0a00904 	addi	r2,gp,-32732
   81640:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   81644:	11400017 	ldw	r5,0(r2)
   81648:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   8164c:	11400017 	ldw	r5,0(r2)
   81650:	29000115 	stw	r4,4(r5)
  list->next           = entry;
   81654:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81658:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   8165c:	0005883a 	mov	r2,zero
   81660:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   81664:	00bfde84 	movi	r2,-134
   81668:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   8166c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   81670:	f800283a 	ret

00081674 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81674:	defffd04 	addi	sp,sp,-12
   81678:	dfc00215 	stw	ra,8(sp)
   8167c:	dc400115 	stw	r17,4(sp)
   81680:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81684:	20002016 	blt	r4,zero,81708 <close+0x94>
   81688:	2021883a 	mov	r16,r4
   8168c:	01400304 	movi	r5,12
   81690:	00846bc0 	call	846bc <__mulsi3>
   81694:	04400234 	movhi	r17,8
   81698:	8c587104 	addi	r17,r17,25028
   8169c:	1463883a 	add	r17,r2,r17

  if (fd)
   816a0:	88001926 	beq	r17,zero,81708 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   816a4:	01400304 	movi	r5,12
   816a8:	8009883a 	mov	r4,r16
   816ac:	00846bc0 	call	846bc <__mulsi3>
   816b0:	00c00234 	movhi	r3,8
   816b4:	18d87104 	addi	r3,r3,25028
   816b8:	1885883a 	add	r2,r3,r2
   816bc:	10800017 	ldw	r2,0(r2)
   816c0:	10800417 	ldw	r2,16(r2)
   816c4:	10001926 	beq	r2,zero,8172c <close+0xb8>
   816c8:	8809883a 	mov	r4,r17
   816cc:	103ee83a 	callr	r2
   816d0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   816d4:	8009883a 	mov	r4,r16
   816d8:	0081c340 	call	81c34 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   816dc:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   816e0:	8800150e 	bge	r17,zero,81738 <close+0xc4>
   816e4:	d0a00717 	ldw	r2,-32740(gp)
   816e8:	10000226 	beq	r2,zero,816f4 <close+0x80>
   816ec:	103ee83a 	callr	r2
   816f0:	00000106 	br	816f8 <close+0x84>
   816f4:	d0a7cf04 	addi	r2,gp,-24772
    {
      ALT_ERRNO = -rval;
   816f8:	0463c83a 	sub	r17,zero,r17
   816fc:	14400015 	stw	r17,0(r2)
      return -1;
   81700:	00bfffc4 	movi	r2,-1
   81704:	00000c06 	br	81738 <close+0xc4>
   81708:	d0a00717 	ldw	r2,-32740(gp)
   8170c:	10000226 	beq	r2,zero,81718 <close+0xa4>
   81710:	103ee83a 	callr	r2
   81714:	00000106 	br	8171c <close+0xa8>
   81718:	d0a7cf04 	addi	r2,gp,-24772
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8171c:	00c01444 	movi	r3,81
   81720:	10c00015 	stw	r3,0(r2)
    return -1;
   81724:	00bfffc4 	movi	r2,-1
   81728:	00000306 	br	81738 <close+0xc4>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8172c:	8009883a 	mov	r4,r16
   81730:	0081c340 	call	81c34 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   81734:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   81738:	dfc00217 	ldw	ra,8(sp)
   8173c:	dc400117 	ldw	r17,4(sp)
   81740:	dc000017 	ldw	r16,0(sp)
   81744:	dec00304 	addi	sp,sp,12
   81748:	f800283a 	ret

0008174c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   8174c:	f800283a 	ret

00081750 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81750:	f800283a 	ret

00081754 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   81754:	3005883a 	mov	r2,r6
   81758:	f800283a 	ret

0008175c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8175c:	20000226 	beq	r4,zero,81768 <alt_dev_llist_insert+0xc>
   81760:	20800217 	ldw	r2,8(r4)
   81764:	10000f1e 	bne	r2,zero,817a4 <alt_dev_llist_insert+0x48>
   81768:	d0a00717 	ldw	r2,-32740(gp)
   8176c:	10000426 	beq	r2,zero,81780 <alt_dev_llist_insert+0x24>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81770:	deffff04 	addi	sp,sp,-4
   81774:	dfc00015 	stw	ra,0(sp)
   81778:	103ee83a 	callr	r2
   8177c:	00000506 	br	81794 <alt_dev_llist_insert+0x38>
   81780:	d0a7cf04 	addi	r2,gp,-24772
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   81784:	00c00584 	movi	r3,22
   81788:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8178c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   81790:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   81794:	00c00584 	movi	r3,22
   81798:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8179c:	00bffa84 	movi	r2,-22
   817a0:	00000806 	br	817c4 <alt_dev_llist_insert+0x68>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   817a4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   817a8:	28800017 	ldw	r2,0(r5)
   817ac:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   817b0:	28800017 	ldw	r2,0(r5)
   817b4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   817b8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   817bc:	0005883a 	mov	r2,zero
   817c0:	f800283a 	ret
}
   817c4:	dfc00017 	ldw	ra,0(sp)
   817c8:	dec00104 	addi	sp,sp,4
   817cc:	f800283a 	ret

000817d0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   817d0:	defffb04 	addi	sp,sp,-20
   817d4:	dfc00415 	stw	ra,16(sp)
   817d8:	dcc00315 	stw	r19,12(sp)
   817dc:	dc800215 	stw	r18,8(sp)
   817e0:	dc400115 	stw	r17,4(sp)
   817e4:	dc000015 	stw	r16,0(sp)
   817e8:	2027883a 	mov	r19,r4
   817ec:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   817f0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   817f4:	008244c0 	call	8244c <strlen>
   817f8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   817fc:	8c000926 	beq	r17,r16,81824 <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81800:	900d883a 	mov	r6,r18
   81804:	980b883a 	mov	r5,r19
   81808:	81000217 	ldw	r4,8(r16)
   8180c:	00820980 	call	82098 <memcmp>
   81810:	10000626 	beq	r2,zero,8182c <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81814:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81818:	8c3ff91e 	bne	r17,r16,81800 <tx_descriptor+0xfff807a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8181c:	0005883a 	mov	r2,zero
   81820:	00000306 	br	81830 <alt_find_dev+0x60>
   81824:	0005883a 	mov	r2,zero
   81828:	00000106 	br	81830 <alt_find_dev+0x60>
   8182c:	8005883a 	mov	r2,r16
}
   81830:	dfc00417 	ldw	ra,16(sp)
   81834:	dcc00317 	ldw	r19,12(sp)
   81838:	dc800217 	ldw	r18,8(sp)
   8183c:	dc400117 	ldw	r17,4(sp)
   81840:	dc000017 	ldw	r16,0(sp)
   81844:	dec00504 	addi	sp,sp,20
   81848:	f800283a 	ret

0008184c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8184c:	f800283a 	ret

00081850 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81850:	defffe04 	addi	sp,sp,-8
   81854:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81858:	d8800217 	ldw	r2,8(sp)
   8185c:	d8800015 	stw	r2,0(sp)
   81860:	00818f80 	call	818f8 <alt_iic_isr_register>
}  
   81864:	dfc00117 	ldw	ra,4(sp)
   81868:	dec00204 	addi	sp,sp,8
   8186c:	f800283a 	ret

00081870 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81870:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81874:	00bfff84 	movi	r2,-2
   81878:	2084703a 	and	r2,r4,r2
   8187c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   81880:	d0a7cb17 	ldw	r2,-24788(gp)
   81884:	00c00044 	movi	r3,1
   81888:	194a983a 	sll	r5,r3,r5
   8188c:	288ab03a 	or	r5,r5,r2
   81890:	d167cb15 	stw	r5,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81894:	d0a7cb17 	ldw	r2,-24788(gp)
   81898:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8189c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   818a0:	0005883a 	mov	r2,zero
   818a4:	f800283a 	ret

000818a8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   818a8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   818ac:	00bfff84 	movi	r2,-2
   818b0:	2084703a 	and	r2,r4,r2
   818b4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   818b8:	d0a7cb17 	ldw	r2,-24788(gp)
   818bc:	00ffff84 	movi	r3,-2
   818c0:	194a183a 	rol	r5,r3,r5
   818c4:	288a703a 	and	r5,r5,r2
   818c8:	d167cb15 	stw	r5,-24788(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   818cc:	d0a7cb17 	ldw	r2,-24788(gp)
   818d0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   818d4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   818d8:	0005883a 	mov	r2,zero
   818dc:	f800283a 	ret

000818e0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   818e0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   818e4:	00800044 	movi	r2,1
   818e8:	1144983a 	sll	r2,r2,r5
   818ec:	10c4703a 	and	r2,r2,r3
}
   818f0:	1004c03a 	cmpne	r2,r2,zero
   818f4:	f800283a 	ret

000818f8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   818f8:	008007c4 	movi	r2,31
   818fc:	11401316 	blt	r2,r5,8194c <alt_iic_isr_register+0x54>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81900:	defffe04 	addi	sp,sp,-8
   81904:	dfc00115 	stw	ra,4(sp)
   81908:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8190c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81910:	00bfff84 	movi	r2,-2
   81914:	8084703a 	and	r2,r16,r2
   81918:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   8191c:	280490fa 	slli	r2,r5,3
   81920:	00c00274 	movhi	r3,9
   81924:	18e3c304 	addi	r3,r3,-28916
   81928:	1885883a 	add	r2,r3,r2
   8192c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   81930:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   81934:	30000226 	beq	r6,zero,81940 <alt_iic_isr_register+0x48>
   81938:	00818700 	call	81870 <alt_ic_irq_enable>
   8193c:	00000106 	br	81944 <alt_iic_isr_register+0x4c>
   81940:	00818a80 	call	818a8 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81944:	8001703a 	wrctl	status,r16
   81948:	00000206 	br	81954 <alt_iic_isr_register+0x5c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   8194c:	00bffa84 	movi	r2,-22
   81950:	f800283a 	ret

    alt_irq_enable_all(status);
  }

  return rc; 
}
   81954:	dfc00117 	ldw	ra,4(sp)
   81958:	dc000017 	ldw	r16,0(sp)
   8195c:	dec00204 	addi	sp,sp,8
   81960:	f800283a 	ret

00081964 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   81964:	defffc04 	addi	sp,sp,-16
   81968:	dfc00315 	stw	ra,12(sp)
   8196c:	dc800215 	stw	r18,8(sp)
   81970:	dc400115 	stw	r17,4(sp)
   81974:	dc000015 	stw	r16,0(sp)
   81978:	2025883a 	mov	r18,r4
   8197c:	2809883a 	mov	r4,r5
   81980:	300b883a 	mov	r5,r6
  int old;

  old = open (name, flags, mode);
   81984:	380d883a 	mov	r6,r7
   81988:	0081a780 	call	81a78 <open>

  if (old >= 0)
   8198c:	10000f16 	blt	r2,zero,819cc <alt_open_fd+0x68>
   81990:	1021883a 	mov	r16,r2
  {
    fd->dev      = alt_fd_list[old].dev;
   81994:	01400304 	movi	r5,12
   81998:	1009883a 	mov	r4,r2
   8199c:	00846bc0 	call	846bc <__mulsi3>
   819a0:	04400234 	movhi	r17,8
   819a4:	8c587104 	addi	r17,r17,25028
   819a8:	88a3883a 	add	r17,r17,r2
   819ac:	88800017 	ldw	r2,0(r17)
   819b0:	90800015 	stw	r2,0(r18)
    fd->priv     = alt_fd_list[old].priv;
   819b4:	88800117 	ldw	r2,4(r17)
   819b8:	90800115 	stw	r2,4(r18)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   819bc:	88800217 	ldw	r2,8(r17)
   819c0:	90800215 	stw	r2,8(r18)

    alt_release_fd (old);
   819c4:	8009883a 	mov	r4,r16
   819c8:	0081c340 	call	81c34 <alt_release_fd>
  }
} 
   819cc:	dfc00317 	ldw	ra,12(sp)
   819d0:	dc800217 	ldw	r18,8(sp)
   819d4:	dc400117 	ldw	r17,4(sp)
   819d8:	dc000017 	ldw	r16,0(sp)
   819dc:	dec00404 	addi	sp,sp,16
   819e0:	f800283a 	ret

000819e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   819e4:	defffa04 	addi	sp,sp,-24
   819e8:	dfc00515 	stw	ra,20(sp)
   819ec:	dd000415 	stw	r20,16(sp)
   819f0:	dcc00315 	stw	r19,12(sp)
   819f4:	dc800215 	stw	r18,8(sp)
   819f8:	dc400115 	stw	r17,4(sp)
   819fc:	dc000015 	stw	r16,0(sp)
   81a00:	2829883a 	mov	r20,r5
   81a04:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   81a08:	04407fc4 	movi	r17,511
   81a0c:	04800044 	movi	r18,1
   81a10:	04000234 	movhi	r16,8
   81a14:	84187404 	addi	r16,r16,25040
   81a18:	880f883a 	mov	r7,r17
   81a1c:	900d883a 	mov	r6,r18
   81a20:	200b883a 	mov	r5,r4
   81a24:	8009883a 	mov	r4,r16
   81a28:	00819640 	call	81964 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   81a2c:	843ffd04 	addi	r16,r16,-12
   81a30:	880f883a 	mov	r7,r17
   81a34:	000d883a 	mov	r6,zero
   81a38:	a00b883a 	mov	r5,r20
   81a3c:	8009883a 	mov	r4,r16
   81a40:	00819640 	call	81964 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   81a44:	880f883a 	mov	r7,r17
   81a48:	900d883a 	mov	r6,r18
   81a4c:	980b883a 	mov	r5,r19
   81a50:	81000604 	addi	r4,r16,24
   81a54:	00819640 	call	81964 <alt_open_fd>
}  
   81a58:	dfc00517 	ldw	ra,20(sp)
   81a5c:	dd000417 	ldw	r20,16(sp)
   81a60:	dcc00317 	ldw	r19,12(sp)
   81a64:	dc800217 	ldw	r18,8(sp)
   81a68:	dc400117 	ldw	r17,4(sp)
   81a6c:	dc000017 	ldw	r16,0(sp)
   81a70:	dec00604 	addi	sp,sp,24
   81a74:	f800283a 	ret

00081a78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   81a78:	defff704 	addi	sp,sp,-36
   81a7c:	dfc00815 	stw	ra,32(sp)
   81a80:	ddc00715 	stw	r23,28(sp)
   81a84:	dd800615 	stw	r22,24(sp)
   81a88:	dd400515 	stw	r21,20(sp)
   81a8c:	dd000415 	stw	r20,16(sp)
   81a90:	dcc00315 	stw	r19,12(sp)
   81a94:	dc800215 	stw	r18,8(sp)
   81a98:	dc400115 	stw	r17,4(sp)
   81a9c:	dc000015 	stw	r16,0(sp)
   81aa0:	202b883a 	mov	r21,r4
   81aa4:	2829883a 	mov	r20,r5
   81aa8:	302d883a 	mov	r22,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   81aac:	d1600304 	addi	r5,gp,-32756
   81ab0:	00817d00 	call	817d0 <alt_find_dev>
   81ab4:	10003e1e 	bne	r2,zero,81bb0 <open+0x138>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   81ab8:	a809883a 	mov	r4,r21
   81abc:	0081d9c0 	call	81d9c <alt_find_file>
   81ac0:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81ac4:	10004b1e 	bne	r2,zero,81bf4 <open+0x17c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   81ac8:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   81acc:	043fffc4 	movi	r16,-1
   81ad0:	00001506 	br	81b28 <open+0xb0>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81ad4:	11400017 	ldw	r5,0(r2)
   81ad8:	2980031e 	bne	r5,r6,81ae8 <open+0x70>
   81adc:	21400017 	ldw	r5,0(r4)
   81ae0:	2800010e 	bge	r5,zero,81ae8 <open+0x70>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   81ae4:	98800f1e 	bne	r19,r2,81b24 <open+0xac>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81ae8:	18c00044 	addi	r3,r3,1
   81aec:	10800304 	addi	r2,r2,12
   81af0:	21000304 	addi	r4,r4,12
   81af4:	90fff72e 	bgeu	r18,r3,81ad4 <tx_descriptor+0xfff80a74>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   81af8:	88800317 	ldw	r2,12(r17)
   81afc:	10001526 	beq	r2,zero,81b54 <open+0xdc>
   81b00:	b00f883a 	mov	r7,r22
   81b04:	a00d883a 	mov	r6,r20
   81b08:	a80b883a 	mov	r5,r21
   81b0c:	9809883a 	mov	r4,r19
   81b10:	103ee83a 	callr	r2
   81b14:	1023883a 	mov	r17,r2
   81b18:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   81b1c:	88003a0e 	bge	r17,zero,81c08 <open+0x190>
   81b20:	00000106 	br	81b28 <open+0xb0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   81b24:	047ffcc4 	movi	r17,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   81b28:	8009883a 	mov	r4,r16
   81b2c:	0081c340 	call	81c34 <alt_release_fd>
   81b30:	d0a00717 	ldw	r2,-32740(gp)
   81b34:	10000226 	beq	r2,zero,81b40 <open+0xc8>
   81b38:	103ee83a 	callr	r2
   81b3c:	00000106 	br	81b44 <open+0xcc>
   81b40:	d0a7cf04 	addi	r2,gp,-24772
    ALT_ERRNO = -status;
   81b44:	0463c83a 	sub	r17,zero,r17
   81b48:	14400015 	stw	r17,0(r2)
    return -1;
   81b4c:	00bfffc4 	movi	r2,-1
   81b50:	00002d06 	br	81c08 <open+0x190>
   81b54:	8005883a 	mov	r2,r16
   81b58:	00002b06 	br	81c08 <open+0x190>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   81b5c:	8023883a 	mov	r17,r16
   81b60:	003ff106 	br	81b28 <tx_descriptor+0xfff80ac8>
   81b64:	8023883a 	mov	r17,r16
   81b68:	003fef06 	br	81b28 <tx_descriptor+0xfff80ac8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   81b6c:	01400304 	movi	r5,12
   81b70:	8009883a 	mov	r4,r16
   81b74:	00846bc0 	call	846bc <__mulsi3>
   81b78:	05c00234 	movhi	r23,8
   81b7c:	bdd87104 	addi	r23,r23,25028
   81b80:	15e7883a 	add	r19,r2,r23

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81b84:	00900034 	movhi	r2,16384
   81b88:	10bfffc4 	addi	r2,r2,-1
   81b8c:	a084703a 	and	r2,r20,r2
   81b90:	10900034 	orhi	r2,r2,16384
   81b94:	98800215 	stw	r2,8(r19)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81b98:	d4a00217 	ldw	r18,-32760(gp)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81b9c:	99800017 	ldw	r6,0(r19)
   81ba0:	b805883a 	mov	r2,r23
   81ba4:	b9000204 	addi	r4,r23,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81ba8:	0007883a 	mov	r3,zero
   81bac:	003fc906 	br	81ad4 <tx_descriptor+0xfff80a74>
   81bb0:	1023883a 	mov	r17,r2
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   81bb4:	1009883a 	mov	r4,r2
   81bb8:	0081e5c0 	call	81e5c <alt_get_fd>
   81bbc:	1021883a 	mov	r16,r2
   81bc0:	103fe616 	blt	r2,zero,81b5c <tx_descriptor+0xfff80afc>
   81bc4:	003fe906 	br	81b6c <tx_descriptor+0xfff80b0c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   81bc8:	01400304 	movi	r5,12
   81bcc:	8009883a 	mov	r4,r16
   81bd0:	00846bc0 	call	846bc <__mulsi3>
   81bd4:	04c00234 	movhi	r19,8
   81bd8:	9cd87104 	addi	r19,r19,25028
   81bdc:	14e7883a 	add	r19,r2,r19
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   81be0:	00900034 	movhi	r2,16384
   81be4:	10bfffc4 	addi	r2,r2,-1
   81be8:	a084703a 	and	r2,r20,r2
   81bec:	98800215 	stw	r2,8(r19)
   81bf0:	003fc106 	br	81af8 <tx_descriptor+0xfff80a98>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   81bf4:	1009883a 	mov	r4,r2
   81bf8:	0081e5c0 	call	81e5c <alt_get_fd>
   81bfc:	1021883a 	mov	r16,r2
   81c00:	103ff10e 	bge	r2,zero,81bc8 <tx_descriptor+0xfff80b68>
   81c04:	003fd706 	br	81b64 <tx_descriptor+0xfff80b04>
  }
  
  /* return the reference upon success */

  return index;
}
   81c08:	dfc00817 	ldw	ra,32(sp)
   81c0c:	ddc00717 	ldw	r23,28(sp)
   81c10:	dd800617 	ldw	r22,24(sp)
   81c14:	dd400517 	ldw	r21,20(sp)
   81c18:	dd000417 	ldw	r20,16(sp)
   81c1c:	dcc00317 	ldw	r19,12(sp)
   81c20:	dc800217 	ldw	r18,8(sp)
   81c24:	dc400117 	ldw	r17,4(sp)
   81c28:	dc000017 	ldw	r16,0(sp)
   81c2c:	dec00904 	addi	sp,sp,36
   81c30:	f800283a 	ret

00081c34 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   81c34:	00800084 	movi	r2,2
   81c38:	1100140e 	bge	r2,r4,81c8c <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   81c3c:	defffd04 	addi	sp,sp,-12
   81c40:	dfc00215 	stw	ra,8(sp)
   81c44:	dc400115 	stw	r17,4(sp)
   81c48:	dc000015 	stw	r16,0(sp)
   81c4c:	2021883a 	mov	r16,r4
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
   81c50:	04400234 	movhi	r17,8
   81c54:	8c587104 	addi	r17,r17,25028
   81c58:	01400304 	movi	r5,12
   81c5c:	00846bc0 	call	846bc <__mulsi3>
   81c60:	8885883a 	add	r2,r17,r2
   81c64:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
   81c68:	01400304 	movi	r5,12
   81c6c:	8009883a 	mov	r4,r16
   81c70:	00846bc0 	call	846bc <__mulsi3>
   81c74:	8885883a 	add	r2,r17,r2
   81c78:	10000015 	stw	zero,0(r2)
  }
}
   81c7c:	dfc00217 	ldw	ra,8(sp)
   81c80:	dc400117 	ldw	r17,4(sp)
   81c84:	dc000017 	ldw	r16,0(sp)
   81c88:	dec00304 	addi	sp,sp,12
   81c8c:	f800283a 	ret

00081c90 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81c90:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81c94:	00bfff84 	movi	r2,-2
   81c98:	1884703a 	and	r2,r3,r2
   81c9c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   81ca0:	20800017 	ldw	r2,0(r4)
   81ca4:	21400117 	ldw	r5,4(r4)
   81ca8:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   81cac:	20800117 	ldw	r2,4(r4)
   81cb0:	21400017 	ldw	r5,0(r4)
   81cb4:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   81cb8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   81cbc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81cc0:	1801703a 	wrctl	status,r3
   81cc4:	f800283a 	ret

00081cc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   81cc8:	defffb04 	addi	sp,sp,-20
   81ccc:	dfc00415 	stw	ra,16(sp)
   81cd0:	dcc00315 	stw	r19,12(sp)
   81cd4:	dc800215 	stw	r18,8(sp)
   81cd8:	dc400115 	stw	r17,4(sp)
   81cdc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   81ce0:	d0e00904 	addi	r3,gp,-32732
   81ce4:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   81ce8:	d0a7cc17 	ldw	r2,-24784(gp)
   81cec:	10800044 	addi	r2,r2,1
   81cf0:	d0a7cc15 	stw	r2,-24784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81cf4:	80c02026 	beq	r16,r3,81d78 <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   81cf8:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81cfc:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
   81d00:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   81d04:	80800403 	ldbu	r2,16(r16)
   81d08:	10001526 	beq	r2,zero,81d60 <alt_tick+0x98>
   81d0c:	d0a7cc17 	ldw	r2,-24784(gp)
   81d10:	1000171e 	bne	r2,zero,81d70 <alt_tick+0xa8>
    {
      alarm->rollover = 0;
   81d14:	80000405 	stb	zero,16(r16)
   81d18:	00001106 	br	81d60 <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
   81d1c:	8009883a 	mov	r4,r16
   81d20:	0081c900 	call	81c90 <alt_alarm_stop>
   81d24:	00000606 	br	81d40 <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
   81d28:	80c00217 	ldw	r3,8(r16)
   81d2c:	10c5883a 	add	r2,r2,r3
   81d30:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   81d34:	d0e7cc17 	ldw	r3,-24784(gp)
   81d38:	10c0012e 	bgeu	r2,r3,81d40 <alt_tick+0x78>
        {
          alarm->rollover = 1;
   81d3c:	84c00405 	stb	r19,16(r16)
   81d40:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81d44:	8cbfee1e 	bne	r17,r18,81d00 <tx_descriptor+0xfff80ca0>
   81d48:	00000b06 	br	81d78 <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
   81d4c:	80800317 	ldw	r2,12(r16)
   81d50:	81000517 	ldw	r4,20(r16)
   81d54:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   81d58:	103ff31e 	bne	r2,zero,81d28 <tx_descriptor+0xfff80cc8>
   81d5c:	003fef06 	br	81d1c <tx_descriptor+0xfff80cbc>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   81d60:	d0e7cc17 	ldw	r3,-24784(gp)
   81d64:	80800217 	ldw	r2,8(r16)
   81d68:	18bff536 	bltu	r3,r2,81d40 <tx_descriptor+0xfff80ce0>
   81d6c:	003ff706 	br	81d4c <tx_descriptor+0xfff80cec>
   81d70:	d0a7cc17 	ldw	r2,-24784(gp)
   81d74:	003ff206 	br	81d40 <tx_descriptor+0xfff80ce0>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   81d78:	dfc00417 	ldw	ra,16(sp)
   81d7c:	dcc00317 	ldw	r19,12(sp)
   81d80:	dc800217 	ldw	r18,8(sp)
   81d84:	dc400117 	ldw	r17,4(sp)
   81d88:	dc000017 	ldw	r16,0(sp)
   81d8c:	dec00504 	addi	sp,sp,20
   81d90:	f800283a 	ret

00081d94 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   81d94:	000170fa 	wrctl	ienable,zero
   81d98:	f800283a 	ret

00081d9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   81d9c:	defffa04 	addi	sp,sp,-24
   81da0:	dfc00515 	stw	ra,20(sp)
   81da4:	dd000415 	stw	r20,16(sp)
   81da8:	dcc00315 	stw	r19,12(sp)
   81dac:	dc800215 	stw	r18,8(sp)
   81db0:	dc400115 	stw	r17,4(sp)
   81db4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81db8:	d0a00504 	addi	r2,gp,-32748
   81dbc:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81dc0:	80801b26 	beq	r16,r2,81e30 <alt_find_file+0x94>
   81dc4:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   81dc8:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81dcc:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
   81dd0:	84400217 	ldw	r17,8(r16)
   81dd4:	8809883a 	mov	r4,r17
   81dd8:	008244c0 	call	8244c <strlen>
   81ddc:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   81de0:	8889883a 	add	r4,r17,r2
   81de4:	213fffc7 	ldb	r4,-1(r4)
   81de8:	2480011e 	bne	r4,r18,81df0 <alt_find_file+0x54>
    {
      len -= 1;
   81dec:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81df0:	180d883a 	mov	r6,r3
   81df4:	98c7883a 	add	r3,r19,r3
   81df8:	18800003 	ldbu	r2,0(r3)
   81dfc:	10c03fcc 	andi	r3,r2,255
   81e00:	18c0201c 	xori	r3,r3,128
   81e04:	18ffe004 	addi	r3,r3,-128
   81e08:	1c800126 	beq	r3,r18,81e10 <alt_find_file+0x74>
   81e0c:	1800041e 	bne	r3,zero,81e20 <alt_find_file+0x84>
        !memcmp (next->name, name, len))
   81e10:	980b883a 	mov	r5,r19
   81e14:	8809883a 	mov	r4,r17
   81e18:	00820980 	call	82098 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81e1c:	10000626 	beq	r2,zero,81e38 <alt_find_file+0x9c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81e20:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81e24:	853fea1e 	bne	r16,r20,81dd0 <tx_descriptor+0xfff80d70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   81e28:	0005883a 	mov	r2,zero
   81e2c:	00000306 	br	81e3c <alt_find_file+0xa0>
   81e30:	0005883a 	mov	r2,zero
   81e34:	00000106 	br	81e3c <alt_find_file+0xa0>
   81e38:	8005883a 	mov	r2,r16
}
   81e3c:	dfc00517 	ldw	ra,20(sp)
   81e40:	dd000417 	ldw	r20,16(sp)
   81e44:	dcc00317 	ldw	r19,12(sp)
   81e48:	dc800217 	ldw	r18,8(sp)
   81e4c:	dc400117 	ldw	r17,4(sp)
   81e50:	dc000017 	ldw	r16,0(sp)
   81e54:	dec00604 	addi	sp,sp,24
   81e58:	f800283a 	ret

00081e5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81e5c:	defffd04 	addi	sp,sp,-12
   81e60:	dfc00215 	stw	ra,8(sp)
   81e64:	dc400115 	stw	r17,4(sp)
   81e68:	dc000015 	stw	r16,0(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   81e6c:	00800234 	movhi	r2,8
   81e70:	10987104 	addi	r2,r2,25028
   81e74:	10800017 	ldw	r2,0(r2)
   81e78:	10000726 	beq	r2,zero,81e98 <alt_get_fd+0x3c>
   81e7c:	00800234 	movhi	r2,8
   81e80:	10987404 	addi	r2,r2,25040
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81e84:	04000044 	movi	r16,1
   81e88:	01400804 	movi	r5,32
  {
    if (!alt_fd_list[i].dev)
   81e8c:	10c00017 	ldw	r3,0(r2)
   81e90:	18000e1e 	bne	r3,zero,81ecc <alt_get_fd+0x70>
   81e94:	00000106 	br	81e9c <alt_get_fd+0x40>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81e98:	0021883a 	mov	r16,zero
   81e9c:	2023883a 	mov	r17,r4
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   81ea0:	01400304 	movi	r5,12
   81ea4:	8009883a 	mov	r4,r16
   81ea8:	00846bc0 	call	846bc <__mulsi3>
   81eac:	00c00234 	movhi	r3,8
   81eb0:	18d87104 	addi	r3,r3,25028
   81eb4:	1885883a 	add	r2,r3,r2
   81eb8:	14400015 	stw	r17,0(r2)
      if (i > alt_max_fd)
   81ebc:	d0a00217 	ldw	r2,-32760(gp)
   81ec0:	1400060e 	bge	r2,r16,81edc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   81ec4:	d4200215 	stw	r16,-32760(gp)
   81ec8:	00000406 	br	81edc <alt_get_fd+0x80>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81ecc:	84000044 	addi	r16,r16,1
   81ed0:	10800304 	addi	r2,r2,12
   81ed4:	817fed1e 	bne	r16,r5,81e8c <tx_descriptor+0xfff80e2c>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   81ed8:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   81edc:	8005883a 	mov	r2,r16
   81ee0:	dfc00217 	ldw	ra,8(sp)
   81ee4:	dc400117 	ldw	r17,4(sp)
   81ee8:	dc000017 	ldw	r16,0(sp)
   81eec:	dec00304 	addi	sp,sp,12
   81ef0:	f800283a 	ret

00081ef4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   81ef4:	213ffe84 	addi	r4,r4,-6
   81ef8:	008003c4 	movi	r2,15
   81efc:	11001636 	bltu	r2,r4,81f58 <alt_exception_cause_generated_bad_addr+0x64>
   81f00:	200890ba 	slli	r4,r4,2
   81f04:	00800234 	movhi	r2,8
   81f08:	1087c604 	addi	r2,r2,7960
   81f0c:	2089883a 	add	r4,r4,r2
   81f10:	20800017 	ldw	r2,0(r4)
   81f14:	1000683a 	jmp	r2
   81f18:	00081f60 	cmpeqi	zero,zero,8317
   81f1c:	00081f60 	cmpeqi	zero,zero,8317
   81f20:	00081f58 	cmpnei	zero,zero,8317
   81f24:	00081f58 	cmpnei	zero,zero,8317
   81f28:	00081f58 	cmpnei	zero,zero,8317
   81f2c:	00081f60 	cmpeqi	zero,zero,8317
   81f30:	00081f58 	cmpnei	zero,zero,8317
   81f34:	00081f58 	cmpnei	zero,zero,8317
   81f38:	00081f60 	cmpeqi	zero,zero,8317
   81f3c:	00081f60 	cmpeqi	zero,zero,8317
   81f40:	00081f58 	cmpnei	zero,zero,8317
   81f44:	00081f60 	cmpeqi	zero,zero,8317
   81f48:	00081f58 	cmpnei	zero,zero,8317
   81f4c:	00081f58 	cmpnei	zero,zero,8317
   81f50:	00081f58 	cmpnei	zero,zero,8317
   81f54:	00081f60 	cmpeqi	zero,zero,8317
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   81f58:	0005883a 	mov	r2,zero
   81f5c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   81f60:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   81f64:	f800283a 	ret

00081f68 <exit>:
   81f68:	defffe04 	addi	sp,sp,-8
   81f6c:	000b883a 	mov	r5,zero
   81f70:	dc000015 	stw	r16,0(sp)
   81f74:	dfc00115 	stw	ra,4(sp)
   81f78:	2021883a 	mov	r16,r4
   81f7c:	00827900 	call	82790 <__call_exitprocs>
   81f80:	00800234 	movhi	r2,8
   81f84:	109af104 	addi	r2,r2,27588
   81f88:	11000017 	ldw	r4,0(r2)
   81f8c:	20800f17 	ldw	r2,60(r4)
   81f90:	10000126 	beq	r2,zero,81f98 <exit+0x30>
   81f94:	103ee83a 	callr	r2
   81f98:	8009883a 	mov	r4,r16
   81f9c:	00846e40 	call	846e4 <_exit>

00081fa0 <_getc_r>:
   81fa0:	defffd04 	addi	sp,sp,-12
   81fa4:	dc000115 	stw	r16,4(sp)
   81fa8:	dfc00215 	stw	ra,8(sp)
   81fac:	2021883a 	mov	r16,r4
   81fb0:	20000226 	beq	r4,zero,81fbc <_getc_r+0x1c>
   81fb4:	20800e17 	ldw	r2,56(r4)
   81fb8:	10000c26 	beq	r2,zero,81fec <_getc_r+0x4c>
   81fbc:	28800117 	ldw	r2,4(r5)
   81fc0:	10bfffc4 	addi	r2,r2,-1
   81fc4:	28800115 	stw	r2,4(r5)
   81fc8:	10000c16 	blt	r2,zero,81ffc <_getc_r+0x5c>
   81fcc:	28800017 	ldw	r2,0(r5)
   81fd0:	10c00044 	addi	r3,r2,1
   81fd4:	28c00015 	stw	r3,0(r5)
   81fd8:	10800003 	ldbu	r2,0(r2)
   81fdc:	dfc00217 	ldw	ra,8(sp)
   81fe0:	dc000117 	ldw	r16,4(sp)
   81fe4:	dec00304 	addi	sp,sp,12
   81fe8:	f800283a 	ret
   81fec:	d9400015 	stw	r5,0(sp)
   81ff0:	0082f180 	call	82f18 <__sinit>
   81ff4:	d9400017 	ldw	r5,0(sp)
   81ff8:	003ff006 	br	81fbc <tx_descriptor+0xfff80f5c>
   81ffc:	8009883a 	mov	r4,r16
   82000:	dfc00217 	ldw	ra,8(sp)
   82004:	dc000117 	ldw	r16,4(sp)
   82008:	dec00304 	addi	sp,sp,12
   8200c:	00823c41 	jmpi	823c4 <__srget_r>

00082010 <getc>:
   82010:	00800234 	movhi	r2,8
   82014:	defffd04 	addi	sp,sp,-12
   82018:	109af204 	addi	r2,r2,27592
   8201c:	dc400115 	stw	r17,4(sp)
   82020:	14400017 	ldw	r17,0(r2)
   82024:	dc000015 	stw	r16,0(sp)
   82028:	dfc00215 	stw	ra,8(sp)
   8202c:	2021883a 	mov	r16,r4
   82030:	88000226 	beq	r17,zero,8203c <getc+0x2c>
   82034:	88800e17 	ldw	r2,56(r17)
   82038:	10000d26 	beq	r2,zero,82070 <getc+0x60>
   8203c:	80800117 	ldw	r2,4(r16)
   82040:	10bfffc4 	addi	r2,r2,-1
   82044:	80800115 	stw	r2,4(r16)
   82048:	10000c16 	blt	r2,zero,8207c <getc+0x6c>
   8204c:	80800017 	ldw	r2,0(r16)
   82050:	10c00044 	addi	r3,r2,1
   82054:	80c00015 	stw	r3,0(r16)
   82058:	10800003 	ldbu	r2,0(r2)
   8205c:	dfc00217 	ldw	ra,8(sp)
   82060:	dc400117 	ldw	r17,4(sp)
   82064:	dc000017 	ldw	r16,0(sp)
   82068:	dec00304 	addi	sp,sp,12
   8206c:	f800283a 	ret
   82070:	8809883a 	mov	r4,r17
   82074:	0082f180 	call	82f18 <__sinit>
   82078:	003ff006 	br	8203c <tx_descriptor+0xfff80fdc>
   8207c:	800b883a 	mov	r5,r16
   82080:	8809883a 	mov	r4,r17
   82084:	dfc00217 	ldw	ra,8(sp)
   82088:	dc400117 	ldw	r17,4(sp)
   8208c:	dc000017 	ldw	r16,0(sp)
   82090:	dec00304 	addi	sp,sp,12
   82094:	00823c41 	jmpi	823c4 <__srget_r>

00082098 <memcmp>:
   82098:	01c000c4 	movi	r7,3
   8209c:	3980192e 	bgeu	r7,r6,82104 <memcmp+0x6c>
   820a0:	2144b03a 	or	r2,r4,r5
   820a4:	11c4703a 	and	r2,r2,r7
   820a8:	10000f26 	beq	r2,zero,820e8 <memcmp+0x50>
   820ac:	20800003 	ldbu	r2,0(r4)
   820b0:	28c00003 	ldbu	r3,0(r5)
   820b4:	10c0151e 	bne	r2,r3,8210c <memcmp+0x74>
   820b8:	31bfff84 	addi	r6,r6,-2
   820bc:	01ffffc4 	movi	r7,-1
   820c0:	00000406 	br	820d4 <memcmp+0x3c>
   820c4:	20800003 	ldbu	r2,0(r4)
   820c8:	28c00003 	ldbu	r3,0(r5)
   820cc:	31bfffc4 	addi	r6,r6,-1
   820d0:	10c00e1e 	bne	r2,r3,8210c <memcmp+0x74>
   820d4:	21000044 	addi	r4,r4,1
   820d8:	29400044 	addi	r5,r5,1
   820dc:	31fff91e 	bne	r6,r7,820c4 <tx_descriptor+0xfff81064>
   820e0:	0005883a 	mov	r2,zero
   820e4:	f800283a 	ret
   820e8:	20c00017 	ldw	r3,0(r4)
   820ec:	28800017 	ldw	r2,0(r5)
   820f0:	18bfee1e 	bne	r3,r2,820ac <tx_descriptor+0xfff8104c>
   820f4:	31bfff04 	addi	r6,r6,-4
   820f8:	21000104 	addi	r4,r4,4
   820fc:	29400104 	addi	r5,r5,4
   82100:	39bff936 	bltu	r7,r6,820e8 <tx_descriptor+0xfff81088>
   82104:	303fe91e 	bne	r6,zero,820ac <tx_descriptor+0xfff8104c>
   82108:	003ff506 	br	820e0 <tx_descriptor+0xfff81080>
   8210c:	10c5c83a 	sub	r2,r2,r3
   82110:	f800283a 	ret

00082114 <memcpy>:
   82114:	defffd04 	addi	sp,sp,-12
   82118:	dfc00215 	stw	ra,8(sp)
   8211c:	dc400115 	stw	r17,4(sp)
   82120:	dc000015 	stw	r16,0(sp)
   82124:	00c003c4 	movi	r3,15
   82128:	2005883a 	mov	r2,r4
   8212c:	1980452e 	bgeu	r3,r6,82244 <memcpy+0x130>
   82130:	2906b03a 	or	r3,r5,r4
   82134:	18c000cc 	andi	r3,r3,3
   82138:	1800441e 	bne	r3,zero,8224c <memcpy+0x138>
   8213c:	347ffc04 	addi	r17,r6,-16
   82140:	8822d13a 	srli	r17,r17,4
   82144:	28c00104 	addi	r3,r5,4
   82148:	23400104 	addi	r13,r4,4
   8214c:	8820913a 	slli	r16,r17,4
   82150:	2b000204 	addi	r12,r5,8
   82154:	22c00204 	addi	r11,r4,8
   82158:	84000504 	addi	r16,r16,20
   8215c:	2a800304 	addi	r10,r5,12
   82160:	22400304 	addi	r9,r4,12
   82164:	2c21883a 	add	r16,r5,r16
   82168:	2811883a 	mov	r8,r5
   8216c:	200f883a 	mov	r7,r4
   82170:	41000017 	ldw	r4,0(r8)
   82174:	1fc00017 	ldw	ra,0(r3)
   82178:	63c00017 	ldw	r15,0(r12)
   8217c:	39000015 	stw	r4,0(r7)
   82180:	53800017 	ldw	r14,0(r10)
   82184:	6fc00015 	stw	ra,0(r13)
   82188:	5bc00015 	stw	r15,0(r11)
   8218c:	4b800015 	stw	r14,0(r9)
   82190:	18c00404 	addi	r3,r3,16
   82194:	39c00404 	addi	r7,r7,16
   82198:	42000404 	addi	r8,r8,16
   8219c:	6b400404 	addi	r13,r13,16
   821a0:	63000404 	addi	r12,r12,16
   821a4:	5ac00404 	addi	r11,r11,16
   821a8:	52800404 	addi	r10,r10,16
   821ac:	4a400404 	addi	r9,r9,16
   821b0:	1c3fef1e 	bne	r3,r16,82170 <tx_descriptor+0xfff81110>
   821b4:	89c00044 	addi	r7,r17,1
   821b8:	380e913a 	slli	r7,r7,4
   821bc:	310003cc 	andi	r4,r6,15
   821c0:	02c000c4 	movi	r11,3
   821c4:	11c7883a 	add	r3,r2,r7
   821c8:	29cb883a 	add	r5,r5,r7
   821cc:	5900212e 	bgeu	r11,r4,82254 <memcpy+0x140>
   821d0:	1813883a 	mov	r9,r3
   821d4:	2811883a 	mov	r8,r5
   821d8:	200f883a 	mov	r7,r4
   821dc:	42800017 	ldw	r10,0(r8)
   821e0:	4a400104 	addi	r9,r9,4
   821e4:	39ffff04 	addi	r7,r7,-4
   821e8:	4abfff15 	stw	r10,-4(r9)
   821ec:	42000104 	addi	r8,r8,4
   821f0:	59fffa36 	bltu	r11,r7,821dc <tx_descriptor+0xfff8117c>
   821f4:	213fff04 	addi	r4,r4,-4
   821f8:	2008d0ba 	srli	r4,r4,2
   821fc:	318000cc 	andi	r6,r6,3
   82200:	21000044 	addi	r4,r4,1
   82204:	2109883a 	add	r4,r4,r4
   82208:	2109883a 	add	r4,r4,r4
   8220c:	1907883a 	add	r3,r3,r4
   82210:	290b883a 	add	r5,r5,r4
   82214:	30000626 	beq	r6,zero,82230 <memcpy+0x11c>
   82218:	198d883a 	add	r6,r3,r6
   8221c:	29c00003 	ldbu	r7,0(r5)
   82220:	18c00044 	addi	r3,r3,1
   82224:	29400044 	addi	r5,r5,1
   82228:	19ffffc5 	stb	r7,-1(r3)
   8222c:	19bffb1e 	bne	r3,r6,8221c <tx_descriptor+0xfff811bc>
   82230:	dfc00217 	ldw	ra,8(sp)
   82234:	dc400117 	ldw	r17,4(sp)
   82238:	dc000017 	ldw	r16,0(sp)
   8223c:	dec00304 	addi	sp,sp,12
   82240:	f800283a 	ret
   82244:	2007883a 	mov	r3,r4
   82248:	003ff206 	br	82214 <tx_descriptor+0xfff811b4>
   8224c:	2007883a 	mov	r3,r4
   82250:	003ff106 	br	82218 <tx_descriptor+0xfff811b8>
   82254:	200d883a 	mov	r6,r4
   82258:	003fee06 	br	82214 <tx_descriptor+0xfff811b4>

0008225c <_putc_r>:
   8225c:	defffc04 	addi	sp,sp,-16
   82260:	dc000215 	stw	r16,8(sp)
   82264:	dfc00315 	stw	ra,12(sp)
   82268:	2021883a 	mov	r16,r4
   8226c:	20000226 	beq	r4,zero,82278 <_putc_r+0x1c>
   82270:	20800e17 	ldw	r2,56(r4)
   82274:	10001b26 	beq	r2,zero,822e4 <_putc_r+0x88>
   82278:	30800217 	ldw	r2,8(r6)
   8227c:	10bfffc4 	addi	r2,r2,-1
   82280:	30800215 	stw	r2,8(r6)
   82284:	10000a16 	blt	r2,zero,822b0 <_putc_r+0x54>
   82288:	30800017 	ldw	r2,0(r6)
   8228c:	11400005 	stb	r5,0(r2)
   82290:	30800017 	ldw	r2,0(r6)
   82294:	10c00044 	addi	r3,r2,1
   82298:	30c00015 	stw	r3,0(r6)
   8229c:	10800003 	ldbu	r2,0(r2)
   822a0:	dfc00317 	ldw	ra,12(sp)
   822a4:	dc000217 	ldw	r16,8(sp)
   822a8:	dec00404 	addi	sp,sp,16
   822ac:	f800283a 	ret
   822b0:	30c00617 	ldw	r3,24(r6)
   822b4:	10c00616 	blt	r2,r3,822d0 <_putc_r+0x74>
   822b8:	30800017 	ldw	r2,0(r6)
   822bc:	00c00284 	movi	r3,10
   822c0:	11400005 	stb	r5,0(r2)
   822c4:	30800017 	ldw	r2,0(r6)
   822c8:	11400003 	ldbu	r5,0(r2)
   822cc:	28fff11e 	bne	r5,r3,82294 <tx_descriptor+0xfff81234>
   822d0:	8009883a 	mov	r4,r16
   822d4:	dfc00317 	ldw	ra,12(sp)
   822d8:	dc000217 	ldw	r16,8(sp)
   822dc:	dec00404 	addi	sp,sp,16
   822e0:	00824e41 	jmpi	824e4 <__swbuf_r>
   822e4:	d9400015 	stw	r5,0(sp)
   822e8:	d9800115 	stw	r6,4(sp)
   822ec:	0082f180 	call	82f18 <__sinit>
   822f0:	d9800117 	ldw	r6,4(sp)
   822f4:	d9400017 	ldw	r5,0(sp)
   822f8:	003fdf06 	br	82278 <tx_descriptor+0xfff81218>

000822fc <putc>:
   822fc:	00800234 	movhi	r2,8
   82300:	defffc04 	addi	sp,sp,-16
   82304:	109af204 	addi	r2,r2,27592
   82308:	dc000115 	stw	r16,4(sp)
   8230c:	14000017 	ldw	r16,0(r2)
   82310:	dc400215 	stw	r17,8(sp)
   82314:	dfc00315 	stw	ra,12(sp)
   82318:	2023883a 	mov	r17,r4
   8231c:	80000226 	beq	r16,zero,82328 <putc+0x2c>
   82320:	80800e17 	ldw	r2,56(r16)
   82324:	10001a26 	beq	r2,zero,82390 <putc+0x94>
   82328:	28800217 	ldw	r2,8(r5)
   8232c:	10bfffc4 	addi	r2,r2,-1
   82330:	28800215 	stw	r2,8(r5)
   82334:	10000b16 	blt	r2,zero,82364 <putc+0x68>
   82338:	28800017 	ldw	r2,0(r5)
   8233c:	14400005 	stb	r17,0(r2)
   82340:	28800017 	ldw	r2,0(r5)
   82344:	10c00044 	addi	r3,r2,1
   82348:	28c00015 	stw	r3,0(r5)
   8234c:	10800003 	ldbu	r2,0(r2)
   82350:	dfc00317 	ldw	ra,12(sp)
   82354:	dc400217 	ldw	r17,8(sp)
   82358:	dc000117 	ldw	r16,4(sp)
   8235c:	dec00404 	addi	sp,sp,16
   82360:	f800283a 	ret
   82364:	28c00617 	ldw	r3,24(r5)
   82368:	10c00e16 	blt	r2,r3,823a4 <putc+0xa8>
   8236c:	28800017 	ldw	r2,0(r5)
   82370:	01000284 	movi	r4,10
   82374:	14400005 	stb	r17,0(r2)
   82378:	28800017 	ldw	r2,0(r5)
   8237c:	10c00003 	ldbu	r3,0(r2)
   82380:	193ff01e 	bne	r3,r4,82344 <tx_descriptor+0xfff812e4>
   82384:	280d883a 	mov	r6,r5
   82388:	180b883a 	mov	r5,r3
   8238c:	00000706 	br	823ac <putc+0xb0>
   82390:	8009883a 	mov	r4,r16
   82394:	d9400015 	stw	r5,0(sp)
   82398:	0082f180 	call	82f18 <__sinit>
   8239c:	d9400017 	ldw	r5,0(sp)
   823a0:	003fe106 	br	82328 <tx_descriptor+0xfff812c8>
   823a4:	280d883a 	mov	r6,r5
   823a8:	880b883a 	mov	r5,r17
   823ac:	8009883a 	mov	r4,r16
   823b0:	dfc00317 	ldw	ra,12(sp)
   823b4:	dc400217 	ldw	r17,8(sp)
   823b8:	dc000117 	ldw	r16,4(sp)
   823bc:	dec00404 	addi	sp,sp,16
   823c0:	00824e41 	jmpi	824e4 <__swbuf_r>

000823c4 <__srget_r>:
   823c4:	defffd04 	addi	sp,sp,-12
   823c8:	dc400115 	stw	r17,4(sp)
   823cc:	dc000015 	stw	r16,0(sp)
   823d0:	dfc00215 	stw	ra,8(sp)
   823d4:	2023883a 	mov	r17,r4
   823d8:	2821883a 	mov	r16,r5
   823dc:	20000226 	beq	r4,zero,823e8 <__srget_r+0x24>
   823e0:	20800e17 	ldw	r2,56(r4)
   823e4:	10001026 	beq	r2,zero,82428 <__srget_r+0x64>
   823e8:	800b883a 	mov	r5,r16
   823ec:	8809883a 	mov	r4,r17
   823f0:	00840300 	call	84030 <__srefill_r>
   823f4:	10000e1e 	bne	r2,zero,82430 <__srget_r+0x6c>
   823f8:	80c00017 	ldw	r3,0(r16)
   823fc:	80800117 	ldw	r2,4(r16)
   82400:	19000044 	addi	r4,r3,1
   82404:	10bfffc4 	addi	r2,r2,-1
   82408:	80800115 	stw	r2,4(r16)
   8240c:	81000015 	stw	r4,0(r16)
   82410:	18800003 	ldbu	r2,0(r3)
   82414:	dfc00217 	ldw	ra,8(sp)
   82418:	dc400117 	ldw	r17,4(sp)
   8241c:	dc000017 	ldw	r16,0(sp)
   82420:	dec00304 	addi	sp,sp,12
   82424:	f800283a 	ret
   82428:	0082f180 	call	82f18 <__sinit>
   8242c:	003fee06 	br	823e8 <tx_descriptor+0xfff81388>
   82430:	00bfffc4 	movi	r2,-1
   82434:	003ff706 	br	82414 <tx_descriptor+0xfff813b4>

00082438 <__srget>:
   82438:	00800234 	movhi	r2,8
   8243c:	109af204 	addi	r2,r2,27592
   82440:	200b883a 	mov	r5,r4
   82444:	11000017 	ldw	r4,0(r2)
   82448:	00823c41 	jmpi	823c4 <__srget_r>

0008244c <strlen>:
   8244c:	208000cc 	andi	r2,r4,3
   82450:	10002026 	beq	r2,zero,824d4 <strlen+0x88>
   82454:	20800007 	ldb	r2,0(r4)
   82458:	10002026 	beq	r2,zero,824dc <strlen+0x90>
   8245c:	2005883a 	mov	r2,r4
   82460:	00000206 	br	8246c <strlen+0x20>
   82464:	10c00007 	ldb	r3,0(r2)
   82468:	18001826 	beq	r3,zero,824cc <strlen+0x80>
   8246c:	10800044 	addi	r2,r2,1
   82470:	10c000cc 	andi	r3,r2,3
   82474:	183ffb1e 	bne	r3,zero,82464 <tx_descriptor+0xfff81404>
   82478:	10c00017 	ldw	r3,0(r2)
   8247c:	01ffbff4 	movhi	r7,65279
   82480:	39ffbfc4 	addi	r7,r7,-257
   82484:	00ca303a 	nor	r5,zero,r3
   82488:	01a02074 	movhi	r6,32897
   8248c:	19c7883a 	add	r3,r3,r7
   82490:	31a02004 	addi	r6,r6,-32640
   82494:	1946703a 	and	r3,r3,r5
   82498:	1986703a 	and	r3,r3,r6
   8249c:	1800091e 	bne	r3,zero,824c4 <strlen+0x78>
   824a0:	10800104 	addi	r2,r2,4
   824a4:	10c00017 	ldw	r3,0(r2)
   824a8:	19cb883a 	add	r5,r3,r7
   824ac:	00c6303a 	nor	r3,zero,r3
   824b0:	28c6703a 	and	r3,r5,r3
   824b4:	1986703a 	and	r3,r3,r6
   824b8:	183ff926 	beq	r3,zero,824a0 <tx_descriptor+0xfff81440>
   824bc:	00000106 	br	824c4 <strlen+0x78>
   824c0:	10800044 	addi	r2,r2,1
   824c4:	10c00007 	ldb	r3,0(r2)
   824c8:	183ffd1e 	bne	r3,zero,824c0 <tx_descriptor+0xfff81460>
   824cc:	1105c83a 	sub	r2,r2,r4
   824d0:	f800283a 	ret
   824d4:	2005883a 	mov	r2,r4
   824d8:	003fe706 	br	82478 <tx_descriptor+0xfff81418>
   824dc:	0005883a 	mov	r2,zero
   824e0:	f800283a 	ret

000824e4 <__swbuf_r>:
   824e4:	defffb04 	addi	sp,sp,-20
   824e8:	dcc00315 	stw	r19,12(sp)
   824ec:	dc800215 	stw	r18,8(sp)
   824f0:	dc000015 	stw	r16,0(sp)
   824f4:	dfc00415 	stw	ra,16(sp)
   824f8:	dc400115 	stw	r17,4(sp)
   824fc:	2025883a 	mov	r18,r4
   82500:	2827883a 	mov	r19,r5
   82504:	3021883a 	mov	r16,r6
   82508:	20000226 	beq	r4,zero,82514 <__swbuf_r+0x30>
   8250c:	20800e17 	ldw	r2,56(r4)
   82510:	10004226 	beq	r2,zero,8261c <__swbuf_r+0x138>
   82514:	80800617 	ldw	r2,24(r16)
   82518:	8100030b 	ldhu	r4,12(r16)
   8251c:	80800215 	stw	r2,8(r16)
   82520:	2080020c 	andi	r2,r4,8
   82524:	10003626 	beq	r2,zero,82600 <__swbuf_r+0x11c>
   82528:	80c00417 	ldw	r3,16(r16)
   8252c:	18003426 	beq	r3,zero,82600 <__swbuf_r+0x11c>
   82530:	2088000c 	andi	r2,r4,8192
   82534:	9c403fcc 	andi	r17,r19,255
   82538:	10001a26 	beq	r2,zero,825a4 <__swbuf_r+0xc0>
   8253c:	80800017 	ldw	r2,0(r16)
   82540:	81000517 	ldw	r4,20(r16)
   82544:	10c7c83a 	sub	r3,r2,r3
   82548:	1900200e 	bge	r3,r4,825cc <__swbuf_r+0xe8>
   8254c:	18c00044 	addi	r3,r3,1
   82550:	81000217 	ldw	r4,8(r16)
   82554:	11400044 	addi	r5,r2,1
   82558:	81400015 	stw	r5,0(r16)
   8255c:	213fffc4 	addi	r4,r4,-1
   82560:	81000215 	stw	r4,8(r16)
   82564:	14c00005 	stb	r19,0(r2)
   82568:	80800517 	ldw	r2,20(r16)
   8256c:	10c01e26 	beq	r2,r3,825e8 <__swbuf_r+0x104>
   82570:	8080030b 	ldhu	r2,12(r16)
   82574:	1080004c 	andi	r2,r2,1
   82578:	10000226 	beq	r2,zero,82584 <__swbuf_r+0xa0>
   8257c:	00800284 	movi	r2,10
   82580:	88801926 	beq	r17,r2,825e8 <__swbuf_r+0x104>
   82584:	8805883a 	mov	r2,r17
   82588:	dfc00417 	ldw	ra,16(sp)
   8258c:	dcc00317 	ldw	r19,12(sp)
   82590:	dc800217 	ldw	r18,8(sp)
   82594:	dc400117 	ldw	r17,4(sp)
   82598:	dc000017 	ldw	r16,0(sp)
   8259c:	dec00504 	addi	sp,sp,20
   825a0:	f800283a 	ret
   825a4:	81401917 	ldw	r5,100(r16)
   825a8:	00b7ffc4 	movi	r2,-8193
   825ac:	21080014 	ori	r4,r4,8192
   825b0:	2884703a 	and	r2,r5,r2
   825b4:	80801915 	stw	r2,100(r16)
   825b8:	80800017 	ldw	r2,0(r16)
   825bc:	8100030d 	sth	r4,12(r16)
   825c0:	81000517 	ldw	r4,20(r16)
   825c4:	10c7c83a 	sub	r3,r2,r3
   825c8:	193fe016 	blt	r3,r4,8254c <tx_descriptor+0xfff814ec>
   825cc:	800b883a 	mov	r5,r16
   825d0:	9009883a 	mov	r4,r18
   825d4:	0082b2c0 	call	82b2c <_fflush_r>
   825d8:	1000071e 	bne	r2,zero,825f8 <__swbuf_r+0x114>
   825dc:	80800017 	ldw	r2,0(r16)
   825e0:	00c00044 	movi	r3,1
   825e4:	003fda06 	br	82550 <tx_descriptor+0xfff814f0>
   825e8:	800b883a 	mov	r5,r16
   825ec:	9009883a 	mov	r4,r18
   825f0:	0082b2c0 	call	82b2c <_fflush_r>
   825f4:	103fe326 	beq	r2,zero,82584 <tx_descriptor+0xfff81524>
   825f8:	00bfffc4 	movi	r2,-1
   825fc:	003fe206 	br	82588 <tx_descriptor+0xfff81528>
   82600:	800b883a 	mov	r5,r16
   82604:	9009883a 	mov	r4,r18
   82608:	008263c0 	call	8263c <__swsetup_r>
   8260c:	103ffa1e 	bne	r2,zero,825f8 <tx_descriptor+0xfff81598>
   82610:	8100030b 	ldhu	r4,12(r16)
   82614:	80c00417 	ldw	r3,16(r16)
   82618:	003fc506 	br	82530 <tx_descriptor+0xfff814d0>
   8261c:	0082f180 	call	82f18 <__sinit>
   82620:	003fbc06 	br	82514 <tx_descriptor+0xfff814b4>

00082624 <__swbuf>:
   82624:	00800234 	movhi	r2,8
   82628:	109af204 	addi	r2,r2,27592
   8262c:	280d883a 	mov	r6,r5
   82630:	200b883a 	mov	r5,r4
   82634:	11000017 	ldw	r4,0(r2)
   82638:	00824e41 	jmpi	824e4 <__swbuf_r>

0008263c <__swsetup_r>:
   8263c:	00800234 	movhi	r2,8
   82640:	defffd04 	addi	sp,sp,-12
   82644:	109af204 	addi	r2,r2,27592
   82648:	dc400115 	stw	r17,4(sp)
   8264c:	2023883a 	mov	r17,r4
   82650:	11000017 	ldw	r4,0(r2)
   82654:	dc000015 	stw	r16,0(sp)
   82658:	dfc00215 	stw	ra,8(sp)
   8265c:	2821883a 	mov	r16,r5
   82660:	20000226 	beq	r4,zero,8266c <__swsetup_r+0x30>
   82664:	20800e17 	ldw	r2,56(r4)
   82668:	10003126 	beq	r2,zero,82730 <__swsetup_r+0xf4>
   8266c:	8080030b 	ldhu	r2,12(r16)
   82670:	10c0020c 	andi	r3,r2,8
   82674:	1009883a 	mov	r4,r2
   82678:	18000f26 	beq	r3,zero,826b8 <__swsetup_r+0x7c>
   8267c:	80c00417 	ldw	r3,16(r16)
   82680:	18001526 	beq	r3,zero,826d8 <__swsetup_r+0x9c>
   82684:	1100004c 	andi	r4,r2,1
   82688:	20001c1e 	bne	r4,zero,826fc <__swsetup_r+0xc0>
   8268c:	1080008c 	andi	r2,r2,2
   82690:	1000291e 	bne	r2,zero,82738 <__swsetup_r+0xfc>
   82694:	80800517 	ldw	r2,20(r16)
   82698:	80800215 	stw	r2,8(r16)
   8269c:	18001c26 	beq	r3,zero,82710 <__swsetup_r+0xd4>
   826a0:	0005883a 	mov	r2,zero
   826a4:	dfc00217 	ldw	ra,8(sp)
   826a8:	dc400117 	ldw	r17,4(sp)
   826ac:	dc000017 	ldw	r16,0(sp)
   826b0:	dec00304 	addi	sp,sp,12
   826b4:	f800283a 	ret
   826b8:	2080040c 	andi	r2,r4,16
   826bc:	10002e26 	beq	r2,zero,82778 <__swsetup_r+0x13c>
   826c0:	2080010c 	andi	r2,r4,4
   826c4:	10001e1e 	bne	r2,zero,82740 <__swsetup_r+0x104>
   826c8:	80c00417 	ldw	r3,16(r16)
   826cc:	20800214 	ori	r2,r4,8
   826d0:	8080030d 	sth	r2,12(r16)
   826d4:	183feb1e 	bne	r3,zero,82684 <tx_descriptor+0xfff81624>
   826d8:	1100a00c 	andi	r4,r2,640
   826dc:	01408004 	movi	r5,512
   826e0:	217fe826 	beq	r4,r5,82684 <tx_descriptor+0xfff81624>
   826e4:	800b883a 	mov	r5,r16
   826e8:	8809883a 	mov	r4,r17
   826ec:	00835240 	call	83524 <__smakebuf_r>
   826f0:	8080030b 	ldhu	r2,12(r16)
   826f4:	80c00417 	ldw	r3,16(r16)
   826f8:	003fe206 	br	82684 <tx_descriptor+0xfff81624>
   826fc:	80800517 	ldw	r2,20(r16)
   82700:	80000215 	stw	zero,8(r16)
   82704:	0085c83a 	sub	r2,zero,r2
   82708:	80800615 	stw	r2,24(r16)
   8270c:	183fe41e 	bne	r3,zero,826a0 <tx_descriptor+0xfff81640>
   82710:	80c0030b 	ldhu	r3,12(r16)
   82714:	0005883a 	mov	r2,zero
   82718:	1900200c 	andi	r4,r3,128
   8271c:	203fe126 	beq	r4,zero,826a4 <tx_descriptor+0xfff81644>
   82720:	18c01014 	ori	r3,r3,64
   82724:	80c0030d 	sth	r3,12(r16)
   82728:	00bfffc4 	movi	r2,-1
   8272c:	003fdd06 	br	826a4 <tx_descriptor+0xfff81644>
   82730:	0082f180 	call	82f18 <__sinit>
   82734:	003fcd06 	br	8266c <tx_descriptor+0xfff8160c>
   82738:	0005883a 	mov	r2,zero
   8273c:	003fd606 	br	82698 <tx_descriptor+0xfff81638>
   82740:	81400c17 	ldw	r5,48(r16)
   82744:	28000626 	beq	r5,zero,82760 <__swsetup_r+0x124>
   82748:	80801004 	addi	r2,r16,64
   8274c:	28800326 	beq	r5,r2,8275c <__swsetup_r+0x120>
   82750:	8809883a 	mov	r4,r17
   82754:	008308c0 	call	8308c <_free_r>
   82758:	8100030b 	ldhu	r4,12(r16)
   8275c:	80000c15 	stw	zero,48(r16)
   82760:	80c00417 	ldw	r3,16(r16)
   82764:	00bff6c4 	movi	r2,-37
   82768:	1108703a 	and	r4,r2,r4
   8276c:	80000115 	stw	zero,4(r16)
   82770:	80c00015 	stw	r3,0(r16)
   82774:	003fd506 	br	826cc <tx_descriptor+0xfff8166c>
   82778:	00800244 	movi	r2,9
   8277c:	88800015 	stw	r2,0(r17)
   82780:	20801014 	ori	r2,r4,64
   82784:	8080030d 	sth	r2,12(r16)
   82788:	00bfffc4 	movi	r2,-1
   8278c:	003fc506 	br	826a4 <tx_descriptor+0xfff81644>

00082790 <__call_exitprocs>:
   82790:	defff504 	addi	sp,sp,-44
   82794:	df000915 	stw	fp,36(sp)
   82798:	dd400615 	stw	r21,24(sp)
   8279c:	dc800315 	stw	r18,12(sp)
   827a0:	dfc00a15 	stw	ra,40(sp)
   827a4:	ddc00815 	stw	r23,32(sp)
   827a8:	dd800715 	stw	r22,28(sp)
   827ac:	dd000515 	stw	r20,20(sp)
   827b0:	dcc00415 	stw	r19,16(sp)
   827b4:	dc400215 	stw	r17,8(sp)
   827b8:	dc000115 	stw	r16,4(sp)
   827bc:	d9000015 	stw	r4,0(sp)
   827c0:	2839883a 	mov	fp,r5
   827c4:	04800044 	movi	r18,1
   827c8:	057fffc4 	movi	r21,-1
   827cc:	00800234 	movhi	r2,8
   827d0:	109af104 	addi	r2,r2,27588
   827d4:	12000017 	ldw	r8,0(r2)
   827d8:	45005217 	ldw	r20,328(r8)
   827dc:	44c05204 	addi	r19,r8,328
   827e0:	a0001c26 	beq	r20,zero,82854 <__call_exitprocs+0xc4>
   827e4:	a0800117 	ldw	r2,4(r20)
   827e8:	15ffffc4 	addi	r23,r2,-1
   827ec:	b8000d16 	blt	r23,zero,82824 <__call_exitprocs+0x94>
   827f0:	14000044 	addi	r16,r2,1
   827f4:	8421883a 	add	r16,r16,r16
   827f8:	8421883a 	add	r16,r16,r16
   827fc:	84402004 	addi	r17,r16,128
   82800:	a463883a 	add	r17,r20,r17
   82804:	a421883a 	add	r16,r20,r16
   82808:	e0001e26 	beq	fp,zero,82884 <__call_exitprocs+0xf4>
   8280c:	80804017 	ldw	r2,256(r16)
   82810:	e0801c26 	beq	fp,r2,82884 <__call_exitprocs+0xf4>
   82814:	bdffffc4 	addi	r23,r23,-1
   82818:	843fff04 	addi	r16,r16,-4
   8281c:	8c7fff04 	addi	r17,r17,-4
   82820:	bd7ff91e 	bne	r23,r21,82808 <tx_descriptor+0xfff817a8>
   82824:	00800034 	movhi	r2,0
   82828:	10800004 	addi	r2,r2,0
   8282c:	10000926 	beq	r2,zero,82854 <__call_exitprocs+0xc4>
   82830:	a0800117 	ldw	r2,4(r20)
   82834:	1000301e 	bne	r2,zero,828f8 <__call_exitprocs+0x168>
   82838:	a0800017 	ldw	r2,0(r20)
   8283c:	10003226 	beq	r2,zero,82908 <__call_exitprocs+0x178>
   82840:	a009883a 	mov	r4,r20
   82844:	98800015 	stw	r2,0(r19)
   82848:	00000000 	call	0 <__alt_mem_main_memory-0x80000>
   8284c:	9d000017 	ldw	r20,0(r19)
   82850:	a03fe41e 	bne	r20,zero,827e4 <tx_descriptor+0xfff81784>
   82854:	dfc00a17 	ldw	ra,40(sp)
   82858:	df000917 	ldw	fp,36(sp)
   8285c:	ddc00817 	ldw	r23,32(sp)
   82860:	dd800717 	ldw	r22,28(sp)
   82864:	dd400617 	ldw	r21,24(sp)
   82868:	dd000517 	ldw	r20,20(sp)
   8286c:	dcc00417 	ldw	r19,16(sp)
   82870:	dc800317 	ldw	r18,12(sp)
   82874:	dc400217 	ldw	r17,8(sp)
   82878:	dc000117 	ldw	r16,4(sp)
   8287c:	dec00b04 	addi	sp,sp,44
   82880:	f800283a 	ret
   82884:	a0800117 	ldw	r2,4(r20)
   82888:	80c00017 	ldw	r3,0(r16)
   8288c:	10bfffc4 	addi	r2,r2,-1
   82890:	15c01426 	beq	r2,r23,828e4 <__call_exitprocs+0x154>
   82894:	80000015 	stw	zero,0(r16)
   82898:	183fde26 	beq	r3,zero,82814 <tx_descriptor+0xfff817b4>
   8289c:	95c8983a 	sll	r4,r18,r23
   828a0:	a0806217 	ldw	r2,392(r20)
   828a4:	a5800117 	ldw	r22,4(r20)
   828a8:	2084703a 	and	r2,r4,r2
   828ac:	10000b26 	beq	r2,zero,828dc <__call_exitprocs+0x14c>
   828b0:	a0806317 	ldw	r2,396(r20)
   828b4:	2088703a 	and	r4,r4,r2
   828b8:	20000c1e 	bne	r4,zero,828ec <__call_exitprocs+0x15c>
   828bc:	89400017 	ldw	r5,0(r17)
   828c0:	d9000017 	ldw	r4,0(sp)
   828c4:	183ee83a 	callr	r3
   828c8:	a0800117 	ldw	r2,4(r20)
   828cc:	15bfbf1e 	bne	r2,r22,827cc <tx_descriptor+0xfff8176c>
   828d0:	98800017 	ldw	r2,0(r19)
   828d4:	153fcf26 	beq	r2,r20,82814 <tx_descriptor+0xfff817b4>
   828d8:	003fbc06 	br	827cc <tx_descriptor+0xfff8176c>
   828dc:	183ee83a 	callr	r3
   828e0:	003ff906 	br	828c8 <tx_descriptor+0xfff81868>
   828e4:	a5c00115 	stw	r23,4(r20)
   828e8:	003feb06 	br	82898 <tx_descriptor+0xfff81838>
   828ec:	89000017 	ldw	r4,0(r17)
   828f0:	183ee83a 	callr	r3
   828f4:	003ff406 	br	828c8 <tx_descriptor+0xfff81868>
   828f8:	a0800017 	ldw	r2,0(r20)
   828fc:	a027883a 	mov	r19,r20
   82900:	1029883a 	mov	r20,r2
   82904:	003fb606 	br	827e0 <tx_descriptor+0xfff81780>
   82908:	0005883a 	mov	r2,zero
   8290c:	003ffb06 	br	828fc <tx_descriptor+0xfff8189c>

00082910 <__sflush_r>:
   82910:	2880030b 	ldhu	r2,12(r5)
   82914:	defffb04 	addi	sp,sp,-20
   82918:	dcc00315 	stw	r19,12(sp)
   8291c:	dc400115 	stw	r17,4(sp)
   82920:	dfc00415 	stw	ra,16(sp)
   82924:	dc800215 	stw	r18,8(sp)
   82928:	dc000015 	stw	r16,0(sp)
   8292c:	10c0020c 	andi	r3,r2,8
   82930:	2823883a 	mov	r17,r5
   82934:	2027883a 	mov	r19,r4
   82938:	1800311e 	bne	r3,zero,82a00 <__sflush_r+0xf0>
   8293c:	28c00117 	ldw	r3,4(r5)
   82940:	10820014 	ori	r2,r2,2048
   82944:	2880030d 	sth	r2,12(r5)
   82948:	00c04b0e 	bge	zero,r3,82a78 <__sflush_r+0x168>
   8294c:	8a000a17 	ldw	r8,40(r17)
   82950:	40002326 	beq	r8,zero,829e0 <__sflush_r+0xd0>
   82954:	9c000017 	ldw	r16,0(r19)
   82958:	10c4000c 	andi	r3,r2,4096
   8295c:	98000015 	stw	zero,0(r19)
   82960:	18004826 	beq	r3,zero,82a84 <__sflush_r+0x174>
   82964:	89801417 	ldw	r6,80(r17)
   82968:	10c0010c 	andi	r3,r2,4
   8296c:	18000626 	beq	r3,zero,82988 <__sflush_r+0x78>
   82970:	88c00117 	ldw	r3,4(r17)
   82974:	88800c17 	ldw	r2,48(r17)
   82978:	30cdc83a 	sub	r6,r6,r3
   8297c:	10000226 	beq	r2,zero,82988 <__sflush_r+0x78>
   82980:	88800f17 	ldw	r2,60(r17)
   82984:	308dc83a 	sub	r6,r6,r2
   82988:	89400717 	ldw	r5,28(r17)
   8298c:	000f883a 	mov	r7,zero
   82990:	9809883a 	mov	r4,r19
   82994:	403ee83a 	callr	r8
   82998:	00ffffc4 	movi	r3,-1
   8299c:	10c04426 	beq	r2,r3,82ab0 <__sflush_r+0x1a0>
   829a0:	88c0030b 	ldhu	r3,12(r17)
   829a4:	89000417 	ldw	r4,16(r17)
   829a8:	88000115 	stw	zero,4(r17)
   829ac:	197dffcc 	andi	r5,r3,63487
   829b0:	8940030d 	sth	r5,12(r17)
   829b4:	89000015 	stw	r4,0(r17)
   829b8:	18c4000c 	andi	r3,r3,4096
   829bc:	18002c1e 	bne	r3,zero,82a70 <__sflush_r+0x160>
   829c0:	89400c17 	ldw	r5,48(r17)
   829c4:	9c000015 	stw	r16,0(r19)
   829c8:	28000526 	beq	r5,zero,829e0 <__sflush_r+0xd0>
   829cc:	88801004 	addi	r2,r17,64
   829d0:	28800226 	beq	r5,r2,829dc <__sflush_r+0xcc>
   829d4:	9809883a 	mov	r4,r19
   829d8:	008308c0 	call	8308c <_free_r>
   829dc:	88000c15 	stw	zero,48(r17)
   829e0:	0005883a 	mov	r2,zero
   829e4:	dfc00417 	ldw	ra,16(sp)
   829e8:	dcc00317 	ldw	r19,12(sp)
   829ec:	dc800217 	ldw	r18,8(sp)
   829f0:	dc400117 	ldw	r17,4(sp)
   829f4:	dc000017 	ldw	r16,0(sp)
   829f8:	dec00504 	addi	sp,sp,20
   829fc:	f800283a 	ret
   82a00:	2c800417 	ldw	r18,16(r5)
   82a04:	903ff626 	beq	r18,zero,829e0 <tx_descriptor+0xfff81980>
   82a08:	2c000017 	ldw	r16,0(r5)
   82a0c:	108000cc 	andi	r2,r2,3
   82a10:	2c800015 	stw	r18,0(r5)
   82a14:	84a1c83a 	sub	r16,r16,r18
   82a18:	1000131e 	bne	r2,zero,82a68 <__sflush_r+0x158>
   82a1c:	28800517 	ldw	r2,20(r5)
   82a20:	88800215 	stw	r2,8(r17)
   82a24:	04000316 	blt	zero,r16,82a34 <__sflush_r+0x124>
   82a28:	003fed06 	br	829e0 <tx_descriptor+0xfff81980>
   82a2c:	90a5883a 	add	r18,r18,r2
   82a30:	043feb0e 	bge	zero,r16,829e0 <tx_descriptor+0xfff81980>
   82a34:	88800917 	ldw	r2,36(r17)
   82a38:	89400717 	ldw	r5,28(r17)
   82a3c:	800f883a 	mov	r7,r16
   82a40:	900d883a 	mov	r6,r18
   82a44:	9809883a 	mov	r4,r19
   82a48:	103ee83a 	callr	r2
   82a4c:	80a1c83a 	sub	r16,r16,r2
   82a50:	00bff616 	blt	zero,r2,82a2c <tx_descriptor+0xfff819cc>
   82a54:	88c0030b 	ldhu	r3,12(r17)
   82a58:	00bfffc4 	movi	r2,-1
   82a5c:	18c01014 	ori	r3,r3,64
   82a60:	88c0030d 	sth	r3,12(r17)
   82a64:	003fdf06 	br	829e4 <tx_descriptor+0xfff81984>
   82a68:	0005883a 	mov	r2,zero
   82a6c:	003fec06 	br	82a20 <tx_descriptor+0xfff819c0>
   82a70:	88801415 	stw	r2,80(r17)
   82a74:	003fd206 	br	829c0 <tx_descriptor+0xfff81960>
   82a78:	28c00f17 	ldw	r3,60(r5)
   82a7c:	00ffb316 	blt	zero,r3,8294c <tx_descriptor+0xfff818ec>
   82a80:	003fd706 	br	829e0 <tx_descriptor+0xfff81980>
   82a84:	89400717 	ldw	r5,28(r17)
   82a88:	000d883a 	mov	r6,zero
   82a8c:	01c00044 	movi	r7,1
   82a90:	9809883a 	mov	r4,r19
   82a94:	403ee83a 	callr	r8
   82a98:	100d883a 	mov	r6,r2
   82a9c:	00bfffc4 	movi	r2,-1
   82aa0:	30801426 	beq	r6,r2,82af4 <__sflush_r+0x1e4>
   82aa4:	8880030b 	ldhu	r2,12(r17)
   82aa8:	8a000a17 	ldw	r8,40(r17)
   82aac:	003fae06 	br	82968 <tx_descriptor+0xfff81908>
   82ab0:	98c00017 	ldw	r3,0(r19)
   82ab4:	183fba26 	beq	r3,zero,829a0 <tx_descriptor+0xfff81940>
   82ab8:	01000744 	movi	r4,29
   82abc:	19000626 	beq	r3,r4,82ad8 <__sflush_r+0x1c8>
   82ac0:	01000584 	movi	r4,22
   82ac4:	19000426 	beq	r3,r4,82ad8 <__sflush_r+0x1c8>
   82ac8:	88c0030b 	ldhu	r3,12(r17)
   82acc:	18c01014 	ori	r3,r3,64
   82ad0:	88c0030d 	sth	r3,12(r17)
   82ad4:	003fc306 	br	829e4 <tx_descriptor+0xfff81984>
   82ad8:	8880030b 	ldhu	r2,12(r17)
   82adc:	88c00417 	ldw	r3,16(r17)
   82ae0:	88000115 	stw	zero,4(r17)
   82ae4:	10bdffcc 	andi	r2,r2,63487
   82ae8:	8880030d 	sth	r2,12(r17)
   82aec:	88c00015 	stw	r3,0(r17)
   82af0:	003fb306 	br	829c0 <tx_descriptor+0xfff81960>
   82af4:	98800017 	ldw	r2,0(r19)
   82af8:	103fea26 	beq	r2,zero,82aa4 <tx_descriptor+0xfff81a44>
   82afc:	00c00744 	movi	r3,29
   82b00:	10c00226 	beq	r2,r3,82b0c <__sflush_r+0x1fc>
   82b04:	00c00584 	movi	r3,22
   82b08:	10c0031e 	bne	r2,r3,82b18 <__sflush_r+0x208>
   82b0c:	9c000015 	stw	r16,0(r19)
   82b10:	0005883a 	mov	r2,zero
   82b14:	003fb306 	br	829e4 <tx_descriptor+0xfff81984>
   82b18:	88c0030b 	ldhu	r3,12(r17)
   82b1c:	3005883a 	mov	r2,r6
   82b20:	18c01014 	ori	r3,r3,64
   82b24:	88c0030d 	sth	r3,12(r17)
   82b28:	003fae06 	br	829e4 <tx_descriptor+0xfff81984>

00082b2c <_fflush_r>:
   82b2c:	defffd04 	addi	sp,sp,-12
   82b30:	dc000115 	stw	r16,4(sp)
   82b34:	dfc00215 	stw	ra,8(sp)
   82b38:	2021883a 	mov	r16,r4
   82b3c:	20000226 	beq	r4,zero,82b48 <_fflush_r+0x1c>
   82b40:	20800e17 	ldw	r2,56(r4)
   82b44:	10000c26 	beq	r2,zero,82b78 <_fflush_r+0x4c>
   82b48:	2880030f 	ldh	r2,12(r5)
   82b4c:	1000051e 	bne	r2,zero,82b64 <_fflush_r+0x38>
   82b50:	0005883a 	mov	r2,zero
   82b54:	dfc00217 	ldw	ra,8(sp)
   82b58:	dc000117 	ldw	r16,4(sp)
   82b5c:	dec00304 	addi	sp,sp,12
   82b60:	f800283a 	ret
   82b64:	8009883a 	mov	r4,r16
   82b68:	dfc00217 	ldw	ra,8(sp)
   82b6c:	dc000117 	ldw	r16,4(sp)
   82b70:	dec00304 	addi	sp,sp,12
   82b74:	00829101 	jmpi	82910 <__sflush_r>
   82b78:	d9400015 	stw	r5,0(sp)
   82b7c:	0082f180 	call	82f18 <__sinit>
   82b80:	d9400017 	ldw	r5,0(sp)
   82b84:	003ff006 	br	82b48 <tx_descriptor+0xfff81ae8>

00082b88 <fflush>:
   82b88:	20000526 	beq	r4,zero,82ba0 <fflush+0x18>
   82b8c:	00800234 	movhi	r2,8
   82b90:	109af204 	addi	r2,r2,27592
   82b94:	200b883a 	mov	r5,r4
   82b98:	11000017 	ldw	r4,0(r2)
   82b9c:	0082b2c1 	jmpi	82b2c <_fflush_r>
   82ba0:	00800234 	movhi	r2,8
   82ba4:	109af104 	addi	r2,r2,27588
   82ba8:	11000017 	ldw	r4,0(r2)
   82bac:	01400234 	movhi	r5,8
   82bb0:	294acb04 	addi	r5,r5,11052
   82bb4:	00834601 	jmpi	83460 <_fwalk_reent>

00082bb8 <__fp_unlock>:
   82bb8:	0005883a 	mov	r2,zero
   82bbc:	f800283a 	ret

00082bc0 <_cleanup_r>:
   82bc0:	01400234 	movhi	r5,8
   82bc4:	29511204 	addi	r5,r5,17480
   82bc8:	00834601 	jmpi	83460 <_fwalk_reent>

00082bcc <__sinit.part.1>:
   82bcc:	defff704 	addi	sp,sp,-36
   82bd0:	00c00234 	movhi	r3,8
   82bd4:	dfc00815 	stw	ra,32(sp)
   82bd8:	ddc00715 	stw	r23,28(sp)
   82bdc:	dd800615 	stw	r22,24(sp)
   82be0:	dd400515 	stw	r21,20(sp)
   82be4:	dd000415 	stw	r20,16(sp)
   82be8:	dcc00315 	stw	r19,12(sp)
   82bec:	dc800215 	stw	r18,8(sp)
   82bf0:	dc400115 	stw	r17,4(sp)
   82bf4:	dc000015 	stw	r16,0(sp)
   82bf8:	18caf004 	addi	r3,r3,11200
   82bfc:	24000117 	ldw	r16,4(r4)
   82c00:	20c00f15 	stw	r3,60(r4)
   82c04:	2080bb04 	addi	r2,r4,748
   82c08:	00c000c4 	movi	r3,3
   82c0c:	20c0b915 	stw	r3,740(r4)
   82c10:	2080ba15 	stw	r2,744(r4)
   82c14:	2000b815 	stw	zero,736(r4)
   82c18:	05c00204 	movi	r23,8
   82c1c:	00800104 	movi	r2,4
   82c20:	2025883a 	mov	r18,r4
   82c24:	b80d883a 	mov	r6,r23
   82c28:	81001704 	addi	r4,r16,92
   82c2c:	000b883a 	mov	r5,zero
   82c30:	80000015 	stw	zero,0(r16)
   82c34:	80000115 	stw	zero,4(r16)
   82c38:	80000215 	stw	zero,8(r16)
   82c3c:	8080030d 	sth	r2,12(r16)
   82c40:	80001915 	stw	zero,100(r16)
   82c44:	8000038d 	sth	zero,14(r16)
   82c48:	80000415 	stw	zero,16(r16)
   82c4c:	80000515 	stw	zero,20(r16)
   82c50:	80000615 	stw	zero,24(r16)
   82c54:	0083eec0 	call	83eec <memset>
   82c58:	05800234 	movhi	r22,8
   82c5c:	94400217 	ldw	r17,8(r18)
   82c60:	05400234 	movhi	r21,8
   82c64:	05000234 	movhi	r20,8
   82c68:	04c00234 	movhi	r19,8
   82c6c:	b5909604 	addi	r22,r22,16984
   82c70:	ad50ad04 	addi	r21,r21,17076
   82c74:	a510cc04 	addi	r20,r20,17200
   82c78:	9cd0e304 	addi	r19,r19,17292
   82c7c:	85800815 	stw	r22,32(r16)
   82c80:	85400915 	stw	r21,36(r16)
   82c84:	85000a15 	stw	r20,40(r16)
   82c88:	84c00b15 	stw	r19,44(r16)
   82c8c:	84000715 	stw	r16,28(r16)
   82c90:	00800284 	movi	r2,10
   82c94:	8880030d 	sth	r2,12(r17)
   82c98:	00800044 	movi	r2,1
   82c9c:	b80d883a 	mov	r6,r23
   82ca0:	89001704 	addi	r4,r17,92
   82ca4:	000b883a 	mov	r5,zero
   82ca8:	88000015 	stw	zero,0(r17)
   82cac:	88000115 	stw	zero,4(r17)
   82cb0:	88000215 	stw	zero,8(r17)
   82cb4:	88001915 	stw	zero,100(r17)
   82cb8:	8880038d 	sth	r2,14(r17)
   82cbc:	88000415 	stw	zero,16(r17)
   82cc0:	88000515 	stw	zero,20(r17)
   82cc4:	88000615 	stw	zero,24(r17)
   82cc8:	0083eec0 	call	83eec <memset>
   82ccc:	94000317 	ldw	r16,12(r18)
   82cd0:	00800484 	movi	r2,18
   82cd4:	8c400715 	stw	r17,28(r17)
   82cd8:	8d800815 	stw	r22,32(r17)
   82cdc:	8d400915 	stw	r21,36(r17)
   82ce0:	8d000a15 	stw	r20,40(r17)
   82ce4:	8cc00b15 	stw	r19,44(r17)
   82ce8:	8080030d 	sth	r2,12(r16)
   82cec:	00800084 	movi	r2,2
   82cf0:	80000015 	stw	zero,0(r16)
   82cf4:	80000115 	stw	zero,4(r16)
   82cf8:	80000215 	stw	zero,8(r16)
   82cfc:	80001915 	stw	zero,100(r16)
   82d00:	8080038d 	sth	r2,14(r16)
   82d04:	80000415 	stw	zero,16(r16)
   82d08:	80000515 	stw	zero,20(r16)
   82d0c:	80000615 	stw	zero,24(r16)
   82d10:	b80d883a 	mov	r6,r23
   82d14:	000b883a 	mov	r5,zero
   82d18:	81001704 	addi	r4,r16,92
   82d1c:	0083eec0 	call	83eec <memset>
   82d20:	00800044 	movi	r2,1
   82d24:	84000715 	stw	r16,28(r16)
   82d28:	85800815 	stw	r22,32(r16)
   82d2c:	85400915 	stw	r21,36(r16)
   82d30:	85000a15 	stw	r20,40(r16)
   82d34:	84c00b15 	stw	r19,44(r16)
   82d38:	90800e15 	stw	r2,56(r18)
   82d3c:	dfc00817 	ldw	ra,32(sp)
   82d40:	ddc00717 	ldw	r23,28(sp)
   82d44:	dd800617 	ldw	r22,24(sp)
   82d48:	dd400517 	ldw	r21,20(sp)
   82d4c:	dd000417 	ldw	r20,16(sp)
   82d50:	dcc00317 	ldw	r19,12(sp)
   82d54:	dc800217 	ldw	r18,8(sp)
   82d58:	dc400117 	ldw	r17,4(sp)
   82d5c:	dc000017 	ldw	r16,0(sp)
   82d60:	dec00904 	addi	sp,sp,36
   82d64:	f800283a 	ret

00082d68 <__fp_lock>:
   82d68:	0005883a 	mov	r2,zero
   82d6c:	f800283a 	ret

00082d70 <__sfmoreglue>:
   82d70:	defffc04 	addi	sp,sp,-16
   82d74:	dc800215 	stw	r18,8(sp)
   82d78:	2825883a 	mov	r18,r5
   82d7c:	dc000015 	stw	r16,0(sp)
   82d80:	01401a04 	movi	r5,104
   82d84:	2021883a 	mov	r16,r4
   82d88:	913fffc4 	addi	r4,r18,-1
   82d8c:	dfc00315 	stw	ra,12(sp)
   82d90:	dc400115 	stw	r17,4(sp)
   82d94:	00846bc0 	call	846bc <__mulsi3>
   82d98:	8009883a 	mov	r4,r16
   82d9c:	11401d04 	addi	r5,r2,116
   82da0:	1023883a 	mov	r17,r2
   82da4:	00836e00 	call	836e0 <_malloc_r>
   82da8:	1021883a 	mov	r16,r2
   82dac:	10000726 	beq	r2,zero,82dcc <__sfmoreglue+0x5c>
   82db0:	11000304 	addi	r4,r2,12
   82db4:	10000015 	stw	zero,0(r2)
   82db8:	14800115 	stw	r18,4(r2)
   82dbc:	11000215 	stw	r4,8(r2)
   82dc0:	89801a04 	addi	r6,r17,104
   82dc4:	000b883a 	mov	r5,zero
   82dc8:	0083eec0 	call	83eec <memset>
   82dcc:	8005883a 	mov	r2,r16
   82dd0:	dfc00317 	ldw	ra,12(sp)
   82dd4:	dc800217 	ldw	r18,8(sp)
   82dd8:	dc400117 	ldw	r17,4(sp)
   82ddc:	dc000017 	ldw	r16,0(sp)
   82de0:	dec00404 	addi	sp,sp,16
   82de4:	f800283a 	ret

00082de8 <__sfp>:
   82de8:	defffb04 	addi	sp,sp,-20
   82dec:	dc000015 	stw	r16,0(sp)
   82df0:	04000234 	movhi	r16,8
   82df4:	841af104 	addi	r16,r16,27588
   82df8:	dcc00315 	stw	r19,12(sp)
   82dfc:	2027883a 	mov	r19,r4
   82e00:	81000017 	ldw	r4,0(r16)
   82e04:	dfc00415 	stw	ra,16(sp)
   82e08:	dc800215 	stw	r18,8(sp)
   82e0c:	20800e17 	ldw	r2,56(r4)
   82e10:	dc400115 	stw	r17,4(sp)
   82e14:	1000021e 	bne	r2,zero,82e20 <__sfp+0x38>
   82e18:	0082bcc0 	call	82bcc <__sinit.part.1>
   82e1c:	81000017 	ldw	r4,0(r16)
   82e20:	2480b804 	addi	r18,r4,736
   82e24:	047fffc4 	movi	r17,-1
   82e28:	91000117 	ldw	r4,4(r18)
   82e2c:	94000217 	ldw	r16,8(r18)
   82e30:	213fffc4 	addi	r4,r4,-1
   82e34:	20000a16 	blt	r4,zero,82e60 <__sfp+0x78>
   82e38:	8080030f 	ldh	r2,12(r16)
   82e3c:	10000c26 	beq	r2,zero,82e70 <__sfp+0x88>
   82e40:	80c01d04 	addi	r3,r16,116
   82e44:	00000206 	br	82e50 <__sfp+0x68>
   82e48:	18bfe60f 	ldh	r2,-104(r3)
   82e4c:	10000826 	beq	r2,zero,82e70 <__sfp+0x88>
   82e50:	213fffc4 	addi	r4,r4,-1
   82e54:	1c3ffd04 	addi	r16,r3,-12
   82e58:	18c01a04 	addi	r3,r3,104
   82e5c:	247ffa1e 	bne	r4,r17,82e48 <tx_descriptor+0xfff81de8>
   82e60:	90800017 	ldw	r2,0(r18)
   82e64:	10001d26 	beq	r2,zero,82edc <__sfp+0xf4>
   82e68:	1025883a 	mov	r18,r2
   82e6c:	003fee06 	br	82e28 <tx_descriptor+0xfff81dc8>
   82e70:	00bfffc4 	movi	r2,-1
   82e74:	8080038d 	sth	r2,14(r16)
   82e78:	00800044 	movi	r2,1
   82e7c:	8080030d 	sth	r2,12(r16)
   82e80:	80001915 	stw	zero,100(r16)
   82e84:	80000015 	stw	zero,0(r16)
   82e88:	80000215 	stw	zero,8(r16)
   82e8c:	80000115 	stw	zero,4(r16)
   82e90:	80000415 	stw	zero,16(r16)
   82e94:	80000515 	stw	zero,20(r16)
   82e98:	80000615 	stw	zero,24(r16)
   82e9c:	01800204 	movi	r6,8
   82ea0:	000b883a 	mov	r5,zero
   82ea4:	81001704 	addi	r4,r16,92
   82ea8:	0083eec0 	call	83eec <memset>
   82eac:	8005883a 	mov	r2,r16
   82eb0:	80000c15 	stw	zero,48(r16)
   82eb4:	80000d15 	stw	zero,52(r16)
   82eb8:	80001115 	stw	zero,68(r16)
   82ebc:	80001215 	stw	zero,72(r16)
   82ec0:	dfc00417 	ldw	ra,16(sp)
   82ec4:	dcc00317 	ldw	r19,12(sp)
   82ec8:	dc800217 	ldw	r18,8(sp)
   82ecc:	dc400117 	ldw	r17,4(sp)
   82ed0:	dc000017 	ldw	r16,0(sp)
   82ed4:	dec00504 	addi	sp,sp,20
   82ed8:	f800283a 	ret
   82edc:	01400104 	movi	r5,4
   82ee0:	9809883a 	mov	r4,r19
   82ee4:	0082d700 	call	82d70 <__sfmoreglue>
   82ee8:	90800015 	stw	r2,0(r18)
   82eec:	103fde1e 	bne	r2,zero,82e68 <tx_descriptor+0xfff81e08>
   82ef0:	00800304 	movi	r2,12
   82ef4:	98800015 	stw	r2,0(r19)
   82ef8:	0005883a 	mov	r2,zero
   82efc:	003ff006 	br	82ec0 <tx_descriptor+0xfff81e60>

00082f00 <_cleanup>:
   82f00:	00800234 	movhi	r2,8
   82f04:	109af104 	addi	r2,r2,27588
   82f08:	11000017 	ldw	r4,0(r2)
   82f0c:	01400234 	movhi	r5,8
   82f10:	29511204 	addi	r5,r5,17480
   82f14:	00834601 	jmpi	83460 <_fwalk_reent>

00082f18 <__sinit>:
   82f18:	20800e17 	ldw	r2,56(r4)
   82f1c:	10000126 	beq	r2,zero,82f24 <__sinit+0xc>
   82f20:	f800283a 	ret
   82f24:	0082bcc1 	jmpi	82bcc <__sinit.part.1>

00082f28 <__sfp_lock_acquire>:
   82f28:	f800283a 	ret

00082f2c <__sfp_lock_release>:
   82f2c:	f800283a 	ret

00082f30 <__sinit_lock_acquire>:
   82f30:	f800283a 	ret

00082f34 <__sinit_lock_release>:
   82f34:	f800283a 	ret

00082f38 <__fp_lock_all>:
   82f38:	00800234 	movhi	r2,8
   82f3c:	109af204 	addi	r2,r2,27592
   82f40:	11000017 	ldw	r4,0(r2)
   82f44:	01400234 	movhi	r5,8
   82f48:	294b5a04 	addi	r5,r5,11624
   82f4c:	008339c1 	jmpi	8339c <_fwalk>

00082f50 <__fp_unlock_all>:
   82f50:	00800234 	movhi	r2,8
   82f54:	109af204 	addi	r2,r2,27592
   82f58:	11000017 	ldw	r4,0(r2)
   82f5c:	01400234 	movhi	r5,8
   82f60:	294aee04 	addi	r5,r5,11192
   82f64:	008339c1 	jmpi	8339c <_fwalk>

00082f68 <_malloc_trim_r>:
   82f68:	defffb04 	addi	sp,sp,-20
   82f6c:	dcc00315 	stw	r19,12(sp)
   82f70:	04c00234 	movhi	r19,8
   82f74:	dc800215 	stw	r18,8(sp)
   82f78:	dc400115 	stw	r17,4(sp)
   82f7c:	dc000015 	stw	r16,0(sp)
   82f80:	dfc00415 	stw	ra,16(sp)
   82f84:	2821883a 	mov	r16,r5
   82f88:	9cd9e404 	addi	r19,r19,26512
   82f8c:	2025883a 	mov	r18,r4
   82f90:	00849240 	call	84924 <__malloc_lock>
   82f94:	98800217 	ldw	r2,8(r19)
   82f98:	14400117 	ldw	r17,4(r2)
   82f9c:	00bfff04 	movi	r2,-4
   82fa0:	88a2703a 	and	r17,r17,r2
   82fa4:	8c21c83a 	sub	r16,r17,r16
   82fa8:	8403fbc4 	addi	r16,r16,4079
   82fac:	8020d33a 	srli	r16,r16,12
   82fb0:	0083ffc4 	movi	r2,4095
   82fb4:	843fffc4 	addi	r16,r16,-1
   82fb8:	8020933a 	slli	r16,r16,12
   82fbc:	1400060e 	bge	r2,r16,82fd8 <_malloc_trim_r+0x70>
   82fc0:	000b883a 	mov	r5,zero
   82fc4:	9009883a 	mov	r4,r18
   82fc8:	00842040 	call	84204 <_sbrk_r>
   82fcc:	98c00217 	ldw	r3,8(r19)
   82fd0:	1c47883a 	add	r3,r3,r17
   82fd4:	10c00a26 	beq	r2,r3,83000 <_malloc_trim_r+0x98>
   82fd8:	9009883a 	mov	r4,r18
   82fdc:	00849280 	call	84928 <__malloc_unlock>
   82fe0:	0005883a 	mov	r2,zero
   82fe4:	dfc00417 	ldw	ra,16(sp)
   82fe8:	dcc00317 	ldw	r19,12(sp)
   82fec:	dc800217 	ldw	r18,8(sp)
   82ff0:	dc400117 	ldw	r17,4(sp)
   82ff4:	dc000017 	ldw	r16,0(sp)
   82ff8:	dec00504 	addi	sp,sp,20
   82ffc:	f800283a 	ret
   83000:	040bc83a 	sub	r5,zero,r16
   83004:	9009883a 	mov	r4,r18
   83008:	00842040 	call	84204 <_sbrk_r>
   8300c:	00ffffc4 	movi	r3,-1
   83010:	10c00d26 	beq	r2,r3,83048 <_malloc_trim_r+0xe0>
   83014:	00c00274 	movhi	r3,9
   83018:	18e3b904 	addi	r3,r3,-28956
   8301c:	18800017 	ldw	r2,0(r3)
   83020:	99000217 	ldw	r4,8(r19)
   83024:	8c23c83a 	sub	r17,r17,r16
   83028:	8c400054 	ori	r17,r17,1
   8302c:	1421c83a 	sub	r16,r2,r16
   83030:	24400115 	stw	r17,4(r4)
   83034:	9009883a 	mov	r4,r18
   83038:	1c000015 	stw	r16,0(r3)
   8303c:	00849280 	call	84928 <__malloc_unlock>
   83040:	00800044 	movi	r2,1
   83044:	003fe706 	br	82fe4 <tx_descriptor+0xfff81f84>
   83048:	000b883a 	mov	r5,zero
   8304c:	9009883a 	mov	r4,r18
   83050:	00842040 	call	84204 <_sbrk_r>
   83054:	99000217 	ldw	r4,8(r19)
   83058:	014003c4 	movi	r5,15
   8305c:	1107c83a 	sub	r3,r2,r4
   83060:	28ffdd0e 	bge	r5,r3,82fd8 <tx_descriptor+0xfff81f78>
   83064:	01400234 	movhi	r5,8
   83068:	295af304 	addi	r5,r5,27596
   8306c:	29400017 	ldw	r5,0(r5)
   83070:	18c00054 	ori	r3,r3,1
   83074:	20c00115 	stw	r3,4(r4)
   83078:	00c00274 	movhi	r3,9
   8307c:	1145c83a 	sub	r2,r2,r5
   83080:	18e3b904 	addi	r3,r3,-28956
   83084:	18800015 	stw	r2,0(r3)
   83088:	003fd306 	br	82fd8 <tx_descriptor+0xfff81f78>

0008308c <_free_r>:
   8308c:	28004126 	beq	r5,zero,83194 <_free_r+0x108>
   83090:	defffd04 	addi	sp,sp,-12
   83094:	dc400115 	stw	r17,4(sp)
   83098:	dc000015 	stw	r16,0(sp)
   8309c:	2023883a 	mov	r17,r4
   830a0:	2821883a 	mov	r16,r5
   830a4:	dfc00215 	stw	ra,8(sp)
   830a8:	00849240 	call	84924 <__malloc_lock>
   830ac:	81ffff17 	ldw	r7,-4(r16)
   830b0:	00bfff84 	movi	r2,-2
   830b4:	01000234 	movhi	r4,8
   830b8:	81bffe04 	addi	r6,r16,-8
   830bc:	3884703a 	and	r2,r7,r2
   830c0:	2119e404 	addi	r4,r4,26512
   830c4:	308b883a 	add	r5,r6,r2
   830c8:	2a400117 	ldw	r9,4(r5)
   830cc:	22000217 	ldw	r8,8(r4)
   830d0:	00ffff04 	movi	r3,-4
   830d4:	48c6703a 	and	r3,r9,r3
   830d8:	2a005726 	beq	r5,r8,83238 <_free_r+0x1ac>
   830dc:	28c00115 	stw	r3,4(r5)
   830e0:	39c0004c 	andi	r7,r7,1
   830e4:	3800091e 	bne	r7,zero,8310c <_free_r+0x80>
   830e8:	823ffe17 	ldw	r8,-8(r16)
   830ec:	22400204 	addi	r9,r4,8
   830f0:	320dc83a 	sub	r6,r6,r8
   830f4:	31c00217 	ldw	r7,8(r6)
   830f8:	1205883a 	add	r2,r2,r8
   830fc:	3a406526 	beq	r7,r9,83294 <_free_r+0x208>
   83100:	32000317 	ldw	r8,12(r6)
   83104:	3a000315 	stw	r8,12(r7)
   83108:	41c00215 	stw	r7,8(r8)
   8310c:	28cf883a 	add	r7,r5,r3
   83110:	39c00117 	ldw	r7,4(r7)
   83114:	39c0004c 	andi	r7,r7,1
   83118:	38003a26 	beq	r7,zero,83204 <_free_r+0x178>
   8311c:	10c00054 	ori	r3,r2,1
   83120:	30c00115 	stw	r3,4(r6)
   83124:	3087883a 	add	r3,r6,r2
   83128:	18800015 	stw	r2,0(r3)
   8312c:	00c07fc4 	movi	r3,511
   83130:	18801936 	bltu	r3,r2,83198 <_free_r+0x10c>
   83134:	1004d0fa 	srli	r2,r2,3
   83138:	01c00044 	movi	r7,1
   8313c:	21400117 	ldw	r5,4(r4)
   83140:	10c00044 	addi	r3,r2,1
   83144:	18c7883a 	add	r3,r3,r3
   83148:	1005d0ba 	srai	r2,r2,2
   8314c:	18c7883a 	add	r3,r3,r3
   83150:	18c7883a 	add	r3,r3,r3
   83154:	1907883a 	add	r3,r3,r4
   83158:	3884983a 	sll	r2,r7,r2
   8315c:	19c00017 	ldw	r7,0(r3)
   83160:	1a3ffe04 	addi	r8,r3,-8
   83164:	1144b03a 	or	r2,r2,r5
   83168:	32000315 	stw	r8,12(r6)
   8316c:	31c00215 	stw	r7,8(r6)
   83170:	20800115 	stw	r2,4(r4)
   83174:	19800015 	stw	r6,0(r3)
   83178:	39800315 	stw	r6,12(r7)
   8317c:	8809883a 	mov	r4,r17
   83180:	dfc00217 	ldw	ra,8(sp)
   83184:	dc400117 	ldw	r17,4(sp)
   83188:	dc000017 	ldw	r16,0(sp)
   8318c:	dec00304 	addi	sp,sp,12
   83190:	00849281 	jmpi	84928 <__malloc_unlock>
   83194:	f800283a 	ret
   83198:	100ad27a 	srli	r5,r2,9
   8319c:	00c00104 	movi	r3,4
   831a0:	19404a36 	bltu	r3,r5,832cc <_free_r+0x240>
   831a4:	100ad1ba 	srli	r5,r2,6
   831a8:	28c00e44 	addi	r3,r5,57
   831ac:	18c7883a 	add	r3,r3,r3
   831b0:	29400e04 	addi	r5,r5,56
   831b4:	18c7883a 	add	r3,r3,r3
   831b8:	18c7883a 	add	r3,r3,r3
   831bc:	1909883a 	add	r4,r3,r4
   831c0:	20c00017 	ldw	r3,0(r4)
   831c4:	01c00234 	movhi	r7,8
   831c8:	213ffe04 	addi	r4,r4,-8
   831cc:	39d9e404 	addi	r7,r7,26512
   831d0:	20c04426 	beq	r4,r3,832e4 <_free_r+0x258>
   831d4:	01ffff04 	movi	r7,-4
   831d8:	19400117 	ldw	r5,4(r3)
   831dc:	29ca703a 	and	r5,r5,r7
   831e0:	1140022e 	bgeu	r2,r5,831ec <_free_r+0x160>
   831e4:	18c00217 	ldw	r3,8(r3)
   831e8:	20fffb1e 	bne	r4,r3,831d8 <tx_descriptor+0xfff82178>
   831ec:	19000317 	ldw	r4,12(r3)
   831f0:	31000315 	stw	r4,12(r6)
   831f4:	30c00215 	stw	r3,8(r6)
   831f8:	21800215 	stw	r6,8(r4)
   831fc:	19800315 	stw	r6,12(r3)
   83200:	003fde06 	br	8317c <tx_descriptor+0xfff8211c>
   83204:	29c00217 	ldw	r7,8(r5)
   83208:	10c5883a 	add	r2,r2,r3
   8320c:	00c00234 	movhi	r3,8
   83210:	18d9e604 	addi	r3,r3,26520
   83214:	38c03b26 	beq	r7,r3,83304 <_free_r+0x278>
   83218:	2a000317 	ldw	r8,12(r5)
   8321c:	11400054 	ori	r5,r2,1
   83220:	3087883a 	add	r3,r6,r2
   83224:	3a000315 	stw	r8,12(r7)
   83228:	41c00215 	stw	r7,8(r8)
   8322c:	31400115 	stw	r5,4(r6)
   83230:	18800015 	stw	r2,0(r3)
   83234:	003fbd06 	br	8312c <tx_descriptor+0xfff820cc>
   83238:	39c0004c 	andi	r7,r7,1
   8323c:	10c5883a 	add	r2,r2,r3
   83240:	3800071e 	bne	r7,zero,83260 <_free_r+0x1d4>
   83244:	81fffe17 	ldw	r7,-8(r16)
   83248:	31cdc83a 	sub	r6,r6,r7
   8324c:	30c00317 	ldw	r3,12(r6)
   83250:	31400217 	ldw	r5,8(r6)
   83254:	11c5883a 	add	r2,r2,r7
   83258:	28c00315 	stw	r3,12(r5)
   8325c:	19400215 	stw	r5,8(r3)
   83260:	10c00054 	ori	r3,r2,1
   83264:	30c00115 	stw	r3,4(r6)
   83268:	00c00234 	movhi	r3,8
   8326c:	18daf404 	addi	r3,r3,27600
   83270:	18c00017 	ldw	r3,0(r3)
   83274:	21800215 	stw	r6,8(r4)
   83278:	10ffc036 	bltu	r2,r3,8317c <tx_descriptor+0xfff8211c>
   8327c:	00800274 	movhi	r2,9
   83280:	10a2b804 	addi	r2,r2,-29984
   83284:	11400017 	ldw	r5,0(r2)
   83288:	8809883a 	mov	r4,r17
   8328c:	0082f680 	call	82f68 <_malloc_trim_r>
   83290:	003fba06 	br	8317c <tx_descriptor+0xfff8211c>
   83294:	28c9883a 	add	r4,r5,r3
   83298:	21000117 	ldw	r4,4(r4)
   8329c:	2100004c 	andi	r4,r4,1
   832a0:	2000391e 	bne	r4,zero,83388 <_free_r+0x2fc>
   832a4:	29c00217 	ldw	r7,8(r5)
   832a8:	29000317 	ldw	r4,12(r5)
   832ac:	1885883a 	add	r2,r3,r2
   832b0:	10c00054 	ori	r3,r2,1
   832b4:	39000315 	stw	r4,12(r7)
   832b8:	21c00215 	stw	r7,8(r4)
   832bc:	30c00115 	stw	r3,4(r6)
   832c0:	308d883a 	add	r6,r6,r2
   832c4:	30800015 	stw	r2,0(r6)
   832c8:	003fac06 	br	8317c <tx_descriptor+0xfff8211c>
   832cc:	00c00504 	movi	r3,20
   832d0:	19401536 	bltu	r3,r5,83328 <_free_r+0x29c>
   832d4:	28c01704 	addi	r3,r5,92
   832d8:	18c7883a 	add	r3,r3,r3
   832dc:	294016c4 	addi	r5,r5,91
   832e0:	003fb406 	br	831b4 <tx_descriptor+0xfff82154>
   832e4:	280bd0ba 	srai	r5,r5,2
   832e8:	00c00044 	movi	r3,1
   832ec:	38800117 	ldw	r2,4(r7)
   832f0:	194a983a 	sll	r5,r3,r5
   832f4:	2007883a 	mov	r3,r4
   832f8:	2884b03a 	or	r2,r5,r2
   832fc:	38800115 	stw	r2,4(r7)
   83300:	003fbb06 	br	831f0 <tx_descriptor+0xfff82190>
   83304:	21800515 	stw	r6,20(r4)
   83308:	21800415 	stw	r6,16(r4)
   8330c:	10c00054 	ori	r3,r2,1
   83310:	31c00315 	stw	r7,12(r6)
   83314:	31c00215 	stw	r7,8(r6)
   83318:	30c00115 	stw	r3,4(r6)
   8331c:	308d883a 	add	r6,r6,r2
   83320:	30800015 	stw	r2,0(r6)
   83324:	003f9506 	br	8317c <tx_descriptor+0xfff8211c>
   83328:	00c01504 	movi	r3,84
   8332c:	19400536 	bltu	r3,r5,83344 <_free_r+0x2b8>
   83330:	100ad33a 	srli	r5,r2,12
   83334:	28c01bc4 	addi	r3,r5,111
   83338:	18c7883a 	add	r3,r3,r3
   8333c:	29401b84 	addi	r5,r5,110
   83340:	003f9c06 	br	831b4 <tx_descriptor+0xfff82154>
   83344:	00c05504 	movi	r3,340
   83348:	19400536 	bltu	r3,r5,83360 <_free_r+0x2d4>
   8334c:	100ad3fa 	srli	r5,r2,15
   83350:	28c01e04 	addi	r3,r5,120
   83354:	18c7883a 	add	r3,r3,r3
   83358:	29401dc4 	addi	r5,r5,119
   8335c:	003f9506 	br	831b4 <tx_descriptor+0xfff82154>
   83360:	00c15504 	movi	r3,1364
   83364:	19400536 	bltu	r3,r5,8337c <_free_r+0x2f0>
   83368:	100ad4ba 	srli	r5,r2,18
   8336c:	28c01f44 	addi	r3,r5,125
   83370:	18c7883a 	add	r3,r3,r3
   83374:	29401f04 	addi	r5,r5,124
   83378:	003f8e06 	br	831b4 <tx_descriptor+0xfff82154>
   8337c:	00c03f84 	movi	r3,254
   83380:	01401f84 	movi	r5,126
   83384:	003f8b06 	br	831b4 <tx_descriptor+0xfff82154>
   83388:	10c00054 	ori	r3,r2,1
   8338c:	30c00115 	stw	r3,4(r6)
   83390:	308d883a 	add	r6,r6,r2
   83394:	30800015 	stw	r2,0(r6)
   83398:	003f7806 	br	8317c <tx_descriptor+0xfff8211c>

0008339c <_fwalk>:
   8339c:	defff704 	addi	sp,sp,-36
   833a0:	dd000415 	stw	r20,16(sp)
   833a4:	dfc00815 	stw	ra,32(sp)
   833a8:	ddc00715 	stw	r23,28(sp)
   833ac:	dd800615 	stw	r22,24(sp)
   833b0:	dd400515 	stw	r21,20(sp)
   833b4:	dcc00315 	stw	r19,12(sp)
   833b8:	dc800215 	stw	r18,8(sp)
   833bc:	dc400115 	stw	r17,4(sp)
   833c0:	dc000015 	stw	r16,0(sp)
   833c4:	2500b804 	addi	r20,r4,736
   833c8:	a0002326 	beq	r20,zero,83458 <_fwalk+0xbc>
   833cc:	282b883a 	mov	r21,r5
   833d0:	002f883a 	mov	r23,zero
   833d4:	05800044 	movi	r22,1
   833d8:	04ffffc4 	movi	r19,-1
   833dc:	a4400117 	ldw	r17,4(r20)
   833e0:	a4800217 	ldw	r18,8(r20)
   833e4:	8c7fffc4 	addi	r17,r17,-1
   833e8:	88000d16 	blt	r17,zero,83420 <_fwalk+0x84>
   833ec:	94000304 	addi	r16,r18,12
   833f0:	94800384 	addi	r18,r18,14
   833f4:	8080000b 	ldhu	r2,0(r16)
   833f8:	8c7fffc4 	addi	r17,r17,-1
   833fc:	813ffd04 	addi	r4,r16,-12
   83400:	b080042e 	bgeu	r22,r2,83414 <_fwalk+0x78>
   83404:	9080000f 	ldh	r2,0(r18)
   83408:	14c00226 	beq	r2,r19,83414 <_fwalk+0x78>
   8340c:	a83ee83a 	callr	r21
   83410:	b8aeb03a 	or	r23,r23,r2
   83414:	84001a04 	addi	r16,r16,104
   83418:	94801a04 	addi	r18,r18,104
   8341c:	8cfff51e 	bne	r17,r19,833f4 <tx_descriptor+0xfff82394>
   83420:	a5000017 	ldw	r20,0(r20)
   83424:	a03fed1e 	bne	r20,zero,833dc <tx_descriptor+0xfff8237c>
   83428:	b805883a 	mov	r2,r23
   8342c:	dfc00817 	ldw	ra,32(sp)
   83430:	ddc00717 	ldw	r23,28(sp)
   83434:	dd800617 	ldw	r22,24(sp)
   83438:	dd400517 	ldw	r21,20(sp)
   8343c:	dd000417 	ldw	r20,16(sp)
   83440:	dcc00317 	ldw	r19,12(sp)
   83444:	dc800217 	ldw	r18,8(sp)
   83448:	dc400117 	ldw	r17,4(sp)
   8344c:	dc000017 	ldw	r16,0(sp)
   83450:	dec00904 	addi	sp,sp,36
   83454:	f800283a 	ret
   83458:	002f883a 	mov	r23,zero
   8345c:	003ff206 	br	83428 <tx_descriptor+0xfff823c8>

00083460 <_fwalk_reent>:
   83460:	defff704 	addi	sp,sp,-36
   83464:	dd000415 	stw	r20,16(sp)
   83468:	dfc00815 	stw	ra,32(sp)
   8346c:	ddc00715 	stw	r23,28(sp)
   83470:	dd800615 	stw	r22,24(sp)
   83474:	dd400515 	stw	r21,20(sp)
   83478:	dcc00315 	stw	r19,12(sp)
   8347c:	dc800215 	stw	r18,8(sp)
   83480:	dc400115 	stw	r17,4(sp)
   83484:	dc000015 	stw	r16,0(sp)
   83488:	2500b804 	addi	r20,r4,736
   8348c:	a0002326 	beq	r20,zero,8351c <_fwalk_reent+0xbc>
   83490:	282b883a 	mov	r21,r5
   83494:	2027883a 	mov	r19,r4
   83498:	002f883a 	mov	r23,zero
   8349c:	05800044 	movi	r22,1
   834a0:	04bfffc4 	movi	r18,-1
   834a4:	a4400117 	ldw	r17,4(r20)
   834a8:	a4000217 	ldw	r16,8(r20)
   834ac:	8c7fffc4 	addi	r17,r17,-1
   834b0:	88000c16 	blt	r17,zero,834e4 <_fwalk_reent+0x84>
   834b4:	84000304 	addi	r16,r16,12
   834b8:	8080000b 	ldhu	r2,0(r16)
   834bc:	8c7fffc4 	addi	r17,r17,-1
   834c0:	817ffd04 	addi	r5,r16,-12
   834c4:	b080052e 	bgeu	r22,r2,834dc <_fwalk_reent+0x7c>
   834c8:	8080008f 	ldh	r2,2(r16)
   834cc:	9809883a 	mov	r4,r19
   834d0:	14800226 	beq	r2,r18,834dc <_fwalk_reent+0x7c>
   834d4:	a83ee83a 	callr	r21
   834d8:	b8aeb03a 	or	r23,r23,r2
   834dc:	84001a04 	addi	r16,r16,104
   834e0:	8cbff51e 	bne	r17,r18,834b8 <tx_descriptor+0xfff82458>
   834e4:	a5000017 	ldw	r20,0(r20)
   834e8:	a03fee1e 	bne	r20,zero,834a4 <tx_descriptor+0xfff82444>
   834ec:	b805883a 	mov	r2,r23
   834f0:	dfc00817 	ldw	ra,32(sp)
   834f4:	ddc00717 	ldw	r23,28(sp)
   834f8:	dd800617 	ldw	r22,24(sp)
   834fc:	dd400517 	ldw	r21,20(sp)
   83500:	dd000417 	ldw	r20,16(sp)
   83504:	dcc00317 	ldw	r19,12(sp)
   83508:	dc800217 	ldw	r18,8(sp)
   8350c:	dc400117 	ldw	r17,4(sp)
   83510:	dc000017 	ldw	r16,0(sp)
   83514:	dec00904 	addi	sp,sp,36
   83518:	f800283a 	ret
   8351c:	002f883a 	mov	r23,zero
   83520:	003ff206 	br	834ec <tx_descriptor+0xfff8248c>

00083524 <__smakebuf_r>:
   83524:	2880030b 	ldhu	r2,12(r5)
   83528:	10c0008c 	andi	r3,r2,2
   8352c:	1800411e 	bne	r3,zero,83634 <__smakebuf_r+0x110>
   83530:	deffec04 	addi	sp,sp,-80
   83534:	dc000f15 	stw	r16,60(sp)
   83538:	2821883a 	mov	r16,r5
   8353c:	2940038f 	ldh	r5,14(r5)
   83540:	dc401015 	stw	r17,64(sp)
   83544:	dfc01315 	stw	ra,76(sp)
   83548:	dcc01215 	stw	r19,72(sp)
   8354c:	dc801115 	stw	r18,68(sp)
   83550:	2023883a 	mov	r17,r4
   83554:	28001c16 	blt	r5,zero,835c8 <__smakebuf_r+0xa4>
   83558:	d80d883a 	mov	r6,sp
   8355c:	008454c0 	call	8454c <_fstat_r>
   83560:	10001816 	blt	r2,zero,835c4 <__smakebuf_r+0xa0>
   83564:	d8800117 	ldw	r2,4(sp)
   83568:	00e00014 	movui	r3,32768
   8356c:	10bc000c 	andi	r2,r2,61440
   83570:	14c80020 	cmpeqi	r19,r2,8192
   83574:	10c03726 	beq	r2,r3,83654 <__smakebuf_r+0x130>
   83578:	80c0030b 	ldhu	r3,12(r16)
   8357c:	18c20014 	ori	r3,r3,2048
   83580:	80c0030d 	sth	r3,12(r16)
   83584:	00c80004 	movi	r3,8192
   83588:	10c0521e 	bne	r2,r3,836d4 <__smakebuf_r+0x1b0>
   8358c:	8140038f 	ldh	r5,14(r16)
   83590:	8809883a 	mov	r4,r17
   83594:	00845a80 	call	845a8 <_isatty_r>
   83598:	10004c26 	beq	r2,zero,836cc <__smakebuf_r+0x1a8>
   8359c:	8080030b 	ldhu	r2,12(r16)
   835a0:	80c010c4 	addi	r3,r16,67
   835a4:	80c00015 	stw	r3,0(r16)
   835a8:	10800054 	ori	r2,r2,1
   835ac:	8080030d 	sth	r2,12(r16)
   835b0:	00800044 	movi	r2,1
   835b4:	80c00415 	stw	r3,16(r16)
   835b8:	80800515 	stw	r2,20(r16)
   835bc:	04810004 	movi	r18,1024
   835c0:	00000706 	br	835e0 <__smakebuf_r+0xbc>
   835c4:	8080030b 	ldhu	r2,12(r16)
   835c8:	10c0200c 	andi	r3,r2,128
   835cc:	18001f1e 	bne	r3,zero,8364c <__smakebuf_r+0x128>
   835d0:	04810004 	movi	r18,1024
   835d4:	10820014 	ori	r2,r2,2048
   835d8:	8080030d 	sth	r2,12(r16)
   835dc:	0027883a 	mov	r19,zero
   835e0:	900b883a 	mov	r5,r18
   835e4:	8809883a 	mov	r4,r17
   835e8:	00836e00 	call	836e0 <_malloc_r>
   835ec:	10002c26 	beq	r2,zero,836a0 <__smakebuf_r+0x17c>
   835f0:	80c0030b 	ldhu	r3,12(r16)
   835f4:	01000234 	movhi	r4,8
   835f8:	210af004 	addi	r4,r4,11200
   835fc:	89000f15 	stw	r4,60(r17)
   83600:	18c02014 	ori	r3,r3,128
   83604:	80c0030d 	sth	r3,12(r16)
   83608:	80800015 	stw	r2,0(r16)
   8360c:	80800415 	stw	r2,16(r16)
   83610:	84800515 	stw	r18,20(r16)
   83614:	98001a1e 	bne	r19,zero,83680 <__smakebuf_r+0x15c>
   83618:	dfc01317 	ldw	ra,76(sp)
   8361c:	dcc01217 	ldw	r19,72(sp)
   83620:	dc801117 	ldw	r18,68(sp)
   83624:	dc401017 	ldw	r17,64(sp)
   83628:	dc000f17 	ldw	r16,60(sp)
   8362c:	dec01404 	addi	sp,sp,80
   83630:	f800283a 	ret
   83634:	288010c4 	addi	r2,r5,67
   83638:	28800015 	stw	r2,0(r5)
   8363c:	28800415 	stw	r2,16(r5)
   83640:	00800044 	movi	r2,1
   83644:	28800515 	stw	r2,20(r5)
   83648:	f800283a 	ret
   8364c:	04801004 	movi	r18,64
   83650:	003fe006 	br	835d4 <tx_descriptor+0xfff82574>
   83654:	81000a17 	ldw	r4,40(r16)
   83658:	00c00234 	movhi	r3,8
   8365c:	18d0cc04 	addi	r3,r3,17200
   83660:	20ffc51e 	bne	r4,r3,83578 <tx_descriptor+0xfff82518>
   83664:	8080030b 	ldhu	r2,12(r16)
   83668:	04810004 	movi	r18,1024
   8366c:	84801315 	stw	r18,76(r16)
   83670:	1484b03a 	or	r2,r2,r18
   83674:	8080030d 	sth	r2,12(r16)
   83678:	0027883a 	mov	r19,zero
   8367c:	003fd806 	br	835e0 <tx_descriptor+0xfff82580>
   83680:	8140038f 	ldh	r5,14(r16)
   83684:	8809883a 	mov	r4,r17
   83688:	00845a80 	call	845a8 <_isatty_r>
   8368c:	103fe226 	beq	r2,zero,83618 <tx_descriptor+0xfff825b8>
   83690:	8080030b 	ldhu	r2,12(r16)
   83694:	10800054 	ori	r2,r2,1
   83698:	8080030d 	sth	r2,12(r16)
   8369c:	003fde06 	br	83618 <tx_descriptor+0xfff825b8>
   836a0:	8080030b 	ldhu	r2,12(r16)
   836a4:	10c0800c 	andi	r3,r2,512
   836a8:	183fdb1e 	bne	r3,zero,83618 <tx_descriptor+0xfff825b8>
   836ac:	10800094 	ori	r2,r2,2
   836b0:	80c010c4 	addi	r3,r16,67
   836b4:	8080030d 	sth	r2,12(r16)
   836b8:	00800044 	movi	r2,1
   836bc:	80c00015 	stw	r3,0(r16)
   836c0:	80c00415 	stw	r3,16(r16)
   836c4:	80800515 	stw	r2,20(r16)
   836c8:	003fd306 	br	83618 <tx_descriptor+0xfff825b8>
   836cc:	04810004 	movi	r18,1024
   836d0:	003fc306 	br	835e0 <tx_descriptor+0xfff82580>
   836d4:	0027883a 	mov	r19,zero
   836d8:	04810004 	movi	r18,1024
   836dc:	003fc006 	br	835e0 <tx_descriptor+0xfff82580>

000836e0 <_malloc_r>:
   836e0:	defff504 	addi	sp,sp,-44
   836e4:	dc800315 	stw	r18,12(sp)
   836e8:	dfc00a15 	stw	ra,40(sp)
   836ec:	df000915 	stw	fp,36(sp)
   836f0:	ddc00815 	stw	r23,32(sp)
   836f4:	dd800715 	stw	r22,28(sp)
   836f8:	dd400615 	stw	r21,24(sp)
   836fc:	dd000515 	stw	r20,20(sp)
   83700:	dcc00415 	stw	r19,16(sp)
   83704:	dc400215 	stw	r17,8(sp)
   83708:	dc000115 	stw	r16,4(sp)
   8370c:	288002c4 	addi	r2,r5,11
   83710:	00c00584 	movi	r3,22
   83714:	2025883a 	mov	r18,r4
   83718:	18807f2e 	bgeu	r3,r2,83918 <_malloc_r+0x238>
   8371c:	047ffe04 	movi	r17,-8
   83720:	1462703a 	and	r17,r2,r17
   83724:	8800a316 	blt	r17,zero,839b4 <_malloc_r+0x2d4>
   83728:	8940a236 	bltu	r17,r5,839b4 <_malloc_r+0x2d4>
   8372c:	00849240 	call	84924 <__malloc_lock>
   83730:	00807dc4 	movi	r2,503
   83734:	1441e92e 	bgeu	r2,r17,83edc <_malloc_r+0x7fc>
   83738:	8804d27a 	srli	r2,r17,9
   8373c:	1000a126 	beq	r2,zero,839c4 <_malloc_r+0x2e4>
   83740:	00c00104 	movi	r3,4
   83744:	18811e36 	bltu	r3,r2,83bc0 <_malloc_r+0x4e0>
   83748:	8804d1ba 	srli	r2,r17,6
   8374c:	12000e44 	addi	r8,r2,57
   83750:	11c00e04 	addi	r7,r2,56
   83754:	4209883a 	add	r4,r8,r8
   83758:	04c00234 	movhi	r19,8
   8375c:	2109883a 	add	r4,r4,r4
   83760:	9cd9e404 	addi	r19,r19,26512
   83764:	2109883a 	add	r4,r4,r4
   83768:	9909883a 	add	r4,r19,r4
   8376c:	24000117 	ldw	r16,4(r4)
   83770:	213ffe04 	addi	r4,r4,-8
   83774:	24009726 	beq	r4,r16,839d4 <_malloc_r+0x2f4>
   83778:	80800117 	ldw	r2,4(r16)
   8377c:	01bfff04 	movi	r6,-4
   83780:	014003c4 	movi	r5,15
   83784:	1184703a 	and	r2,r2,r6
   83788:	1447c83a 	sub	r3,r2,r17
   8378c:	28c00716 	blt	r5,r3,837ac <_malloc_r+0xcc>
   83790:	1800920e 	bge	r3,zero,839dc <_malloc_r+0x2fc>
   83794:	84000317 	ldw	r16,12(r16)
   83798:	24008e26 	beq	r4,r16,839d4 <_malloc_r+0x2f4>
   8379c:	80800117 	ldw	r2,4(r16)
   837a0:	1184703a 	and	r2,r2,r6
   837a4:	1447c83a 	sub	r3,r2,r17
   837a8:	28fff90e 	bge	r5,r3,83790 <tx_descriptor+0xfff82730>
   837ac:	3809883a 	mov	r4,r7
   837b0:	01800234 	movhi	r6,8
   837b4:	9c000417 	ldw	r16,16(r19)
   837b8:	3199e404 	addi	r6,r6,26512
   837bc:	32000204 	addi	r8,r6,8
   837c0:	82013426 	beq	r16,r8,83c94 <_malloc_r+0x5b4>
   837c4:	80c00117 	ldw	r3,4(r16)
   837c8:	00bfff04 	movi	r2,-4
   837cc:	188e703a 	and	r7,r3,r2
   837d0:	3c45c83a 	sub	r2,r7,r17
   837d4:	00c003c4 	movi	r3,15
   837d8:	18811f16 	blt	r3,r2,83c58 <_malloc_r+0x578>
   837dc:	32000515 	stw	r8,20(r6)
   837e0:	32000415 	stw	r8,16(r6)
   837e4:	10007f0e 	bge	r2,zero,839e4 <_malloc_r+0x304>
   837e8:	00807fc4 	movi	r2,511
   837ec:	11c0fd36 	bltu	r2,r7,83be4 <_malloc_r+0x504>
   837f0:	3806d0fa 	srli	r3,r7,3
   837f4:	01c00044 	movi	r7,1
   837f8:	30800117 	ldw	r2,4(r6)
   837fc:	19400044 	addi	r5,r3,1
   83800:	294b883a 	add	r5,r5,r5
   83804:	1807d0ba 	srai	r3,r3,2
   83808:	294b883a 	add	r5,r5,r5
   8380c:	294b883a 	add	r5,r5,r5
   83810:	298b883a 	add	r5,r5,r6
   83814:	38c6983a 	sll	r3,r7,r3
   83818:	29c00017 	ldw	r7,0(r5)
   8381c:	2a7ffe04 	addi	r9,r5,-8
   83820:	1886b03a 	or	r3,r3,r2
   83824:	82400315 	stw	r9,12(r16)
   83828:	81c00215 	stw	r7,8(r16)
   8382c:	30c00115 	stw	r3,4(r6)
   83830:	2c000015 	stw	r16,0(r5)
   83834:	3c000315 	stw	r16,12(r7)
   83838:	2005d0ba 	srai	r2,r4,2
   8383c:	01400044 	movi	r5,1
   83840:	288a983a 	sll	r5,r5,r2
   83844:	19406f36 	bltu	r3,r5,83a04 <_malloc_r+0x324>
   83848:	28c4703a 	and	r2,r5,r3
   8384c:	10000a1e 	bne	r2,zero,83878 <_malloc_r+0x198>
   83850:	00bfff04 	movi	r2,-4
   83854:	294b883a 	add	r5,r5,r5
   83858:	2088703a 	and	r4,r4,r2
   8385c:	28c4703a 	and	r2,r5,r3
   83860:	21000104 	addi	r4,r4,4
   83864:	1000041e 	bne	r2,zero,83878 <_malloc_r+0x198>
   83868:	294b883a 	add	r5,r5,r5
   8386c:	28c4703a 	and	r2,r5,r3
   83870:	21000104 	addi	r4,r4,4
   83874:	103ffc26 	beq	r2,zero,83868 <tx_descriptor+0xfff82808>
   83878:	02bfff04 	movi	r10,-4
   8387c:	024003c4 	movi	r9,15
   83880:	21800044 	addi	r6,r4,1
   83884:	318d883a 	add	r6,r6,r6
   83888:	318d883a 	add	r6,r6,r6
   8388c:	318d883a 	add	r6,r6,r6
   83890:	998d883a 	add	r6,r19,r6
   83894:	333ffe04 	addi	r12,r6,-8
   83898:	2017883a 	mov	r11,r4
   8389c:	31800104 	addi	r6,r6,4
   838a0:	34000017 	ldw	r16,0(r6)
   838a4:	31fffd04 	addi	r7,r6,-12
   838a8:	81c0041e 	bne	r16,r7,838bc <_malloc_r+0x1dc>
   838ac:	0000fb06 	br	83c9c <_malloc_r+0x5bc>
   838b0:	1801030e 	bge	r3,zero,83cc0 <_malloc_r+0x5e0>
   838b4:	84000317 	ldw	r16,12(r16)
   838b8:	81c0f826 	beq	r16,r7,83c9c <_malloc_r+0x5bc>
   838bc:	80800117 	ldw	r2,4(r16)
   838c0:	1284703a 	and	r2,r2,r10
   838c4:	1447c83a 	sub	r3,r2,r17
   838c8:	48fff90e 	bge	r9,r3,838b0 <tx_descriptor+0xfff82850>
   838cc:	80800317 	ldw	r2,12(r16)
   838d0:	81000217 	ldw	r4,8(r16)
   838d4:	89400054 	ori	r5,r17,1
   838d8:	81400115 	stw	r5,4(r16)
   838dc:	20800315 	stw	r2,12(r4)
   838e0:	11000215 	stw	r4,8(r2)
   838e4:	8463883a 	add	r17,r16,r17
   838e8:	9c400515 	stw	r17,20(r19)
   838ec:	9c400415 	stw	r17,16(r19)
   838f0:	18800054 	ori	r2,r3,1
   838f4:	88800115 	stw	r2,4(r17)
   838f8:	8a000315 	stw	r8,12(r17)
   838fc:	8a000215 	stw	r8,8(r17)
   83900:	88e3883a 	add	r17,r17,r3
   83904:	88c00015 	stw	r3,0(r17)
   83908:	9009883a 	mov	r4,r18
   8390c:	00849280 	call	84928 <__malloc_unlock>
   83910:	80800204 	addi	r2,r16,8
   83914:	00001b06 	br	83984 <_malloc_r+0x2a4>
   83918:	04400404 	movi	r17,16
   8391c:	89402536 	bltu	r17,r5,839b4 <_malloc_r+0x2d4>
   83920:	00849240 	call	84924 <__malloc_lock>
   83924:	00800184 	movi	r2,6
   83928:	01000084 	movi	r4,2
   8392c:	04c00234 	movhi	r19,8
   83930:	1085883a 	add	r2,r2,r2
   83934:	9cd9e404 	addi	r19,r19,26512
   83938:	1085883a 	add	r2,r2,r2
   8393c:	9885883a 	add	r2,r19,r2
   83940:	14000117 	ldw	r16,4(r2)
   83944:	10fffe04 	addi	r3,r2,-8
   83948:	80c0d926 	beq	r16,r3,83cb0 <_malloc_r+0x5d0>
   8394c:	80c00117 	ldw	r3,4(r16)
   83950:	81000317 	ldw	r4,12(r16)
   83954:	00bfff04 	movi	r2,-4
   83958:	1884703a 	and	r2,r3,r2
   8395c:	81400217 	ldw	r5,8(r16)
   83960:	8085883a 	add	r2,r16,r2
   83964:	10c00117 	ldw	r3,4(r2)
   83968:	29000315 	stw	r4,12(r5)
   8396c:	21400215 	stw	r5,8(r4)
   83970:	18c00054 	ori	r3,r3,1
   83974:	10c00115 	stw	r3,4(r2)
   83978:	9009883a 	mov	r4,r18
   8397c:	00849280 	call	84928 <__malloc_unlock>
   83980:	80800204 	addi	r2,r16,8
   83984:	dfc00a17 	ldw	ra,40(sp)
   83988:	df000917 	ldw	fp,36(sp)
   8398c:	ddc00817 	ldw	r23,32(sp)
   83990:	dd800717 	ldw	r22,28(sp)
   83994:	dd400617 	ldw	r21,24(sp)
   83998:	dd000517 	ldw	r20,20(sp)
   8399c:	dcc00417 	ldw	r19,16(sp)
   839a0:	dc800317 	ldw	r18,12(sp)
   839a4:	dc400217 	ldw	r17,8(sp)
   839a8:	dc000117 	ldw	r16,4(sp)
   839ac:	dec00b04 	addi	sp,sp,44
   839b0:	f800283a 	ret
   839b4:	00800304 	movi	r2,12
   839b8:	90800015 	stw	r2,0(r18)
   839bc:	0005883a 	mov	r2,zero
   839c0:	003ff006 	br	83984 <tx_descriptor+0xfff82924>
   839c4:	01002004 	movi	r4,128
   839c8:	02001004 	movi	r8,64
   839cc:	01c00fc4 	movi	r7,63
   839d0:	003f6106 	br	83758 <tx_descriptor+0xfff826f8>
   839d4:	4009883a 	mov	r4,r8
   839d8:	003f7506 	br	837b0 <tx_descriptor+0xfff82750>
   839dc:	81000317 	ldw	r4,12(r16)
   839e0:	003fde06 	br	8395c <tx_descriptor+0xfff828fc>
   839e4:	81c5883a 	add	r2,r16,r7
   839e8:	11400117 	ldw	r5,4(r2)
   839ec:	9009883a 	mov	r4,r18
   839f0:	29400054 	ori	r5,r5,1
   839f4:	11400115 	stw	r5,4(r2)
   839f8:	00849280 	call	84928 <__malloc_unlock>
   839fc:	80800204 	addi	r2,r16,8
   83a00:	003fe006 	br	83984 <tx_descriptor+0xfff82924>
   83a04:	9c000217 	ldw	r16,8(r19)
   83a08:	00bfff04 	movi	r2,-4
   83a0c:	85800117 	ldw	r22,4(r16)
   83a10:	b0ac703a 	and	r22,r22,r2
   83a14:	b4400336 	bltu	r22,r17,83a24 <_malloc_r+0x344>
   83a18:	b445c83a 	sub	r2,r22,r17
   83a1c:	00c003c4 	movi	r3,15
   83a20:	18805d16 	blt	r3,r2,83b98 <_malloc_r+0x4b8>
   83a24:	05c00234 	movhi	r23,8
   83a28:	00800274 	movhi	r2,9
   83a2c:	10a2b804 	addi	r2,r2,-29984
   83a30:	bddaf304 	addi	r23,r23,27596
   83a34:	15400017 	ldw	r21,0(r2)
   83a38:	b8c00017 	ldw	r3,0(r23)
   83a3c:	00bfffc4 	movi	r2,-1
   83a40:	858d883a 	add	r6,r16,r22
   83a44:	8d6b883a 	add	r21,r17,r21
   83a48:	1880ea26 	beq	r3,r2,83df4 <_malloc_r+0x714>
   83a4c:	ad4403c4 	addi	r21,r21,4111
   83a50:	00bc0004 	movi	r2,-4096
   83a54:	a8aa703a 	and	r21,r21,r2
   83a58:	a80b883a 	mov	r5,r21
   83a5c:	9009883a 	mov	r4,r18
   83a60:	d9800015 	stw	r6,0(sp)
   83a64:	00842040 	call	84204 <_sbrk_r>
   83a68:	1029883a 	mov	r20,r2
   83a6c:	00bfffc4 	movi	r2,-1
   83a70:	d9800017 	ldw	r6,0(sp)
   83a74:	a080e826 	beq	r20,r2,83e18 <_malloc_r+0x738>
   83a78:	a180a636 	bltu	r20,r6,83d14 <_malloc_r+0x634>
   83a7c:	07000274 	movhi	fp,9
   83a80:	e723b904 	addi	fp,fp,-28956
   83a84:	e0800017 	ldw	r2,0(fp)
   83a88:	a887883a 	add	r3,r21,r2
   83a8c:	e0c00015 	stw	r3,0(fp)
   83a90:	3500e626 	beq	r6,r20,83e2c <_malloc_r+0x74c>
   83a94:	b9000017 	ldw	r4,0(r23)
   83a98:	00bfffc4 	movi	r2,-1
   83a9c:	2080ee26 	beq	r4,r2,83e58 <_malloc_r+0x778>
   83aa0:	a185c83a 	sub	r2,r20,r6
   83aa4:	10c5883a 	add	r2,r2,r3
   83aa8:	e0800015 	stw	r2,0(fp)
   83aac:	a0c001cc 	andi	r3,r20,7
   83ab0:	1800bc26 	beq	r3,zero,83da4 <_malloc_r+0x6c4>
   83ab4:	a0e9c83a 	sub	r20,r20,r3
   83ab8:	00840204 	movi	r2,4104
   83abc:	a5000204 	addi	r20,r20,8
   83ac0:	10c7c83a 	sub	r3,r2,r3
   83ac4:	a545883a 	add	r2,r20,r21
   83ac8:	1083ffcc 	andi	r2,r2,4095
   83acc:	18abc83a 	sub	r21,r3,r2
   83ad0:	a80b883a 	mov	r5,r21
   83ad4:	9009883a 	mov	r4,r18
   83ad8:	00842040 	call	84204 <_sbrk_r>
   83adc:	00ffffc4 	movi	r3,-1
   83ae0:	10c0e126 	beq	r2,r3,83e68 <_malloc_r+0x788>
   83ae4:	1505c83a 	sub	r2,r2,r20
   83ae8:	1545883a 	add	r2,r2,r21
   83aec:	10800054 	ori	r2,r2,1
   83af0:	e0c00017 	ldw	r3,0(fp)
   83af4:	9d000215 	stw	r20,8(r19)
   83af8:	a0800115 	stw	r2,4(r20)
   83afc:	a8c7883a 	add	r3,r21,r3
   83b00:	e0c00015 	stw	r3,0(fp)
   83b04:	84c00e26 	beq	r16,r19,83b40 <_malloc_r+0x460>
   83b08:	018003c4 	movi	r6,15
   83b0c:	3580a72e 	bgeu	r6,r22,83dac <_malloc_r+0x6cc>
   83b10:	81400117 	ldw	r5,4(r16)
   83b14:	013ffe04 	movi	r4,-8
   83b18:	b0bffd04 	addi	r2,r22,-12
   83b1c:	1104703a 	and	r2,r2,r4
   83b20:	2900004c 	andi	r4,r5,1
   83b24:	2088b03a 	or	r4,r4,r2
   83b28:	81000115 	stw	r4,4(r16)
   83b2c:	01400144 	movi	r5,5
   83b30:	8089883a 	add	r4,r16,r2
   83b34:	21400115 	stw	r5,4(r4)
   83b38:	21400215 	stw	r5,8(r4)
   83b3c:	3080cd36 	bltu	r6,r2,83e74 <_malloc_r+0x794>
   83b40:	00800274 	movhi	r2,9
   83b44:	10a2b704 	addi	r2,r2,-29988
   83b48:	11000017 	ldw	r4,0(r2)
   83b4c:	20c0012e 	bgeu	r4,r3,83b54 <_malloc_r+0x474>
   83b50:	10c00015 	stw	r3,0(r2)
   83b54:	00800274 	movhi	r2,9
   83b58:	10a2b604 	addi	r2,r2,-29992
   83b5c:	11000017 	ldw	r4,0(r2)
   83b60:	9c000217 	ldw	r16,8(r19)
   83b64:	20c0012e 	bgeu	r4,r3,83b6c <_malloc_r+0x48c>
   83b68:	10c00015 	stw	r3,0(r2)
   83b6c:	80c00117 	ldw	r3,4(r16)
   83b70:	00bfff04 	movi	r2,-4
   83b74:	1886703a 	and	r3,r3,r2
   83b78:	1c45c83a 	sub	r2,r3,r17
   83b7c:	1c400236 	bltu	r3,r17,83b88 <_malloc_r+0x4a8>
   83b80:	00c003c4 	movi	r3,15
   83b84:	18800416 	blt	r3,r2,83b98 <_malloc_r+0x4b8>
   83b88:	9009883a 	mov	r4,r18
   83b8c:	00849280 	call	84928 <__malloc_unlock>
   83b90:	0005883a 	mov	r2,zero
   83b94:	003f7b06 	br	83984 <tx_descriptor+0xfff82924>
   83b98:	88c00054 	ori	r3,r17,1
   83b9c:	80c00115 	stw	r3,4(r16)
   83ba0:	8463883a 	add	r17,r16,r17
   83ba4:	10800054 	ori	r2,r2,1
   83ba8:	9c400215 	stw	r17,8(r19)
   83bac:	88800115 	stw	r2,4(r17)
   83bb0:	9009883a 	mov	r4,r18
   83bb4:	00849280 	call	84928 <__malloc_unlock>
   83bb8:	80800204 	addi	r2,r16,8
   83bbc:	003f7106 	br	83984 <tx_descriptor+0xfff82924>
   83bc0:	00c00504 	movi	r3,20
   83bc4:	18804a2e 	bgeu	r3,r2,83cf0 <_malloc_r+0x610>
   83bc8:	00c01504 	movi	r3,84
   83bcc:	18806e36 	bltu	r3,r2,83d88 <_malloc_r+0x6a8>
   83bd0:	8804d33a 	srli	r2,r17,12
   83bd4:	12001bc4 	addi	r8,r2,111
   83bd8:	11c01b84 	addi	r7,r2,110
   83bdc:	4209883a 	add	r4,r8,r8
   83be0:	003edd06 	br	83758 <tx_descriptor+0xfff826f8>
   83be4:	3804d27a 	srli	r2,r7,9
   83be8:	00c00104 	movi	r3,4
   83bec:	1880442e 	bgeu	r3,r2,83d00 <_malloc_r+0x620>
   83bf0:	00c00504 	movi	r3,20
   83bf4:	18808136 	bltu	r3,r2,83dfc <_malloc_r+0x71c>
   83bf8:	11401704 	addi	r5,r2,92
   83bfc:	10c016c4 	addi	r3,r2,91
   83c00:	294b883a 	add	r5,r5,r5
   83c04:	294b883a 	add	r5,r5,r5
   83c08:	294b883a 	add	r5,r5,r5
   83c0c:	994b883a 	add	r5,r19,r5
   83c10:	28800017 	ldw	r2,0(r5)
   83c14:	01800234 	movhi	r6,8
   83c18:	297ffe04 	addi	r5,r5,-8
   83c1c:	3199e404 	addi	r6,r6,26512
   83c20:	28806526 	beq	r5,r2,83db8 <_malloc_r+0x6d8>
   83c24:	01bfff04 	movi	r6,-4
   83c28:	10c00117 	ldw	r3,4(r2)
   83c2c:	1986703a 	and	r3,r3,r6
   83c30:	38c0022e 	bgeu	r7,r3,83c3c <_malloc_r+0x55c>
   83c34:	10800217 	ldw	r2,8(r2)
   83c38:	28bffb1e 	bne	r5,r2,83c28 <tx_descriptor+0xfff82bc8>
   83c3c:	11400317 	ldw	r5,12(r2)
   83c40:	98c00117 	ldw	r3,4(r19)
   83c44:	81400315 	stw	r5,12(r16)
   83c48:	80800215 	stw	r2,8(r16)
   83c4c:	2c000215 	stw	r16,8(r5)
   83c50:	14000315 	stw	r16,12(r2)
   83c54:	003ef806 	br	83838 <tx_descriptor+0xfff827d8>
   83c58:	88c00054 	ori	r3,r17,1
   83c5c:	80c00115 	stw	r3,4(r16)
   83c60:	8463883a 	add	r17,r16,r17
   83c64:	34400515 	stw	r17,20(r6)
   83c68:	34400415 	stw	r17,16(r6)
   83c6c:	10c00054 	ori	r3,r2,1
   83c70:	8a000315 	stw	r8,12(r17)
   83c74:	8a000215 	stw	r8,8(r17)
   83c78:	88c00115 	stw	r3,4(r17)
   83c7c:	88a3883a 	add	r17,r17,r2
   83c80:	88800015 	stw	r2,0(r17)
   83c84:	9009883a 	mov	r4,r18
   83c88:	00849280 	call	84928 <__malloc_unlock>
   83c8c:	80800204 	addi	r2,r16,8
   83c90:	003f3c06 	br	83984 <tx_descriptor+0xfff82924>
   83c94:	30c00117 	ldw	r3,4(r6)
   83c98:	003ee706 	br	83838 <tx_descriptor+0xfff827d8>
   83c9c:	5ac00044 	addi	r11,r11,1
   83ca0:	588000cc 	andi	r2,r11,3
   83ca4:	31800204 	addi	r6,r6,8
   83ca8:	103efd1e 	bne	r2,zero,838a0 <tx_descriptor+0xfff82840>
   83cac:	00002406 	br	83d40 <_malloc_r+0x660>
   83cb0:	14000317 	ldw	r16,12(r2)
   83cb4:	143f251e 	bne	r2,r16,8394c <tx_descriptor+0xfff828ec>
   83cb8:	21000084 	addi	r4,r4,2
   83cbc:	003ebc06 	br	837b0 <tx_descriptor+0xfff82750>
   83cc0:	8085883a 	add	r2,r16,r2
   83cc4:	10c00117 	ldw	r3,4(r2)
   83cc8:	81000317 	ldw	r4,12(r16)
   83ccc:	81400217 	ldw	r5,8(r16)
   83cd0:	18c00054 	ori	r3,r3,1
   83cd4:	10c00115 	stw	r3,4(r2)
   83cd8:	29000315 	stw	r4,12(r5)
   83cdc:	21400215 	stw	r5,8(r4)
   83ce0:	9009883a 	mov	r4,r18
   83ce4:	00849280 	call	84928 <__malloc_unlock>
   83ce8:	80800204 	addi	r2,r16,8
   83cec:	003f2506 	br	83984 <tx_descriptor+0xfff82924>
   83cf0:	12001704 	addi	r8,r2,92
   83cf4:	11c016c4 	addi	r7,r2,91
   83cf8:	4209883a 	add	r4,r8,r8
   83cfc:	003e9606 	br	83758 <tx_descriptor+0xfff826f8>
   83d00:	3804d1ba 	srli	r2,r7,6
   83d04:	11400e44 	addi	r5,r2,57
   83d08:	10c00e04 	addi	r3,r2,56
   83d0c:	294b883a 	add	r5,r5,r5
   83d10:	003fbc06 	br	83c04 <tx_descriptor+0xfff82ba4>
   83d14:	84ff5926 	beq	r16,r19,83a7c <tx_descriptor+0xfff82a1c>
   83d18:	00800234 	movhi	r2,8
   83d1c:	1099e404 	addi	r2,r2,26512
   83d20:	14000217 	ldw	r16,8(r2)
   83d24:	00bfff04 	movi	r2,-4
   83d28:	80c00117 	ldw	r3,4(r16)
   83d2c:	1886703a 	and	r3,r3,r2
   83d30:	003f9106 	br	83b78 <tx_descriptor+0xfff82b18>
   83d34:	60800217 	ldw	r2,8(r12)
   83d38:	213fffc4 	addi	r4,r4,-1
   83d3c:	1300651e 	bne	r2,r12,83ed4 <_malloc_r+0x7f4>
   83d40:	208000cc 	andi	r2,r4,3
   83d44:	633ffe04 	addi	r12,r12,-8
   83d48:	103ffa1e 	bne	r2,zero,83d34 <tx_descriptor+0xfff82cd4>
   83d4c:	98800117 	ldw	r2,4(r19)
   83d50:	0146303a 	nor	r3,zero,r5
   83d54:	1884703a 	and	r2,r3,r2
   83d58:	98800115 	stw	r2,4(r19)
   83d5c:	294b883a 	add	r5,r5,r5
   83d60:	117f2836 	bltu	r2,r5,83a04 <tx_descriptor+0xfff829a4>
   83d64:	283f2726 	beq	r5,zero,83a04 <tx_descriptor+0xfff829a4>
   83d68:	2886703a 	and	r3,r5,r2
   83d6c:	5809883a 	mov	r4,r11
   83d70:	183ec31e 	bne	r3,zero,83880 <tx_descriptor+0xfff82820>
   83d74:	294b883a 	add	r5,r5,r5
   83d78:	2886703a 	and	r3,r5,r2
   83d7c:	21000104 	addi	r4,r4,4
   83d80:	183ffc26 	beq	r3,zero,83d74 <tx_descriptor+0xfff82d14>
   83d84:	003ebe06 	br	83880 <tx_descriptor+0xfff82820>
   83d88:	00c05504 	movi	r3,340
   83d8c:	18801236 	bltu	r3,r2,83dd8 <_malloc_r+0x6f8>
   83d90:	8804d3fa 	srli	r2,r17,15
   83d94:	12001e04 	addi	r8,r2,120
   83d98:	11c01dc4 	addi	r7,r2,119
   83d9c:	4209883a 	add	r4,r8,r8
   83da0:	003e6d06 	br	83758 <tx_descriptor+0xfff826f8>
   83da4:	00c40004 	movi	r3,4096
   83da8:	003f4606 	br	83ac4 <tx_descriptor+0xfff82a64>
   83dac:	00800044 	movi	r2,1
   83db0:	a0800115 	stw	r2,4(r20)
   83db4:	003f7406 	br	83b88 <tx_descriptor+0xfff82b28>
   83db8:	1805d0ba 	srai	r2,r3,2
   83dbc:	01c00044 	movi	r7,1
   83dc0:	30c00117 	ldw	r3,4(r6)
   83dc4:	388e983a 	sll	r7,r7,r2
   83dc8:	2805883a 	mov	r2,r5
   83dcc:	38c6b03a 	or	r3,r7,r3
   83dd0:	30c00115 	stw	r3,4(r6)
   83dd4:	003f9b06 	br	83c44 <tx_descriptor+0xfff82be4>
   83dd8:	00c15504 	movi	r3,1364
   83ddc:	18801a36 	bltu	r3,r2,83e48 <_malloc_r+0x768>
   83de0:	8804d4ba 	srli	r2,r17,18
   83de4:	12001f44 	addi	r8,r2,125
   83de8:	11c01f04 	addi	r7,r2,124
   83dec:	4209883a 	add	r4,r8,r8
   83df0:	003e5906 	br	83758 <tx_descriptor+0xfff826f8>
   83df4:	ad400404 	addi	r21,r21,16
   83df8:	003f1706 	br	83a58 <tx_descriptor+0xfff829f8>
   83dfc:	00c01504 	movi	r3,84
   83e00:	18802336 	bltu	r3,r2,83e90 <_malloc_r+0x7b0>
   83e04:	3804d33a 	srli	r2,r7,12
   83e08:	11401bc4 	addi	r5,r2,111
   83e0c:	10c01b84 	addi	r3,r2,110
   83e10:	294b883a 	add	r5,r5,r5
   83e14:	003f7b06 	br	83c04 <tx_descriptor+0xfff82ba4>
   83e18:	9c000217 	ldw	r16,8(r19)
   83e1c:	00bfff04 	movi	r2,-4
   83e20:	80c00117 	ldw	r3,4(r16)
   83e24:	1886703a 	and	r3,r3,r2
   83e28:	003f5306 	br	83b78 <tx_descriptor+0xfff82b18>
   83e2c:	3083ffcc 	andi	r2,r6,4095
   83e30:	103f181e 	bne	r2,zero,83a94 <tx_descriptor+0xfff82a34>
   83e34:	99000217 	ldw	r4,8(r19)
   83e38:	b545883a 	add	r2,r22,r21
   83e3c:	10800054 	ori	r2,r2,1
   83e40:	20800115 	stw	r2,4(r4)
   83e44:	003f3e06 	br	83b40 <tx_descriptor+0xfff82ae0>
   83e48:	01003f84 	movi	r4,254
   83e4c:	02001fc4 	movi	r8,127
   83e50:	01c01f84 	movi	r7,126
   83e54:	003e4006 	br	83758 <tx_descriptor+0xfff826f8>
   83e58:	00800234 	movhi	r2,8
   83e5c:	109af304 	addi	r2,r2,27596
   83e60:	15000015 	stw	r20,0(r2)
   83e64:	003f1106 	br	83aac <tx_descriptor+0xfff82a4c>
   83e68:	00800044 	movi	r2,1
   83e6c:	002b883a 	mov	r21,zero
   83e70:	003f1f06 	br	83af0 <tx_descriptor+0xfff82a90>
   83e74:	81400204 	addi	r5,r16,8
   83e78:	9009883a 	mov	r4,r18
   83e7c:	008308c0 	call	8308c <_free_r>
   83e80:	00800274 	movhi	r2,9
   83e84:	10a3b904 	addi	r2,r2,-28956
   83e88:	10c00017 	ldw	r3,0(r2)
   83e8c:	003f2c06 	br	83b40 <tx_descriptor+0xfff82ae0>
   83e90:	00c05504 	movi	r3,340
   83e94:	18800536 	bltu	r3,r2,83eac <_malloc_r+0x7cc>
   83e98:	3804d3fa 	srli	r2,r7,15
   83e9c:	11401e04 	addi	r5,r2,120
   83ea0:	10c01dc4 	addi	r3,r2,119
   83ea4:	294b883a 	add	r5,r5,r5
   83ea8:	003f5606 	br	83c04 <tx_descriptor+0xfff82ba4>
   83eac:	00c15504 	movi	r3,1364
   83eb0:	18800536 	bltu	r3,r2,83ec8 <_malloc_r+0x7e8>
   83eb4:	3804d4ba 	srli	r2,r7,18
   83eb8:	11401f44 	addi	r5,r2,125
   83ebc:	10c01f04 	addi	r3,r2,124
   83ec0:	294b883a 	add	r5,r5,r5
   83ec4:	003f4f06 	br	83c04 <tx_descriptor+0xfff82ba4>
   83ec8:	01403f84 	movi	r5,254
   83ecc:	00c01f84 	movi	r3,126
   83ed0:	003f4c06 	br	83c04 <tx_descriptor+0xfff82ba4>
   83ed4:	98800117 	ldw	r2,4(r19)
   83ed8:	003fa006 	br	83d5c <tx_descriptor+0xfff82cfc>
   83edc:	8808d0fa 	srli	r4,r17,3
   83ee0:	20800044 	addi	r2,r4,1
   83ee4:	1085883a 	add	r2,r2,r2
   83ee8:	003e9006 	br	8392c <tx_descriptor+0xfff828cc>

00083eec <memset>:
   83eec:	20c000cc 	andi	r3,r4,3
   83ef0:	2005883a 	mov	r2,r4
   83ef4:	18004426 	beq	r3,zero,84008 <memset+0x11c>
   83ef8:	31ffffc4 	addi	r7,r6,-1
   83efc:	30004026 	beq	r6,zero,84000 <memset+0x114>
   83f00:	2813883a 	mov	r9,r5
   83f04:	200d883a 	mov	r6,r4
   83f08:	2007883a 	mov	r3,r4
   83f0c:	00000406 	br	83f20 <memset+0x34>
   83f10:	3a3fffc4 	addi	r8,r7,-1
   83f14:	31800044 	addi	r6,r6,1
   83f18:	38003926 	beq	r7,zero,84000 <memset+0x114>
   83f1c:	400f883a 	mov	r7,r8
   83f20:	18c00044 	addi	r3,r3,1
   83f24:	32400005 	stb	r9,0(r6)
   83f28:	1a0000cc 	andi	r8,r3,3
   83f2c:	403ff81e 	bne	r8,zero,83f10 <tx_descriptor+0xfff82eb0>
   83f30:	010000c4 	movi	r4,3
   83f34:	21c02d2e 	bgeu	r4,r7,83fec <memset+0x100>
   83f38:	29003fcc 	andi	r4,r5,255
   83f3c:	200c923a 	slli	r6,r4,8
   83f40:	3108b03a 	or	r4,r6,r4
   83f44:	200c943a 	slli	r6,r4,16
   83f48:	218cb03a 	or	r6,r4,r6
   83f4c:	010003c4 	movi	r4,15
   83f50:	21c0182e 	bgeu	r4,r7,83fb4 <memset+0xc8>
   83f54:	3b3ffc04 	addi	r12,r7,-16
   83f58:	6018d13a 	srli	r12,r12,4
   83f5c:	1a000104 	addi	r8,r3,4
   83f60:	1ac00204 	addi	r11,r3,8
   83f64:	6008913a 	slli	r4,r12,4
   83f68:	1a800304 	addi	r10,r3,12
   83f6c:	1813883a 	mov	r9,r3
   83f70:	21000504 	addi	r4,r4,20
   83f74:	1909883a 	add	r4,r3,r4
   83f78:	49800015 	stw	r6,0(r9)
   83f7c:	41800015 	stw	r6,0(r8)
   83f80:	59800015 	stw	r6,0(r11)
   83f84:	51800015 	stw	r6,0(r10)
   83f88:	42000404 	addi	r8,r8,16
   83f8c:	4a400404 	addi	r9,r9,16
   83f90:	5ac00404 	addi	r11,r11,16
   83f94:	52800404 	addi	r10,r10,16
   83f98:	413ff71e 	bne	r8,r4,83f78 <tx_descriptor+0xfff82f18>
   83f9c:	63000044 	addi	r12,r12,1
   83fa0:	6018913a 	slli	r12,r12,4
   83fa4:	39c003cc 	andi	r7,r7,15
   83fa8:	010000c4 	movi	r4,3
   83fac:	1b07883a 	add	r3,r3,r12
   83fb0:	21c00e2e 	bgeu	r4,r7,83fec <memset+0x100>
   83fb4:	1813883a 	mov	r9,r3
   83fb8:	3811883a 	mov	r8,r7
   83fbc:	010000c4 	movi	r4,3
   83fc0:	49800015 	stw	r6,0(r9)
   83fc4:	423fff04 	addi	r8,r8,-4
   83fc8:	4a400104 	addi	r9,r9,4
   83fcc:	223ffc36 	bltu	r4,r8,83fc0 <tx_descriptor+0xfff82f60>
   83fd0:	393fff04 	addi	r4,r7,-4
   83fd4:	2008d0ba 	srli	r4,r4,2
   83fd8:	39c000cc 	andi	r7,r7,3
   83fdc:	21000044 	addi	r4,r4,1
   83fe0:	2109883a 	add	r4,r4,r4
   83fe4:	2109883a 	add	r4,r4,r4
   83fe8:	1907883a 	add	r3,r3,r4
   83fec:	38000526 	beq	r7,zero,84004 <memset+0x118>
   83ff0:	19cf883a 	add	r7,r3,r7
   83ff4:	19400005 	stb	r5,0(r3)
   83ff8:	18c00044 	addi	r3,r3,1
   83ffc:	38fffd1e 	bne	r7,r3,83ff4 <tx_descriptor+0xfff82f94>
   84000:	f800283a 	ret
   84004:	f800283a 	ret
   84008:	2007883a 	mov	r3,r4
   8400c:	300f883a 	mov	r7,r6
   84010:	003fc706 	br	83f30 <tx_descriptor+0xfff82ed0>

00084014 <lflush>:
   84014:	2080030b 	ldhu	r2,12(r4)
   84018:	00c00244 	movi	r3,9
   8401c:	1080024c 	andi	r2,r2,9
   84020:	10c00226 	beq	r2,r3,8402c <lflush+0x18>
   84024:	0005883a 	mov	r2,zero
   84028:	f800283a 	ret
   8402c:	0082b881 	jmpi	82b88 <fflush>

00084030 <__srefill_r>:
   84030:	defffc04 	addi	sp,sp,-16
   84034:	dc400115 	stw	r17,4(sp)
   84038:	dc000015 	stw	r16,0(sp)
   8403c:	dfc00315 	stw	ra,12(sp)
   84040:	dc800215 	stw	r18,8(sp)
   84044:	2023883a 	mov	r17,r4
   84048:	2821883a 	mov	r16,r5
   8404c:	20000226 	beq	r4,zero,84058 <__srefill_r+0x28>
   84050:	20800e17 	ldw	r2,56(r4)
   84054:	10003c26 	beq	r2,zero,84148 <__srefill_r+0x118>
   84058:	80c0030b 	ldhu	r3,12(r16)
   8405c:	1908000c 	andi	r4,r3,8192
   84060:	1805883a 	mov	r2,r3
   84064:	2000071e 	bne	r4,zero,84084 <__srefill_r+0x54>
   84068:	81001917 	ldw	r4,100(r16)
   8406c:	18880014 	ori	r2,r3,8192
   84070:	00f7ffc4 	movi	r3,-8193
   84074:	20c8703a 	and	r4,r4,r3
   84078:	8080030d 	sth	r2,12(r16)
   8407c:	1007883a 	mov	r3,r2
   84080:	81001915 	stw	r4,100(r16)
   84084:	80000115 	stw	zero,4(r16)
   84088:	1100080c 	andi	r4,r2,32
   8408c:	2000571e 	bne	r4,zero,841ec <__srefill_r+0x1bc>
   84090:	1100010c 	andi	r4,r2,4
   84094:	20001f26 	beq	r4,zero,84114 <__srefill_r+0xe4>
   84098:	81400c17 	ldw	r5,48(r16)
   8409c:	28000826 	beq	r5,zero,840c0 <__srefill_r+0x90>
   840a0:	80801004 	addi	r2,r16,64
   840a4:	28800226 	beq	r5,r2,840b0 <__srefill_r+0x80>
   840a8:	8809883a 	mov	r4,r17
   840ac:	008308c0 	call	8308c <_free_r>
   840b0:	80800f17 	ldw	r2,60(r16)
   840b4:	80000c15 	stw	zero,48(r16)
   840b8:	80800115 	stw	r2,4(r16)
   840bc:	1000391e 	bne	r2,zero,841a4 <__srefill_r+0x174>
   840c0:	80800417 	ldw	r2,16(r16)
   840c4:	10004b26 	beq	r2,zero,841f4 <__srefill_r+0x1c4>
   840c8:	8480030b 	ldhu	r18,12(r16)
   840cc:	908000cc 	andi	r2,r18,3
   840d0:	10001f1e 	bne	r2,zero,84150 <__srefill_r+0x120>
   840d4:	81800417 	ldw	r6,16(r16)
   840d8:	80800817 	ldw	r2,32(r16)
   840dc:	81c00517 	ldw	r7,20(r16)
   840e0:	81400717 	ldw	r5,28(r16)
   840e4:	81800015 	stw	r6,0(r16)
   840e8:	8809883a 	mov	r4,r17
   840ec:	103ee83a 	callr	r2
   840f0:	80800115 	stw	r2,4(r16)
   840f4:	00800e0e 	bge	zero,r2,84130 <__srefill_r+0x100>
   840f8:	0005883a 	mov	r2,zero
   840fc:	dfc00317 	ldw	ra,12(sp)
   84100:	dc800217 	ldw	r18,8(sp)
   84104:	dc400117 	ldw	r17,4(sp)
   84108:	dc000017 	ldw	r16,0(sp)
   8410c:	dec00404 	addi	sp,sp,16
   84110:	f800283a 	ret
   84114:	1100040c 	andi	r4,r2,16
   84118:	20003026 	beq	r4,zero,841dc <__srefill_r+0x1ac>
   8411c:	1080020c 	andi	r2,r2,8
   84120:	1000241e 	bne	r2,zero,841b4 <__srefill_r+0x184>
   84124:	18c00114 	ori	r3,r3,4
   84128:	80c0030d 	sth	r3,12(r16)
   8412c:	003fe406 	br	840c0 <tx_descriptor+0xfff83060>
   84130:	80c0030b 	ldhu	r3,12(r16)
   84134:	1000161e 	bne	r2,zero,84190 <__srefill_r+0x160>
   84138:	18c00814 	ori	r3,r3,32
   8413c:	00bfffc4 	movi	r2,-1
   84140:	80c0030d 	sth	r3,12(r16)
   84144:	003fed06 	br	840fc <tx_descriptor+0xfff8309c>
   84148:	0082f180 	call	82f18 <__sinit>
   8414c:	003fc206 	br	84058 <tx_descriptor+0xfff82ff8>
   84150:	00800234 	movhi	r2,8
   84154:	109af104 	addi	r2,r2,27588
   84158:	11000017 	ldw	r4,0(r2)
   8415c:	01400234 	movhi	r5,8
   84160:	00800044 	movi	r2,1
   84164:	29500504 	addi	r5,r5,16404
   84168:	8080030d 	sth	r2,12(r16)
   8416c:	008339c0 	call	8339c <_fwalk>
   84170:	00800244 	movi	r2,9
   84174:	8480030d 	sth	r18,12(r16)
   84178:	9480024c 	andi	r18,r18,9
   8417c:	90bfd51e 	bne	r18,r2,840d4 <tx_descriptor+0xfff83074>
   84180:	800b883a 	mov	r5,r16
   84184:	8809883a 	mov	r4,r17
   84188:	00829100 	call	82910 <__sflush_r>
   8418c:	003fd106 	br	840d4 <tx_descriptor+0xfff83074>
   84190:	18c01014 	ori	r3,r3,64
   84194:	80000115 	stw	zero,4(r16)
   84198:	00bfffc4 	movi	r2,-1
   8419c:	80c0030d 	sth	r3,12(r16)
   841a0:	003fd606 	br	840fc <tx_descriptor+0xfff8309c>
   841a4:	80c00e17 	ldw	r3,56(r16)
   841a8:	0005883a 	mov	r2,zero
   841ac:	80c00015 	stw	r3,0(r16)
   841b0:	003fd206 	br	840fc <tx_descriptor+0xfff8309c>
   841b4:	800b883a 	mov	r5,r16
   841b8:	8809883a 	mov	r4,r17
   841bc:	0082b2c0 	call	82b2c <_fflush_r>
   841c0:	10000a1e 	bne	r2,zero,841ec <__srefill_r+0x1bc>
   841c4:	8080030b 	ldhu	r2,12(r16)
   841c8:	00fffdc4 	movi	r3,-9
   841cc:	80000215 	stw	zero,8(r16)
   841d0:	1886703a 	and	r3,r3,r2
   841d4:	80000615 	stw	zero,24(r16)
   841d8:	003fd206 	br	84124 <tx_descriptor+0xfff830c4>
   841dc:	00800244 	movi	r2,9
   841e0:	88800015 	stw	r2,0(r17)
   841e4:	18c01014 	ori	r3,r3,64
   841e8:	80c0030d 	sth	r3,12(r16)
   841ec:	00bfffc4 	movi	r2,-1
   841f0:	003fc206 	br	840fc <tx_descriptor+0xfff8309c>
   841f4:	800b883a 	mov	r5,r16
   841f8:	8809883a 	mov	r4,r17
   841fc:	00835240 	call	83524 <__smakebuf_r>
   84200:	003fb106 	br	840c8 <tx_descriptor+0xfff83068>

00084204 <_sbrk_r>:
   84204:	defffd04 	addi	sp,sp,-12
   84208:	dc000015 	stw	r16,0(sp)
   8420c:	04000274 	movhi	r16,9
   84210:	dc400115 	stw	r17,4(sp)
   84214:	8422b504 	addi	r16,r16,-29996
   84218:	2023883a 	mov	r17,r4
   8421c:	2809883a 	mov	r4,r5
   84220:	dfc00215 	stw	ra,8(sp)
   84224:	80000015 	stw	zero,0(r16)
   84228:	0084a540 	call	84a54 <sbrk>
   8422c:	00ffffc4 	movi	r3,-1
   84230:	10c00526 	beq	r2,r3,84248 <_sbrk_r+0x44>
   84234:	dfc00217 	ldw	ra,8(sp)
   84238:	dc400117 	ldw	r17,4(sp)
   8423c:	dc000017 	ldw	r16,0(sp)
   84240:	dec00304 	addi	sp,sp,12
   84244:	f800283a 	ret
   84248:	80c00017 	ldw	r3,0(r16)
   8424c:	183ff926 	beq	r3,zero,84234 <tx_descriptor+0xfff831d4>
   84250:	88c00015 	stw	r3,0(r17)
   84254:	003ff706 	br	84234 <tx_descriptor+0xfff831d4>

00084258 <__sread>:
   84258:	defffe04 	addi	sp,sp,-8
   8425c:	dc000015 	stw	r16,0(sp)
   84260:	2821883a 	mov	r16,r5
   84264:	2940038f 	ldh	r5,14(r5)
   84268:	dfc00115 	stw	ra,4(sp)
   8426c:	008465c0 	call	8465c <_read_r>
   84270:	10000716 	blt	r2,zero,84290 <__sread+0x38>
   84274:	80c01417 	ldw	r3,80(r16)
   84278:	1887883a 	add	r3,r3,r2
   8427c:	80c01415 	stw	r3,80(r16)
   84280:	dfc00117 	ldw	ra,4(sp)
   84284:	dc000017 	ldw	r16,0(sp)
   84288:	dec00204 	addi	sp,sp,8
   8428c:	f800283a 	ret
   84290:	80c0030b 	ldhu	r3,12(r16)
   84294:	18fbffcc 	andi	r3,r3,61439
   84298:	80c0030d 	sth	r3,12(r16)
   8429c:	dfc00117 	ldw	ra,4(sp)
   842a0:	dc000017 	ldw	r16,0(sp)
   842a4:	dec00204 	addi	sp,sp,8
   842a8:	f800283a 	ret

000842ac <__seofread>:
   842ac:	0005883a 	mov	r2,zero
   842b0:	f800283a 	ret

000842b4 <__swrite>:
   842b4:	2880030b 	ldhu	r2,12(r5)
   842b8:	defffb04 	addi	sp,sp,-20
   842bc:	dcc00315 	stw	r19,12(sp)
   842c0:	dc800215 	stw	r18,8(sp)
   842c4:	dc400115 	stw	r17,4(sp)
   842c8:	dc000015 	stw	r16,0(sp)
   842cc:	dfc00415 	stw	ra,16(sp)
   842d0:	10c0400c 	andi	r3,r2,256
   842d4:	2821883a 	mov	r16,r5
   842d8:	2023883a 	mov	r17,r4
   842dc:	3025883a 	mov	r18,r6
   842e0:	3827883a 	mov	r19,r7
   842e4:	18000526 	beq	r3,zero,842fc <__swrite+0x48>
   842e8:	2940038f 	ldh	r5,14(r5)
   842ec:	01c00084 	movi	r7,2
   842f0:	000d883a 	mov	r6,zero
   842f4:	00845fc0 	call	845fc <_lseek_r>
   842f8:	8080030b 	ldhu	r2,12(r16)
   842fc:	8140038f 	ldh	r5,14(r16)
   84300:	10bbffcc 	andi	r2,r2,61439
   84304:	980f883a 	mov	r7,r19
   84308:	900d883a 	mov	r6,r18
   8430c:	8809883a 	mov	r4,r17
   84310:	8080030d 	sth	r2,12(r16)
   84314:	dfc00417 	ldw	ra,16(sp)
   84318:	dcc00317 	ldw	r19,12(sp)
   8431c:	dc800217 	ldw	r18,8(sp)
   84320:	dc400117 	ldw	r17,4(sp)
   84324:	dc000017 	ldw	r16,0(sp)
   84328:	dec00504 	addi	sp,sp,20
   8432c:	00843941 	jmpi	84394 <_write_r>

00084330 <__sseek>:
   84330:	defffe04 	addi	sp,sp,-8
   84334:	dc000015 	stw	r16,0(sp)
   84338:	2821883a 	mov	r16,r5
   8433c:	2940038f 	ldh	r5,14(r5)
   84340:	dfc00115 	stw	ra,4(sp)
   84344:	00845fc0 	call	845fc <_lseek_r>
   84348:	00ffffc4 	movi	r3,-1
   8434c:	10c00826 	beq	r2,r3,84370 <__sseek+0x40>
   84350:	80c0030b 	ldhu	r3,12(r16)
   84354:	80801415 	stw	r2,80(r16)
   84358:	18c40014 	ori	r3,r3,4096
   8435c:	80c0030d 	sth	r3,12(r16)
   84360:	dfc00117 	ldw	ra,4(sp)
   84364:	dc000017 	ldw	r16,0(sp)
   84368:	dec00204 	addi	sp,sp,8
   8436c:	f800283a 	ret
   84370:	80c0030b 	ldhu	r3,12(r16)
   84374:	18fbffcc 	andi	r3,r3,61439
   84378:	80c0030d 	sth	r3,12(r16)
   8437c:	dfc00117 	ldw	ra,4(sp)
   84380:	dc000017 	ldw	r16,0(sp)
   84384:	dec00204 	addi	sp,sp,8
   84388:	f800283a 	ret

0008438c <__sclose>:
   8438c:	2940038f 	ldh	r5,14(r5)
   84390:	00843f41 	jmpi	843f4 <_close_r>

00084394 <_write_r>:
   84394:	defffd04 	addi	sp,sp,-12
   84398:	2805883a 	mov	r2,r5
   8439c:	dc000015 	stw	r16,0(sp)
   843a0:	04000274 	movhi	r16,9
   843a4:	dc400115 	stw	r17,4(sp)
   843a8:	300b883a 	mov	r5,r6
   843ac:	8422b504 	addi	r16,r16,-29996
   843b0:	2023883a 	mov	r17,r4
   843b4:	380d883a 	mov	r6,r7
   843b8:	1009883a 	mov	r4,r2
   843bc:	dfc00215 	stw	ra,8(sp)
   843c0:	80000015 	stw	zero,0(r16)
   843c4:	0084aa00 	call	84aa0 <write>
   843c8:	00ffffc4 	movi	r3,-1
   843cc:	10c00526 	beq	r2,r3,843e4 <_write_r+0x50>
   843d0:	dfc00217 	ldw	ra,8(sp)
   843d4:	dc400117 	ldw	r17,4(sp)
   843d8:	dc000017 	ldw	r16,0(sp)
   843dc:	dec00304 	addi	sp,sp,12
   843e0:	f800283a 	ret
   843e4:	80c00017 	ldw	r3,0(r16)
   843e8:	183ff926 	beq	r3,zero,843d0 <tx_descriptor+0xfff83370>
   843ec:	88c00015 	stw	r3,0(r17)
   843f0:	003ff706 	br	843d0 <tx_descriptor+0xfff83370>

000843f4 <_close_r>:
   843f4:	defffd04 	addi	sp,sp,-12
   843f8:	dc000015 	stw	r16,0(sp)
   843fc:	04000274 	movhi	r16,9
   84400:	dc400115 	stw	r17,4(sp)
   84404:	8422b504 	addi	r16,r16,-29996
   84408:	2023883a 	mov	r17,r4
   8440c:	2809883a 	mov	r4,r5
   84410:	dfc00215 	stw	ra,8(sp)
   84414:	80000015 	stw	zero,0(r16)
   84418:	00816740 	call	81674 <close>
   8441c:	00ffffc4 	movi	r3,-1
   84420:	10c00526 	beq	r2,r3,84438 <_close_r+0x44>
   84424:	dfc00217 	ldw	ra,8(sp)
   84428:	dc400117 	ldw	r17,4(sp)
   8442c:	dc000017 	ldw	r16,0(sp)
   84430:	dec00304 	addi	sp,sp,12
   84434:	f800283a 	ret
   84438:	80c00017 	ldw	r3,0(r16)
   8443c:	183ff926 	beq	r3,zero,84424 <tx_descriptor+0xfff833c4>
   84440:	88c00015 	stw	r3,0(r17)
   84444:	003ff706 	br	84424 <tx_descriptor+0xfff833c4>

00084448 <_fclose_r>:
   84448:	28003926 	beq	r5,zero,84530 <_fclose_r+0xe8>
   8444c:	defffc04 	addi	sp,sp,-16
   84450:	dc400115 	stw	r17,4(sp)
   84454:	dc000015 	stw	r16,0(sp)
   84458:	dfc00315 	stw	ra,12(sp)
   8445c:	dc800215 	stw	r18,8(sp)
   84460:	2023883a 	mov	r17,r4
   84464:	2821883a 	mov	r16,r5
   84468:	20000226 	beq	r4,zero,84474 <_fclose_r+0x2c>
   8446c:	20800e17 	ldw	r2,56(r4)
   84470:	10002726 	beq	r2,zero,84510 <_fclose_r+0xc8>
   84474:	8080030f 	ldh	r2,12(r16)
   84478:	1000071e 	bne	r2,zero,84498 <_fclose_r+0x50>
   8447c:	0005883a 	mov	r2,zero
   84480:	dfc00317 	ldw	ra,12(sp)
   84484:	dc800217 	ldw	r18,8(sp)
   84488:	dc400117 	ldw	r17,4(sp)
   8448c:	dc000017 	ldw	r16,0(sp)
   84490:	dec00404 	addi	sp,sp,16
   84494:	f800283a 	ret
   84498:	800b883a 	mov	r5,r16
   8449c:	8809883a 	mov	r4,r17
   844a0:	00829100 	call	82910 <__sflush_r>
   844a4:	1025883a 	mov	r18,r2
   844a8:	80800b17 	ldw	r2,44(r16)
   844ac:	10000426 	beq	r2,zero,844c0 <_fclose_r+0x78>
   844b0:	81400717 	ldw	r5,28(r16)
   844b4:	8809883a 	mov	r4,r17
   844b8:	103ee83a 	callr	r2
   844bc:	10001616 	blt	r2,zero,84518 <_fclose_r+0xd0>
   844c0:	8080030b 	ldhu	r2,12(r16)
   844c4:	1080200c 	andi	r2,r2,128
   844c8:	1000151e 	bne	r2,zero,84520 <_fclose_r+0xd8>
   844cc:	81400c17 	ldw	r5,48(r16)
   844d0:	28000526 	beq	r5,zero,844e8 <_fclose_r+0xa0>
   844d4:	80801004 	addi	r2,r16,64
   844d8:	28800226 	beq	r5,r2,844e4 <_fclose_r+0x9c>
   844dc:	8809883a 	mov	r4,r17
   844e0:	008308c0 	call	8308c <_free_r>
   844e4:	80000c15 	stw	zero,48(r16)
   844e8:	81401117 	ldw	r5,68(r16)
   844ec:	28000326 	beq	r5,zero,844fc <_fclose_r+0xb4>
   844f0:	8809883a 	mov	r4,r17
   844f4:	008308c0 	call	8308c <_free_r>
   844f8:	80001115 	stw	zero,68(r16)
   844fc:	0082f280 	call	82f28 <__sfp_lock_acquire>
   84500:	8000030d 	sth	zero,12(r16)
   84504:	0082f2c0 	call	82f2c <__sfp_lock_release>
   84508:	9005883a 	mov	r2,r18
   8450c:	003fdc06 	br	84480 <tx_descriptor+0xfff83420>
   84510:	0082f180 	call	82f18 <__sinit>
   84514:	003fd706 	br	84474 <tx_descriptor+0xfff83414>
   84518:	04bfffc4 	movi	r18,-1
   8451c:	003fe806 	br	844c0 <tx_descriptor+0xfff83460>
   84520:	81400417 	ldw	r5,16(r16)
   84524:	8809883a 	mov	r4,r17
   84528:	008308c0 	call	8308c <_free_r>
   8452c:	003fe706 	br	844cc <tx_descriptor+0xfff8346c>
   84530:	0005883a 	mov	r2,zero
   84534:	f800283a 	ret

00084538 <fclose>:
   84538:	00800234 	movhi	r2,8
   8453c:	109af204 	addi	r2,r2,27592
   84540:	200b883a 	mov	r5,r4
   84544:	11000017 	ldw	r4,0(r2)
   84548:	00844481 	jmpi	84448 <_fclose_r>

0008454c <_fstat_r>:
   8454c:	defffd04 	addi	sp,sp,-12
   84550:	2805883a 	mov	r2,r5
   84554:	dc000015 	stw	r16,0(sp)
   84558:	04000274 	movhi	r16,9
   8455c:	dc400115 	stw	r17,4(sp)
   84560:	8422b504 	addi	r16,r16,-29996
   84564:	2023883a 	mov	r17,r4
   84568:	300b883a 	mov	r5,r6
   8456c:	1009883a 	mov	r4,r2
   84570:	dfc00215 	stw	ra,8(sp)
   84574:	80000015 	stw	zero,0(r16)
   84578:	00846f80 	call	846f8 <fstat>
   8457c:	00ffffc4 	movi	r3,-1
   84580:	10c00526 	beq	r2,r3,84598 <_fstat_r+0x4c>
   84584:	dfc00217 	ldw	ra,8(sp)
   84588:	dc400117 	ldw	r17,4(sp)
   8458c:	dc000017 	ldw	r16,0(sp)
   84590:	dec00304 	addi	sp,sp,12
   84594:	f800283a 	ret
   84598:	80c00017 	ldw	r3,0(r16)
   8459c:	183ff926 	beq	r3,zero,84584 <tx_descriptor+0xfff83524>
   845a0:	88c00015 	stw	r3,0(r17)
   845a4:	003ff706 	br	84584 <tx_descriptor+0xfff83524>

000845a8 <_isatty_r>:
   845a8:	defffd04 	addi	sp,sp,-12
   845ac:	dc000015 	stw	r16,0(sp)
   845b0:	04000274 	movhi	r16,9
   845b4:	dc400115 	stw	r17,4(sp)
   845b8:	8422b504 	addi	r16,r16,-29996
   845bc:	2023883a 	mov	r17,r4
   845c0:	2809883a 	mov	r4,r5
   845c4:	dfc00215 	stw	ra,8(sp)
   845c8:	80000015 	stw	zero,0(r16)
   845cc:	00847ac0 	call	847ac <isatty>
   845d0:	00ffffc4 	movi	r3,-1
   845d4:	10c00526 	beq	r2,r3,845ec <_isatty_r+0x44>
   845d8:	dfc00217 	ldw	ra,8(sp)
   845dc:	dc400117 	ldw	r17,4(sp)
   845e0:	dc000017 	ldw	r16,0(sp)
   845e4:	dec00304 	addi	sp,sp,12
   845e8:	f800283a 	ret
   845ec:	80c00017 	ldw	r3,0(r16)
   845f0:	183ff926 	beq	r3,zero,845d8 <tx_descriptor+0xfff83578>
   845f4:	88c00015 	stw	r3,0(r17)
   845f8:	003ff706 	br	845d8 <tx_descriptor+0xfff83578>

000845fc <_lseek_r>:
   845fc:	defffd04 	addi	sp,sp,-12
   84600:	2805883a 	mov	r2,r5
   84604:	dc000015 	stw	r16,0(sp)
   84608:	04000274 	movhi	r16,9
   8460c:	dc400115 	stw	r17,4(sp)
   84610:	300b883a 	mov	r5,r6
   84614:	8422b504 	addi	r16,r16,-29996
   84618:	2023883a 	mov	r17,r4
   8461c:	380d883a 	mov	r6,r7
   84620:	1009883a 	mov	r4,r2
   84624:	dfc00215 	stw	ra,8(sp)
   84628:	80000015 	stw	zero,0(r16)
   8462c:	008484c0 	call	8484c <lseek>
   84630:	00ffffc4 	movi	r3,-1
   84634:	10c00526 	beq	r2,r3,8464c <_lseek_r+0x50>
   84638:	dfc00217 	ldw	ra,8(sp)
   8463c:	dc400117 	ldw	r17,4(sp)
   84640:	dc000017 	ldw	r16,0(sp)
   84644:	dec00304 	addi	sp,sp,12
   84648:	f800283a 	ret
   8464c:	80c00017 	ldw	r3,0(r16)
   84650:	183ff926 	beq	r3,zero,84638 <tx_descriptor+0xfff835d8>
   84654:	88c00015 	stw	r3,0(r17)
   84658:	003ff706 	br	84638 <tx_descriptor+0xfff835d8>

0008465c <_read_r>:
   8465c:	defffd04 	addi	sp,sp,-12
   84660:	2805883a 	mov	r2,r5
   84664:	dc000015 	stw	r16,0(sp)
   84668:	04000274 	movhi	r16,9
   8466c:	dc400115 	stw	r17,4(sp)
   84670:	300b883a 	mov	r5,r6
   84674:	8422b504 	addi	r16,r16,-29996
   84678:	2023883a 	mov	r17,r4
   8467c:	380d883a 	mov	r6,r7
   84680:	1009883a 	mov	r4,r2
   84684:	dfc00215 	stw	ra,8(sp)
   84688:	80000015 	stw	zero,0(r16)
   8468c:	008492c0 	call	8492c <read>
   84690:	00ffffc4 	movi	r3,-1
   84694:	10c00526 	beq	r2,r3,846ac <_read_r+0x50>
   84698:	dfc00217 	ldw	ra,8(sp)
   8469c:	dc400117 	ldw	r17,4(sp)
   846a0:	dc000017 	ldw	r16,0(sp)
   846a4:	dec00304 	addi	sp,sp,12
   846a8:	f800283a 	ret
   846ac:	80c00017 	ldw	r3,0(r16)
   846b0:	183ff926 	beq	r3,zero,84698 <tx_descriptor+0xfff83638>
   846b4:	88c00015 	stw	r3,0(r17)
   846b8:	003ff706 	br	84698 <tx_descriptor+0xfff83638>

000846bc <__mulsi3>:
   846bc:	0005883a 	mov	r2,zero
   846c0:	20000726 	beq	r4,zero,846e0 <__mulsi3+0x24>
   846c4:	20c0004c 	andi	r3,r4,1
   846c8:	2008d07a 	srli	r4,r4,1
   846cc:	18000126 	beq	r3,zero,846d4 <__mulsi3+0x18>
   846d0:	1145883a 	add	r2,r2,r5
   846d4:	294b883a 	add	r5,r5,r5
   846d8:	203ffa1e 	bne	r4,zero,846c4 <tx_descriptor+0xfff83664>
   846dc:	f800283a 	ret
   846e0:	f800283a 	ret

000846e4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   846e4:	20000226 	beq	r4,zero,846f0 <_exit+0xc>
    ALT_SIM_FAIL();
   846e8:	002af070 	cmpltui	zero,zero,43969
   846ec:	00000106 	br	846f4 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   846f0:	002af0b0 	cmpltui	zero,zero,43970
   846f4:	003fff06 	br	846f4 <tx_descriptor+0xfff83694>

000846f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   846f8:	defffc04 	addi	sp,sp,-16
   846fc:	dfc00315 	stw	ra,12(sp)
   84700:	dc800215 	stw	r18,8(sp)
   84704:	dc400115 	stw	r17,4(sp)
   84708:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8470c:	20001916 	blt	r4,zero,84774 <fstat+0x7c>
   84710:	2021883a 	mov	r16,r4
   84714:	2825883a 	mov	r18,r5
   84718:	01400304 	movi	r5,12
   8471c:	00846bc0 	call	846bc <__mulsi3>
   84720:	04400234 	movhi	r17,8
   84724:	8c587104 	addi	r17,r17,25028
   84728:	1463883a 	add	r17,r2,r17
  
  if (fd)
   8472c:	88001126 	beq	r17,zero,84774 <fstat+0x7c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   84730:	01400304 	movi	r5,12
   84734:	8009883a 	mov	r4,r16
   84738:	00846bc0 	call	846bc <__mulsi3>
   8473c:	00c00234 	movhi	r3,8
   84740:	18d87104 	addi	r3,r3,25028
   84744:	1885883a 	add	r2,r3,r2
   84748:	10800017 	ldw	r2,0(r2)
   8474c:	10800817 	ldw	r2,32(r2)
   84750:	10000426 	beq	r2,zero,84764 <fstat+0x6c>
    {
      return fd->dev->fstat(fd, st);
   84754:	900b883a 	mov	r5,r18
   84758:	8809883a 	mov	r4,r17
   8475c:	103ee83a 	callr	r2
   84760:	00000c06 	br	84794 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   84764:	00880004 	movi	r2,8192
   84768:	90800115 	stw	r2,4(r18)
      return 0;
   8476c:	0005883a 	mov	r2,zero
   84770:	00000806 	br	84794 <fstat+0x9c>
   84774:	d0a00717 	ldw	r2,-32740(gp)
   84778:	10000226 	beq	r2,zero,84784 <fstat+0x8c>
   8477c:	103ee83a 	callr	r2
   84780:	00000106 	br	84788 <fstat+0x90>
   84784:	d0a7cf04 	addi	r2,gp,-24772
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84788:	00c01444 	movi	r3,81
   8478c:	10c00015 	stw	r3,0(r2)
    return -1;
   84790:	00bfffc4 	movi	r2,-1
  }
}
   84794:	dfc00317 	ldw	ra,12(sp)
   84798:	dc800217 	ldw	r18,8(sp)
   8479c:	dc400117 	ldw	r17,4(sp)
   847a0:	dc000017 	ldw	r16,0(sp)
   847a4:	dec00404 	addi	sp,sp,16
   847a8:	f800283a 	ret

000847ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   847ac:	deffef04 	addi	sp,sp,-68
   847b0:	dfc01015 	stw	ra,64(sp)
   847b4:	dc000f15 	stw	r16,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   847b8:	20001616 	blt	r4,zero,84814 <isatty+0x68>
   847bc:	2021883a 	mov	r16,r4
   847c0:	01400304 	movi	r5,12
   847c4:	00846bc0 	call	846bc <__mulsi3>
   847c8:	00c00234 	movhi	r3,8
   847cc:	18d87104 	addi	r3,r3,25028
   847d0:	10c5883a 	add	r2,r2,r3
  
  if (fd)
   847d4:	10000f26 	beq	r2,zero,84814 <isatty+0x68>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   847d8:	01400304 	movi	r5,12
   847dc:	8009883a 	mov	r4,r16
   847e0:	00846bc0 	call	846bc <__mulsi3>
   847e4:	00c00234 	movhi	r3,8
   847e8:	18d87104 	addi	r3,r3,25028
   847ec:	1885883a 	add	r2,r3,r2
   847f0:	10800017 	ldw	r2,0(r2)
   847f4:	10800817 	ldw	r2,32(r2)
   847f8:	10000f26 	beq	r2,zero,84838 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   847fc:	d80b883a 	mov	r5,sp
   84800:	8009883a 	mov	r4,r16
   84804:	00846f80 	call	846f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   84808:	d8800117 	ldw	r2,4(sp)
   8480c:	10880020 	cmpeqi	r2,r2,8192
   84810:	00000a06 	br	8483c <isatty+0x90>
   84814:	d0a00717 	ldw	r2,-32740(gp)
   84818:	10000226 	beq	r2,zero,84824 <isatty+0x78>
   8481c:	103ee83a 	callr	r2
   84820:	00000106 	br	84828 <isatty+0x7c>
   84824:	d0a7cf04 	addi	r2,gp,-24772
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84828:	00c01444 	movi	r3,81
   8482c:	10c00015 	stw	r3,0(r2)
    return 0;
   84830:	0005883a 	mov	r2,zero
   84834:	00000106 	br	8483c <isatty+0x90>
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   84838:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   8483c:	dfc01017 	ldw	ra,64(sp)
   84840:	dc000f17 	ldw	r16,60(sp)
   84844:	dec01104 	addi	sp,sp,68
   84848:	f800283a 	ret

0008484c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8484c:	defffb04 	addi	sp,sp,-20
   84850:	dfc00415 	stw	ra,16(sp)
   84854:	dcc00315 	stw	r19,12(sp)
   84858:	dc800215 	stw	r18,8(sp)
   8485c:	dc400115 	stw	r17,4(sp)
   84860:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84864:	20001916 	blt	r4,zero,848cc <lseek+0x80>
   84868:	2021883a 	mov	r16,r4
   8486c:	2825883a 	mov	r18,r5
   84870:	3027883a 	mov	r19,r6
   84874:	01400304 	movi	r5,12
   84878:	00846bc0 	call	846bc <__mulsi3>
   8487c:	04400234 	movhi	r17,8
   84880:	8c587104 	addi	r17,r17,25028
   84884:	1463883a 	add	r17,r2,r17
  
  if (fd) 
   84888:	88001a26 	beq	r17,zero,848f4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8488c:	01400304 	movi	r5,12
   84890:	8009883a 	mov	r4,r16
   84894:	00846bc0 	call	846bc <__mulsi3>
   84898:	00c00234 	movhi	r3,8
   8489c:	18d87104 	addi	r3,r3,25028
   848a0:	1885883a 	add	r2,r3,r2
   848a4:	10800017 	ldw	r2,0(r2)
   848a8:	10800717 	ldw	r2,28(r2)
   848ac:	10001326 	beq	r2,zero,848fc <lseek+0xb0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   848b0:	980d883a 	mov	r6,r19
   848b4:	900b883a 	mov	r5,r18
   848b8:	8809883a 	mov	r4,r17
   848bc:	103ee83a 	callr	r2
   848c0:	1021883a 	mov	r16,r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   848c4:	10000f0e 	bge	r2,zero,84904 <lseek+0xb8>
   848c8:	00000106 	br	848d0 <lseek+0x84>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   848cc:	043febc4 	movi	r16,-81
   848d0:	d0a00717 	ldw	r2,-32740(gp)
   848d4:	10000226 	beq	r2,zero,848e0 <lseek+0x94>
   848d8:	103ee83a 	callr	r2
   848dc:	00000106 	br	848e4 <lseek+0x98>
   848e0:	d0a7cf04 	addi	r2,gp,-24772
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   848e4:	0421c83a 	sub	r16,zero,r16
   848e8:	14000015 	stw	r16,0(r2)
    rc = -1;
   848ec:	043fffc4 	movi	r16,-1
  }

  return rc;
   848f0:	00000406 	br	84904 <lseek+0xb8>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   848f4:	043febc4 	movi	r16,-81
   848f8:	003ff506 	br	848d0 <tx_descriptor+0xfff83870>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   848fc:	043fde84 	movi	r16,-134
   84900:	003ff306 	br	848d0 <tx_descriptor+0xfff83870>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   84904:	8005883a 	mov	r2,r16
   84908:	dfc00417 	ldw	ra,16(sp)
   8490c:	dcc00317 	ldw	r19,12(sp)
   84910:	dc800217 	ldw	r18,8(sp)
   84914:	dc400117 	ldw	r17,4(sp)
   84918:	dc000017 	ldw	r16,0(sp)
   8491c:	dec00504 	addi	sp,sp,20
   84920:	f800283a 	ret

00084924 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   84924:	f800283a 	ret

00084928 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   84928:	f800283a 	ret

0008492c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8492c:	defffb04 	addi	sp,sp,-20
   84930:	dfc00415 	stw	ra,16(sp)
   84934:	dcc00315 	stw	r19,12(sp)
   84938:	dc800215 	stw	r18,8(sp)
   8493c:	dc400115 	stw	r17,4(sp)
   84940:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84944:	20003416 	blt	r4,zero,84a18 <read+0xec>
   84948:	2021883a 	mov	r16,r4
   8494c:	2825883a 	mov	r18,r5
   84950:	3027883a 	mov	r19,r6
   84954:	01400304 	movi	r5,12
   84958:	00846bc0 	call	846bc <__mulsi3>
   8495c:	04400234 	movhi	r17,8
   84960:	8c587104 	addi	r17,r17,25028
   84964:	1463883a 	add	r17,r2,r17
  
  if (fd)
   84968:	88002b26 	beq	r17,zero,84a18 <read+0xec>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8496c:	01400304 	movi	r5,12
   84970:	8009883a 	mov	r4,r16
   84974:	00846bc0 	call	846bc <__mulsi3>
   84978:	00c00234 	movhi	r3,8
   8497c:	18d87304 	addi	r3,r3,25036
   84980:	10c5883a 	add	r2,r2,r3
   84984:	10800017 	ldw	r2,0(r2)
   84988:	108000cc 	andi	r2,r2,3
   8498c:	00c00044 	movi	r3,1
   84990:	10c01826 	beq	r2,r3,849f4 <read+0xc8>
        (fd->dev->read))
   84994:	01400304 	movi	r5,12
   84998:	8009883a 	mov	r4,r16
   8499c:	00846bc0 	call	846bc <__mulsi3>
   849a0:	00c00234 	movhi	r3,8
   849a4:	18d87104 	addi	r3,r3,25028
   849a8:	1885883a 	add	r2,r3,r2
   849ac:	10800017 	ldw	r2,0(r2)
   849b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   849b4:	10000f26 	beq	r2,zero,849f4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   849b8:	980d883a 	mov	r6,r19
   849bc:	900b883a 	mov	r5,r18
   849c0:	8809883a 	mov	r4,r17
   849c4:	103ee83a 	callr	r2
   849c8:	1021883a 	mov	r16,r2
   849cc:	10001a0e 	bge	r2,zero,84a38 <read+0x10c>
   849d0:	d0a00717 	ldw	r2,-32740(gp)
   849d4:	10000226 	beq	r2,zero,849e0 <read+0xb4>
   849d8:	103ee83a 	callr	r2
   849dc:	00000106 	br	849e4 <read+0xb8>
   849e0:	d0a7cf04 	addi	r2,gp,-24772
        {
          ALT_ERRNO = -rval;
   849e4:	0421c83a 	sub	r16,zero,r16
   849e8:	14000015 	stw	r16,0(r2)
          return -1;
   849ec:	00bfffc4 	movi	r2,-1
   849f0:	00001106 	br	84a38 <read+0x10c>
   849f4:	d0a00717 	ldw	r2,-32740(gp)
   849f8:	10000226 	beq	r2,zero,84a04 <read+0xd8>
   849fc:	103ee83a 	callr	r2
   84a00:	00000106 	br	84a08 <read+0xdc>
   84a04:	d0a7cf04 	addi	r2,gp,-24772
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   84a08:	00c00344 	movi	r3,13
   84a0c:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   84a10:	00bfffc4 	movi	r2,-1
   84a14:	00000806 	br	84a38 <read+0x10c>
   84a18:	d0a00717 	ldw	r2,-32740(gp)
   84a1c:	10000226 	beq	r2,zero,84a28 <read+0xfc>
   84a20:	103ee83a 	callr	r2
   84a24:	00000106 	br	84a2c <read+0x100>
   84a28:	d0a7cf04 	addi	r2,gp,-24772
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   84a2c:	00c01444 	movi	r3,81
   84a30:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   84a34:	00bfffc4 	movi	r2,-1
}
   84a38:	dfc00417 	ldw	ra,16(sp)
   84a3c:	dcc00317 	ldw	r19,12(sp)
   84a40:	dc800217 	ldw	r18,8(sp)
   84a44:	dc400117 	ldw	r17,4(sp)
   84a48:	dc000017 	ldw	r16,0(sp)
   84a4c:	dec00504 	addi	sp,sp,20
   84a50:	f800283a 	ret

00084a54 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84a54:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a58:	00bfff84 	movi	r2,-2
   84a5c:	2884703a 	and	r2,r5,r2
   84a60:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   84a64:	d0a00f17 	ldw	r2,-32708(gp)
   84a68:	108000c4 	addi	r2,r2,3
   84a6c:	00ffff04 	movi	r3,-4
   84a70:	10c4703a 	and	r2,r2,r3
   84a74:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   84a78:	1109883a 	add	r4,r2,r4
   84a7c:	00c00374 	movhi	r3,13
   84a80:	18ec0004 	addi	r3,r3,-20480
   84a84:	1900032e 	bgeu	r3,r4,84a94 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84a88:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   84a8c:	00bfffc4 	movi	r2,-1
   84a90:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   84a94:	d1200f15 	stw	r4,-32708(gp)
   84a98:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   84a9c:	f800283a 	ret

00084aa0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   84aa0:	defffb04 	addi	sp,sp,-20
   84aa4:	dfc00415 	stw	ra,16(sp)
   84aa8:	dcc00315 	stw	r19,12(sp)
   84aac:	dc800215 	stw	r18,8(sp)
   84ab0:	dc400115 	stw	r17,4(sp)
   84ab4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84ab8:	20003316 	blt	r4,zero,84b88 <write+0xe8>
   84abc:	2021883a 	mov	r16,r4
   84ac0:	2825883a 	mov	r18,r5
   84ac4:	3027883a 	mov	r19,r6
   84ac8:	01400304 	movi	r5,12
   84acc:	00846bc0 	call	846bc <__mulsi3>
   84ad0:	04400234 	movhi	r17,8
   84ad4:	8c587104 	addi	r17,r17,25028
   84ad8:	1463883a 	add	r17,r2,r17
  
  if (fd)
   84adc:	88002a26 	beq	r17,zero,84b88 <write+0xe8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   84ae0:	01400304 	movi	r5,12
   84ae4:	8009883a 	mov	r4,r16
   84ae8:	00846bc0 	call	846bc <__mulsi3>
   84aec:	00c00234 	movhi	r3,8
   84af0:	18d87304 	addi	r3,r3,25036
   84af4:	10c5883a 	add	r2,r2,r3
   84af8:	10800017 	ldw	r2,0(r2)
   84afc:	108000cc 	andi	r2,r2,3
   84b00:	10001826 	beq	r2,zero,84b64 <write+0xc4>
   84b04:	01400304 	movi	r5,12
   84b08:	8009883a 	mov	r4,r16
   84b0c:	00846bc0 	call	846bc <__mulsi3>
   84b10:	00c00234 	movhi	r3,8
   84b14:	18d87104 	addi	r3,r3,25028
   84b18:	1885883a 	add	r2,r3,r2
   84b1c:	10800017 	ldw	r2,0(r2)
   84b20:	10800617 	ldw	r2,24(r2)
   84b24:	10000f26 	beq	r2,zero,84b64 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   84b28:	980d883a 	mov	r6,r19
   84b2c:	900b883a 	mov	r5,r18
   84b30:	8809883a 	mov	r4,r17
   84b34:	103ee83a 	callr	r2
   84b38:	1021883a 	mov	r16,r2
   84b3c:	10001a0e 	bge	r2,zero,84ba8 <write+0x108>
   84b40:	d0a00717 	ldw	r2,-32740(gp)
   84b44:	10000226 	beq	r2,zero,84b50 <write+0xb0>
   84b48:	103ee83a 	callr	r2
   84b4c:	00000106 	br	84b54 <write+0xb4>
   84b50:	d0a7cf04 	addi	r2,gp,-24772
      {
        ALT_ERRNO = -rval;
   84b54:	0421c83a 	sub	r16,zero,r16
   84b58:	14000015 	stw	r16,0(r2)
        return -1;
   84b5c:	00bfffc4 	movi	r2,-1
   84b60:	00001106 	br	84ba8 <write+0x108>
   84b64:	d0a00717 	ldw	r2,-32740(gp)
   84b68:	10000226 	beq	r2,zero,84b74 <write+0xd4>
   84b6c:	103ee83a 	callr	r2
   84b70:	00000106 	br	84b78 <write+0xd8>
   84b74:	d0a7cf04 	addi	r2,gp,-24772
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   84b78:	00c00344 	movi	r3,13
   84b7c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   84b80:	00bfffc4 	movi	r2,-1
   84b84:	00000806 	br	84ba8 <write+0x108>
   84b88:	d0a00717 	ldw	r2,-32740(gp)
   84b8c:	10000226 	beq	r2,zero,84b98 <write+0xf8>
   84b90:	103ee83a 	callr	r2
   84b94:	00000106 	br	84b9c <write+0xfc>
   84b98:	d0a7cf04 	addi	r2,gp,-24772
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   84b9c:	00c01444 	movi	r3,81
   84ba0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   84ba4:	00bfffc4 	movi	r2,-1
}
   84ba8:	dfc00417 	ldw	ra,16(sp)
   84bac:	dcc00317 	ldw	r19,12(sp)
   84bb0:	dc800217 	ldw	r18,8(sp)
   84bb4:	dc400117 	ldw	r17,4(sp)
   84bb8:	dc000017 	ldw	r16,0(sp)
   84bbc:	dec00504 	addi	sp,sp,20
   84bc0:	f800283a 	ret
